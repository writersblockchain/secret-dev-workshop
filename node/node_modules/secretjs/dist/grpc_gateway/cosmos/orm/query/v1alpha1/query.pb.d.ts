import * as fm from "../../../../fetch.pb";
import * as GoogleProtobufAny from "../../../../google/protobuf/any.pb";
import * as GoogleProtobufDuration from "../../../../google/protobuf/duration.pb";
import * as GoogleProtobufTimestamp from "../../../../google/protobuf/timestamp.pb";
import * as CosmosBaseQueryV1beta1Pagination from "../../../base/query/v1beta1/pagination.pb";
declare type Absent<T, K extends keyof T> = {
    [k in Exclude<keyof T, K>]?: undefined;
};
declare type OneOf<T> = {
    [k in keyof T]?: undefined;
} | (keyof T extends infer K ? (K extends string & keyof T ? {
    [k in K]: T[K];
} & Absent<T, K> : never) : never);
export declare type GetRequest = {
    message_name?: string;
    index?: string;
    values?: IndexValue[];
};
export declare type GetResponse = {
    result?: GoogleProtobufAny.Any;
};
export declare type ListRequestPrefix = {
    values?: IndexValue[];
};
export declare type ListRequestRange = {
    start?: IndexValue[];
    end?: IndexValue[];
};
declare type BaseListRequest = {
    message_name?: string;
    index?: string;
    pagination?: CosmosBaseQueryV1beta1Pagination.PageRequest;
};
export declare type ListRequest = BaseListRequest & OneOf<{
    prefix: ListRequestPrefix;
    range: ListRequestRange;
}>;
export declare type ListResponse = {
    results?: GoogleProtobufAny.Any[];
    pagination?: CosmosBaseQueryV1beta1Pagination.PageResponse;
};
declare type BaseIndexValue = {};
export declare type IndexValue = BaseIndexValue & OneOf<{
    uint: string;
    int: string;
    str: string;
    bytes: Uint8Array;
    enum: string;
    bool: boolean;
    timestamp: GoogleProtobufTimestamp.Timestamp;
    duration: GoogleProtobufDuration.Duration;
}>;
export declare class Query {
    static Get(req: GetRequest, initReq?: fm.InitReq): Promise<GetResponse>;
    static List(req: ListRequest, initReq?: fm.InitReq): Promise<ListResponse>;
}
export {};
//# sourceMappingURL=query.pb.d.ts.map