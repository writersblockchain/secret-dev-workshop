import * as _m0 from "protobufjs/minimal";
import { Config } from "./config";
export declare const protobufPackage = "cosmos.app.v1alpha1";
/** QueryConfigRequest is the Query/Config request type. */
export interface QueryConfigRequest {
}
/** QueryConfigRequest is the Query/Config response type. */
export interface QueryConfigResponse {
    /** config is the current app config. */
    config?: Config | undefined;
}
export declare const QueryConfigRequest: {
    encode(_: QueryConfigRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryConfigRequest;
    fromJSON(_: any): QueryConfigRequest;
    toJSON(_: QueryConfigRequest): unknown;
    create(base?: {} | undefined): QueryConfigRequest;
    fromPartial(_: DeepPartial<QueryConfigRequest>): QueryConfigRequest;
};
export declare const QueryConfigResponse: {
    encode(message: QueryConfigResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryConfigResponse;
    fromJSON(object: any): QueryConfigResponse;
    toJSON(message: QueryConfigResponse): unknown;
    create(base?: {
        config?: {
            modules?: {
                name?: string | undefined;
                config?: {
                    type_url?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
                golang_bindings?: {
                    interface_type?: string | undefined;
                    implementation?: string | undefined;
                }[] | undefined;
            }[] | undefined;
            golang_bindings?: {
                interface_type?: string | undefined;
                implementation?: string | undefined;
            }[] | undefined;
        } | undefined;
    } | undefined): QueryConfigResponse;
    fromPartial(object: DeepPartial<QueryConfigResponse>): QueryConfigResponse;
};
/** Query is the app module query service. */
export interface Query {
    /** Config returns the current app config. */
    Config(request: QueryConfigRequest): Promise<QueryConfigResponse>;
}
export declare const QueryServiceName = "cosmos.app.v1alpha1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Config(request: QueryConfigRequest): Promise<QueryConfigResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=query.d.ts.map