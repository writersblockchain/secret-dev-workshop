import * as _m0 from "protobufjs/minimal";
import { ModuleOptions } from "./options";
export declare const protobufPackage = "cosmos.autocli.v1";
/** AppOptionsRequest is the RemoteInfoService/AppOptions request type. */
export interface AppOptionsRequest {
}
/** AppOptionsResponse is the RemoteInfoService/AppOptions response type. */
export interface AppOptionsResponse {
    /** module_options is a map of module name to autocli module options. */
    module_options: {
        [key: string]: ModuleOptions;
    };
}
export interface AppOptionsResponse_ModuleOptionsEntry {
    key: string;
    value?: ModuleOptions | undefined;
}
export declare const AppOptionsRequest: {
    encode(_: AppOptionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppOptionsRequest;
    fromJSON(_: any): AppOptionsRequest;
    toJSON(_: AppOptionsRequest): unknown;
    create(base?: {} | undefined): AppOptionsRequest;
    fromPartial(_: DeepPartial<AppOptionsRequest>): AppOptionsRequest;
};
export declare const AppOptionsResponse: {
    encode(message: AppOptionsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppOptionsResponse;
    fromJSON(object: any): AppOptionsResponse;
    toJSON(message: AppOptionsResponse): unknown;
    create(base?: {
        module_options?: {
            [x: string]: {
                tx?: {
                    service?: string | undefined;
                    rpc_command_options?: {
                        rpc_method?: string | undefined;
                        use?: string | undefined;
                        long?: string | undefined;
                        short?: string | undefined;
                        example?: string | undefined;
                        alias?: string[] | undefined;
                        suggest_for?: string[] | undefined;
                        deprecated?: string | undefined;
                        version?: string | undefined;
                        flag_options?: {
                            [x: string]: {
                                name?: string | undefined;
                                shorthand?: string | undefined;
                                usage?: string | undefined;
                                default_value?: string | undefined;
                                deprecated?: string | undefined;
                                shorthand_deprecated?: string | undefined;
                                hidden?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        positional_args?: {
                            proto_field?: string | undefined;
                            varargs?: boolean | undefined;
                        }[] | undefined;
                        skip?: boolean | undefined;
                    }[] | undefined;
                    sub_commands?: {
                        [x: string]: any | undefined;
                    } | undefined;
                } | undefined;
                query?: {
                    service?: string | undefined;
                    rpc_command_options?: {
                        rpc_method?: string | undefined;
                        use?: string | undefined;
                        long?: string | undefined;
                        short?: string | undefined;
                        example?: string | undefined;
                        alias?: string[] | undefined;
                        suggest_for?: string[] | undefined;
                        deprecated?: string | undefined;
                        version?: string | undefined;
                        flag_options?: {
                            [x: string]: {
                                name?: string | undefined;
                                shorthand?: string | undefined;
                                usage?: string | undefined;
                                default_value?: string | undefined;
                                deprecated?: string | undefined;
                                shorthand_deprecated?: string | undefined;
                                hidden?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        positional_args?: {
                            proto_field?: string | undefined;
                            varargs?: boolean | undefined;
                        }[] | undefined;
                        skip?: boolean | undefined;
                    }[] | undefined;
                    sub_commands?: {
                        [x: string]: any | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } | undefined): AppOptionsResponse;
    fromPartial(object: DeepPartial<AppOptionsResponse>): AppOptionsResponse;
};
export declare const AppOptionsResponse_ModuleOptionsEntry: {
    encode(message: AppOptionsResponse_ModuleOptionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppOptionsResponse_ModuleOptionsEntry;
    fromJSON(object: any): AppOptionsResponse_ModuleOptionsEntry;
    toJSON(message: AppOptionsResponse_ModuleOptionsEntry): unknown;
    create(base?: {
        key?: string | undefined;
        value?: {
            tx?: {
                service?: string | undefined;
                rpc_command_options?: {
                    rpc_method?: string | undefined;
                    use?: string | undefined;
                    long?: string | undefined;
                    short?: string | undefined;
                    example?: string | undefined;
                    alias?: string[] | undefined;
                    suggest_for?: string[] | undefined;
                    deprecated?: string | undefined;
                    version?: string | undefined;
                    flag_options?: {
                        [x: string]: {
                            name?: string | undefined;
                            shorthand?: string | undefined;
                            usage?: string | undefined;
                            default_value?: string | undefined;
                            deprecated?: string | undefined;
                            shorthand_deprecated?: string | undefined;
                            hidden?: boolean | undefined;
                        } | undefined;
                    } | undefined;
                    positional_args?: {
                        proto_field?: string | undefined;
                        varargs?: boolean | undefined;
                    }[] | undefined;
                    skip?: boolean | undefined;
                }[] | undefined;
                sub_commands?: {
                    [x: string]: any | undefined;
                } | undefined;
            } | undefined;
            query?: {
                service?: string | undefined;
                rpc_command_options?: {
                    rpc_method?: string | undefined;
                    use?: string | undefined;
                    long?: string | undefined;
                    short?: string | undefined;
                    example?: string | undefined;
                    alias?: string[] | undefined;
                    suggest_for?: string[] | undefined;
                    deprecated?: string | undefined;
                    version?: string | undefined;
                    flag_options?: {
                        [x: string]: {
                            name?: string | undefined;
                            shorthand?: string | undefined;
                            usage?: string | undefined;
                            default_value?: string | undefined;
                            deprecated?: string | undefined;
                            shorthand_deprecated?: string | undefined;
                            hidden?: boolean | undefined;
                        } | undefined;
                    } | undefined;
                    positional_args?: {
                        proto_field?: string | undefined;
                        varargs?: boolean | undefined;
                    }[] | undefined;
                    skip?: boolean | undefined;
                }[] | undefined;
                sub_commands?: {
                    [x: string]: any | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } | undefined): AppOptionsResponse_ModuleOptionsEntry;
    fromPartial(object: DeepPartial<AppOptionsResponse_ModuleOptionsEntry>): AppOptionsResponse_ModuleOptionsEntry;
};
/**
 * RemoteInfoService provides clients with the information they need
 * to build dynamically CLI clients for remote chains.
 */
export interface Query {
    /** AppOptions returns the autocli options for all of the modules in an app. */
    AppOptions(request: AppOptionsRequest): Promise<AppOptionsResponse>;
}
export declare const QueryServiceName = "cosmos.autocli.v1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AppOptions(request: AppOptionsRequest): Promise<AppOptionsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=query.d.ts.map