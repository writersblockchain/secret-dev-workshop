import * as _m0 from "protobufjs/minimal";
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { EvidenceList } from "../../../../tendermint/types/evidence";
import { BlockID, Commit, Data } from "../../../../tendermint/types/types";
import { Consensus } from "../../../../tendermint/version/types";
export declare const protobufPackage = "cosmos.base.tendermint.v1beta1";
/**
 * Block is tendermint type Block, with the Header proposer address
 * field converted to bech32 string.
 */
export interface Block {
    header?: Header | undefined;
    data?: Data | undefined;
    evidence?: EvidenceList | undefined;
    last_commit?: Commit | undefined;
}
/** Header defines the structure of a Tendermint block header. */
export interface Header {
    /** basic block info */
    version?: Consensus | undefined;
    chain_id: string;
    height: string;
    time?: Timestamp | undefined;
    /** prev block info */
    last_block_id?: BlockID | undefined;
    /** hashes of block data */
    last_commit_hash: Uint8Array;
    /** transactions */
    data_hash: Uint8Array;
    /** hashes from the app output from the prev block */
    validators_hash: Uint8Array;
    /** validators for the next block */
    next_validators_hash: Uint8Array;
    /** consensus params for current block */
    consensus_hash: Uint8Array;
    /** state after txs from the previous block */
    app_hash: Uint8Array;
    /** root hash of all results from the txs from the previous block */
    last_results_hash: Uint8Array;
    /** consensus info */
    evidence_hash: Uint8Array;
    /**
     * proposer_address is the original block proposer address, formatted as a Bech32 string.
     * In Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string
     * for better UX.
     */
    proposer_address: string;
}
export declare const Block: {
    encode(message: Block, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Block;
    fromJSON(object: any): Block;
    toJSON(message: Block): unknown;
    create(base?: {
        header?: {
            version?: {
                block?: string | undefined;
                app?: string | undefined;
            } | undefined;
            chain_id?: string | undefined;
            height?: string | undefined;
            time?: {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } | undefined;
            last_block_id?: {
                hash?: Uint8Array | undefined;
                part_set_header?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            last_commit_hash?: Uint8Array | undefined;
            data_hash?: Uint8Array | undefined;
            validators_hash?: Uint8Array | undefined;
            next_validators_hash?: Uint8Array | undefined;
            consensus_hash?: Uint8Array | undefined;
            app_hash?: Uint8Array | undefined;
            last_results_hash?: Uint8Array | undefined;
            evidence_hash?: Uint8Array | undefined;
            proposer_address?: string | undefined;
        } | undefined;
        data?: {
            txs?: Uint8Array[] | undefined;
        } | undefined;
        evidence?: {
            evidence?: {
                duplicate_vote_evidence?: {
                    vote_a?: {
                        type?: import("../../../../tendermint/types/types").SignedMsgType | undefined;
                        height?: string | undefined;
                        round?: number | undefined;
                        block_id?: {
                            hash?: Uint8Array | undefined;
                            part_set_header?: {
                                total?: number | undefined;
                                hash?: Uint8Array | undefined;
                            } | undefined;
                        } | undefined;
                        timestamp?: {
                            seconds?: string | undefined;
                            nanos?: number | undefined;
                        } | undefined;
                        validator_address?: Uint8Array | undefined;
                        validator_index?: number | undefined;
                        signature?: Uint8Array | undefined;
                        extension?: Uint8Array | undefined;
                        extension_signature?: Uint8Array | undefined;
                    } | undefined;
                    vote_b?: {
                        type?: import("../../../../tendermint/types/types").SignedMsgType | undefined;
                        height?: string | undefined;
                        round?: number | undefined;
                        block_id?: {
                            hash?: Uint8Array | undefined;
                            part_set_header?: {
                                total?: number | undefined;
                                hash?: Uint8Array | undefined;
                            } | undefined;
                        } | undefined;
                        timestamp?: {
                            seconds?: string | undefined;
                            nanos?: number | undefined;
                        } | undefined;
                        validator_address?: Uint8Array | undefined;
                        validator_index?: number | undefined;
                        signature?: Uint8Array | undefined;
                        extension?: Uint8Array | undefined;
                        extension_signature?: Uint8Array | undefined;
                    } | undefined;
                    total_voting_power?: string | undefined;
                    validator_power?: string | undefined;
                    timestamp?: {
                        seconds?: string | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
                light_client_attack_evidence?: {
                    conflicting_block?: {
                        signed_header?: {
                            header?: {
                                version?: {
                                    block?: string | undefined;
                                    app?: string | undefined;
                                } | undefined;
                                chain_id?: string | undefined;
                                height?: string | undefined;
                                time?: {
                                    seconds?: string | undefined;
                                    nanos?: number | undefined;
                                } | undefined;
                                last_block_id?: {
                                    hash?: Uint8Array | undefined;
                                    part_set_header?: {
                                        total?: number | undefined;
                                        hash?: Uint8Array | undefined;
                                    } | undefined;
                                } | undefined;
                                last_commit_hash?: Uint8Array | undefined;
                                data_hash?: Uint8Array | undefined;
                                validators_hash?: Uint8Array | undefined;
                                next_validators_hash?: Uint8Array | undefined;
                                consensus_hash?: Uint8Array | undefined;
                                app_hash?: Uint8Array | undefined;
                                last_results_hash?: Uint8Array | undefined;
                                evidence_hash?: Uint8Array | undefined;
                                proposer_address?: Uint8Array | undefined;
                                encrypted_random?: {
                                    random?: Uint8Array | undefined;
                                    proof?: Uint8Array | undefined;
                                } | undefined;
                            } | undefined;
                            commit?: {
                                height?: string | undefined;
                                round?: number | undefined;
                                block_id?: {
                                    hash?: Uint8Array | undefined;
                                    part_set_header?: {
                                        total?: number | undefined;
                                        hash?: Uint8Array | undefined;
                                    } | undefined;
                                } | undefined;
                                signatures?: {
                                    block_id_flag?: import("../../../../tendermint/types/validator").BlockIDFlag | undefined;
                                    validator_address?: Uint8Array | undefined;
                                    timestamp?: {
                                        seconds?: string | undefined;
                                        nanos?: number | undefined;
                                    } | undefined;
                                    signature?: Uint8Array | undefined;
                                }[] | undefined;
                            } | undefined;
                        } | undefined;
                        validator_set?: {
                            validators?: {
                                address?: Uint8Array | undefined;
                                pub_key?: {
                                    ed25519?: Uint8Array | undefined;
                                    secp256k1?: Uint8Array | undefined;
                                } | undefined;
                                voting_power?: string | undefined;
                                proposer_priority?: string | undefined;
                            }[] | undefined;
                            proposer?: {
                                address?: Uint8Array | undefined;
                                pub_key?: {
                                    ed25519?: Uint8Array | undefined;
                                    secp256k1?: Uint8Array | undefined;
                                } | undefined;
                                voting_power?: string | undefined;
                                proposer_priority?: string | undefined;
                            } | undefined;
                            total_voting_power?: string | undefined;
                        } | undefined;
                    } | undefined;
                    common_height?: string | undefined;
                    byzantine_validators?: {
                        address?: Uint8Array | undefined;
                        pub_key?: {
                            ed25519?: Uint8Array | undefined;
                            secp256k1?: Uint8Array | undefined;
                        } | undefined;
                        voting_power?: string | undefined;
                        proposer_priority?: string | undefined;
                    }[] | undefined;
                    total_voting_power?: string | undefined;
                    timestamp?: {
                        seconds?: string | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
        last_commit?: {
            height?: string | undefined;
            round?: number | undefined;
            block_id?: {
                hash?: Uint8Array | undefined;
                part_set_header?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            signatures?: {
                block_id_flag?: import("../../../../tendermint/types/validator").BlockIDFlag | undefined;
                validator_address?: Uint8Array | undefined;
                timestamp?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                signature?: Uint8Array | undefined;
            }[] | undefined;
        } | undefined;
    } | undefined): Block;
    fromPartial(object: DeepPartial<Block>): Block;
};
export declare const Header: {
    encode(message: Header, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Header;
    fromJSON(object: any): Header;
    toJSON(message: Header): unknown;
    create(base?: {
        version?: {
            block?: string | undefined;
            app?: string | undefined;
        } | undefined;
        chain_id?: string | undefined;
        height?: string | undefined;
        time?: {
            seconds?: string | undefined;
            nanos?: number | undefined;
        } | undefined;
        last_block_id?: {
            hash?: Uint8Array | undefined;
            part_set_header?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        last_commit_hash?: Uint8Array | undefined;
        data_hash?: Uint8Array | undefined;
        validators_hash?: Uint8Array | undefined;
        next_validators_hash?: Uint8Array | undefined;
        consensus_hash?: Uint8Array | undefined;
        app_hash?: Uint8Array | undefined;
        last_results_hash?: Uint8Array | undefined;
        evidence_hash?: Uint8Array | undefined;
        proposer_address?: string | undefined;
    } | undefined): Header;
    fromPartial(object: DeepPartial<Header>): Header;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=types.d.ts.map