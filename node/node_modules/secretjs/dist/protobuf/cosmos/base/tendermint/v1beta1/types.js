"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: cosmos/base/tendermint/v1beta1/types.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Header = exports.Block = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
const timestamp_1 = require("../../../../google/protobuf/timestamp");
const evidence_1 = require("../../../../tendermint/types/evidence");
const types_1 = require("../../../../tendermint/types/types");
const types_2 = require("../../../../tendermint/version/types");
exports.protobufPackage = "cosmos.base.tendermint.v1beta1";
function createBaseBlock() {
    return { header: undefined, data: undefined, evidence: undefined, last_commit: undefined };
}
exports.Block = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.header !== undefined) {
            exports.Header.encode(message.header, writer.uint32(10).fork()).ldelim();
        }
        if (message.data !== undefined) {
            types_1.Data.encode(message.data, writer.uint32(18).fork()).ldelim();
        }
        if (message.evidence !== undefined) {
            evidence_1.EvidenceList.encode(message.evidence, writer.uint32(26).fork()).ldelim();
        }
        if (message.last_commit !== undefined) {
            types_1.Commit.encode(message.last_commit, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.header = exports.Header.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = types_1.Data.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.evidence = evidence_1.EvidenceList.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.last_commit = types_1.Commit.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            header: isSet(object.header) ? exports.Header.fromJSON(object.header) : undefined,
            data: isSet(object.data) ? types_1.Data.fromJSON(object.data) : undefined,
            evidence: isSet(object.evidence) ? evidence_1.EvidenceList.fromJSON(object.evidence) : undefined,
            last_commit: isSet(object.last_commit) ? types_1.Commit.fromJSON(object.last_commit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.header !== undefined) {
            obj.header = exports.Header.toJSON(message.header);
        }
        if (message.data !== undefined) {
            obj.data = types_1.Data.toJSON(message.data);
        }
        if (message.evidence !== undefined) {
            obj.evidence = evidence_1.EvidenceList.toJSON(message.evidence);
        }
        if (message.last_commit !== undefined) {
            obj.last_commit = types_1.Commit.toJSON(message.last_commit);
        }
        return obj;
    },
    create(base) {
        return exports.Block.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseBlock();
        message.header = (object.header !== undefined && object.header !== null)
            ? exports.Header.fromPartial(object.header)
            : undefined;
        message.data = (object.data !== undefined && object.data !== null) ? types_1.Data.fromPartial(object.data) : undefined;
        message.evidence = (object.evidence !== undefined && object.evidence !== null)
            ? evidence_1.EvidenceList.fromPartial(object.evidence)
            : undefined;
        message.last_commit = (object.last_commit !== undefined && object.last_commit !== null)
            ? types_1.Commit.fromPartial(object.last_commit)
            : undefined;
        return message;
    },
};
function createBaseHeader() {
    return {
        version: undefined,
        chain_id: "",
        height: "0",
        time: undefined,
        last_block_id: undefined,
        last_commit_hash: new Uint8Array(0),
        data_hash: new Uint8Array(0),
        validators_hash: new Uint8Array(0),
        next_validators_hash: new Uint8Array(0),
        consensus_hash: new Uint8Array(0),
        app_hash: new Uint8Array(0),
        last_results_hash: new Uint8Array(0),
        evidence_hash: new Uint8Array(0),
        proposer_address: "",
    };
}
exports.Header = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.version !== undefined) {
            types_2.Consensus.encode(message.version, writer.uint32(10).fork()).ldelim();
        }
        if (message.chain_id !== "") {
            writer.uint32(18).string(message.chain_id);
        }
        if (message.height !== "0") {
            writer.uint32(24).int64(message.height);
        }
        if (message.time !== undefined) {
            timestamp_1.Timestamp.encode(message.time, writer.uint32(34).fork()).ldelim();
        }
        if (message.last_block_id !== undefined) {
            types_1.BlockID.encode(message.last_block_id, writer.uint32(42).fork()).ldelim();
        }
        if (message.last_commit_hash.length !== 0) {
            writer.uint32(50).bytes(message.last_commit_hash);
        }
        if (message.data_hash.length !== 0) {
            writer.uint32(58).bytes(message.data_hash);
        }
        if (message.validators_hash.length !== 0) {
            writer.uint32(66).bytes(message.validators_hash);
        }
        if (message.next_validators_hash.length !== 0) {
            writer.uint32(74).bytes(message.next_validators_hash);
        }
        if (message.consensus_hash.length !== 0) {
            writer.uint32(82).bytes(message.consensus_hash);
        }
        if (message.app_hash.length !== 0) {
            writer.uint32(90).bytes(message.app_hash);
        }
        if (message.last_results_hash.length !== 0) {
            writer.uint32(98).bytes(message.last_results_hash);
        }
        if (message.evidence_hash.length !== 0) {
            writer.uint32(106).bytes(message.evidence_hash);
        }
        if (message.proposer_address !== "") {
            writer.uint32(114).string(message.proposer_address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeader();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.version = types_2.Consensus.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.chain_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.height = longToString(reader.int64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.time = timestamp_1.Timestamp.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.last_block_id = types_1.BlockID.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.last_commit_hash = reader.bytes();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.data_hash = reader.bytes();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.validators_hash = reader.bytes();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.next_validators_hash = reader.bytes();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.consensus_hash = reader.bytes();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.app_hash = reader.bytes();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.last_results_hash = reader.bytes();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.evidence_hash = reader.bytes();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.proposer_address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? types_2.Consensus.fromJSON(object.version) : undefined,
            chain_id: isSet(object.chain_id) ? globalThis.String(object.chain_id) : "",
            height: isSet(object.height) ? globalThis.String(object.height) : "0",
            time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
            last_block_id: isSet(object.last_block_id) ? types_1.BlockID.fromJSON(object.last_block_id) : undefined,
            last_commit_hash: isSet(object.last_commit_hash) ? bytesFromBase64(object.last_commit_hash) : new Uint8Array(0),
            data_hash: isSet(object.data_hash) ? bytesFromBase64(object.data_hash) : new Uint8Array(0),
            validators_hash: isSet(object.validators_hash) ? bytesFromBase64(object.validators_hash) : new Uint8Array(0),
            next_validators_hash: isSet(object.next_validators_hash)
                ? bytesFromBase64(object.next_validators_hash)
                : new Uint8Array(0),
            consensus_hash: isSet(object.consensus_hash) ? bytesFromBase64(object.consensus_hash) : new Uint8Array(0),
            app_hash: isSet(object.app_hash) ? bytesFromBase64(object.app_hash) : new Uint8Array(0),
            last_results_hash: isSet(object.last_results_hash)
                ? bytesFromBase64(object.last_results_hash)
                : new Uint8Array(0),
            evidence_hash: isSet(object.evidence_hash) ? bytesFromBase64(object.evidence_hash) : new Uint8Array(0),
            proposer_address: isSet(object.proposer_address) ? globalThis.String(object.proposer_address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== undefined) {
            obj.version = types_2.Consensus.toJSON(message.version);
        }
        if (message.chain_id !== "") {
            obj.chain_id = message.chain_id;
        }
        if (message.height !== "0") {
            obj.height = message.height;
        }
        if (message.time !== undefined) {
            obj.time = fromTimestamp(message.time).toISOString();
        }
        if (message.last_block_id !== undefined) {
            obj.last_block_id = types_1.BlockID.toJSON(message.last_block_id);
        }
        if (message.last_commit_hash.length !== 0) {
            obj.last_commit_hash = base64FromBytes(message.last_commit_hash);
        }
        if (message.data_hash.length !== 0) {
            obj.data_hash = base64FromBytes(message.data_hash);
        }
        if (message.validators_hash.length !== 0) {
            obj.validators_hash = base64FromBytes(message.validators_hash);
        }
        if (message.next_validators_hash.length !== 0) {
            obj.next_validators_hash = base64FromBytes(message.next_validators_hash);
        }
        if (message.consensus_hash.length !== 0) {
            obj.consensus_hash = base64FromBytes(message.consensus_hash);
        }
        if (message.app_hash.length !== 0) {
            obj.app_hash = base64FromBytes(message.app_hash);
        }
        if (message.last_results_hash.length !== 0) {
            obj.last_results_hash = base64FromBytes(message.last_results_hash);
        }
        if (message.evidence_hash.length !== 0) {
            obj.evidence_hash = base64FromBytes(message.evidence_hash);
        }
        if (message.proposer_address !== "") {
            obj.proposer_address = message.proposer_address;
        }
        return obj;
    },
    create(base) {
        return exports.Header.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseHeader();
        message.version = (object.version !== undefined && object.version !== null)
            ? types_2.Consensus.fromPartial(object.version)
            : undefined;
        message.chain_id = (_a = object.chain_id) !== null && _a !== void 0 ? _a : "";
        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : "0";
        message.time = (object.time !== undefined && object.time !== null) ? timestamp_1.Timestamp.fromPartial(object.time) : undefined;
        message.last_block_id = (object.last_block_id !== undefined && object.last_block_id !== null)
            ? types_1.BlockID.fromPartial(object.last_block_id)
            : undefined;
        message.last_commit_hash = (_c = object.last_commit_hash) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.data_hash = (_d = object.data_hash) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.validators_hash = (_e = object.validators_hash) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        message.next_validators_hash = (_f = object.next_validators_hash) !== null && _f !== void 0 ? _f : new Uint8Array(0);
        message.consensus_hash = (_g = object.consensus_hash) !== null && _g !== void 0 ? _g : new Uint8Array(0);
        message.app_hash = (_h = object.app_hash) !== null && _h !== void 0 ? _h : new Uint8Array(0);
        message.last_results_hash = (_j = object.last_results_hash) !== null && _j !== void 0 ? _j : new Uint8Array(0);
        message.evidence_hash = (_k = object.evidence_hash) !== null && _k !== void 0 ? _k : new Uint8Array(0);
        message.proposer_address = (_l = object.proposer_address) !== null && _l !== void 0 ? _l : "";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return toTimestamp(o);
    }
    else if (typeof o === "string") {
        return toTimestamp(new globalThis.Date(o));
    }
    else {
        return timestamp_1.Timestamp.fromJSON(o);
    }
}
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map