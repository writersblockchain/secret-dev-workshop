"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: cosmos/orm/query/v1alpha1/query.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.IndexValue = exports.ListResponse = exports.ListRequest_Range = exports.ListRequest_Prefix = exports.ListRequest = exports.GetResponse = exports.GetRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
const any_1 = require("../../../../google/protobuf/any");
const duration_1 = require("../../../../google/protobuf/duration");
const timestamp_1 = require("../../../../google/protobuf/timestamp");
const pagination_1 = require("../../../base/query/v1beta1/pagination");
exports.protobufPackage = "cosmos.orm.query.v1alpha1";
function createBaseGetRequest() {
    return { message_name: "", index: "", values: [] };
}
exports.GetRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.message_name !== "") {
            writer.uint32(10).string(message.message_name);
        }
        if (message.index !== "") {
            writer.uint32(18).string(message.index);
        }
        for (const v of message.values) {
            exports.IndexValue.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.index = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.values.push(exports.IndexValue.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_name: isSet(object.message_name) ? globalThis.String(object.message_name) : "",
            index: isSet(object.index) ? globalThis.String(object.index) : "",
            values: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.values) ? object.values.map((e) => exports.IndexValue.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.message_name !== "") {
            obj.message_name = message.message_name;
        }
        if (message.index !== "") {
            obj.index = message.index;
        }
        if ((_a = message.values) === null || _a === void 0 ? void 0 : _a.length) {
            obj.values = message.values.map((e) => exports.IndexValue.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetRequest();
        message.message_name = (_a = object.message_name) !== null && _a !== void 0 ? _a : "";
        message.index = (_b = object.index) !== null && _b !== void 0 ? _b : "";
        message.values = ((_c = object.values) === null || _c === void 0 ? void 0 : _c.map((e) => exports.IndexValue.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetResponse() {
    return { result: undefined };
}
exports.GetResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.result !== undefined) {
            any_1.Any.encode(message.result, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.result = any_1.Any.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? any_1.Any.fromJSON(object.result) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== undefined) {
            obj.result = any_1.Any.toJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.GetResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetResponse();
        message.result = (object.result !== undefined && object.result !== null)
            ? any_1.Any.fromPartial(object.result)
            : undefined;
        return message;
    },
};
function createBaseListRequest() {
    return { message_name: "", index: "", prefix: undefined, range: undefined, pagination: undefined };
}
exports.ListRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.message_name !== "") {
            writer.uint32(10).string(message.message_name);
        }
        if (message.index !== "") {
            writer.uint32(18).string(message.index);
        }
        if (message.prefix !== undefined) {
            exports.ListRequest_Prefix.encode(message.prefix, writer.uint32(26).fork()).ldelim();
        }
        if (message.range !== undefined) {
            exports.ListRequest_Range.encode(message.range, writer.uint32(34).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.index = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.prefix = exports.ListRequest_Prefix.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.range = exports.ListRequest_Range.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_name: isSet(object.message_name) ? globalThis.String(object.message_name) : "",
            index: isSet(object.index) ? globalThis.String(object.index) : "",
            prefix: isSet(object.prefix) ? exports.ListRequest_Prefix.fromJSON(object.prefix) : undefined,
            range: isSet(object.range) ? exports.ListRequest_Range.fromJSON(object.range) : undefined,
            pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_name !== "") {
            obj.message_name = message.message_name;
        }
        if (message.index !== "") {
            obj.index = message.index;
        }
        if (message.prefix !== undefined) {
            obj.prefix = exports.ListRequest_Prefix.toJSON(message.prefix);
        }
        if (message.range !== undefined) {
            obj.range = exports.ListRequest_Range.toJSON(message.range);
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.ListRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListRequest();
        message.message_name = (_a = object.message_name) !== null && _a !== void 0 ? _a : "";
        message.index = (_b = object.index) !== null && _b !== void 0 ? _b : "";
        message.prefix = (object.prefix !== undefined && object.prefix !== null)
            ? exports.ListRequest_Prefix.fromPartial(object.prefix)
            : undefined;
        message.range = (object.range !== undefined && object.range !== null)
            ? exports.ListRequest_Range.fromPartial(object.range)
            : undefined;
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseListRequest_Prefix() {
    return { values: [] };
}
exports.ListRequest_Prefix = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.values) {
            exports.IndexValue.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListRequest_Prefix();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.values.push(exports.IndexValue.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            values: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.values) ? object.values.map((e) => exports.IndexValue.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.values) === null || _a === void 0 ? void 0 : _a.length) {
            obj.values = message.values.map((e) => exports.IndexValue.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListRequest_Prefix.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListRequest_Prefix();
        message.values = ((_a = object.values) === null || _a === void 0 ? void 0 : _a.map((e) => exports.IndexValue.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListRequest_Range() {
    return { start: [], end: [] };
}
exports.ListRequest_Range = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.start) {
            exports.IndexValue.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.end) {
            exports.IndexValue.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListRequest_Range();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.start.push(exports.IndexValue.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.end.push(exports.IndexValue.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            start: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.start) ? object.start.map((e) => exports.IndexValue.fromJSON(e)) : [],
            end: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.end) ? object.end.map((e) => exports.IndexValue.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.start) === null || _a === void 0 ? void 0 : _a.length) {
            obj.start = message.start.map((e) => exports.IndexValue.toJSON(e));
        }
        if ((_b = message.end) === null || _b === void 0 ? void 0 : _b.length) {
            obj.end = message.end.map((e) => exports.IndexValue.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListRequest_Range.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListRequest_Range();
        message.start = ((_a = object.start) === null || _a === void 0 ? void 0 : _a.map((e) => exports.IndexValue.fromPartial(e))) || [];
        message.end = ((_b = object.end) === null || _b === void 0 ? void 0 : _b.map((e) => exports.IndexValue.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListResponse() {
    return { results: [], pagination: undefined };
}
exports.ListResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.results) {
            any_1.Any.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(any_1.Any.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.results) ? object.results.map((e) => any_1.Any.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.results) === null || _a === void 0 ? void 0 : _a.length) {
            obj.results = message.results.map((e) => any_1.Any.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.ListResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListResponse();
        message.results = ((_a = object.results) === null || _a === void 0 ? void 0 : _a.map((e) => any_1.Any.fromPartial(e))) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseIndexValue() {
    return {
        uint: undefined,
        int: undefined,
        str: undefined,
        bytes: undefined,
        enum: undefined,
        bool: undefined,
        timestamp: undefined,
        duration: undefined,
    };
}
exports.IndexValue = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.uint !== undefined) {
            writer.uint32(8).uint64(message.uint);
        }
        if (message.int !== undefined) {
            writer.uint32(16).int64(message.int);
        }
        if (message.str !== undefined) {
            writer.uint32(26).string(message.str);
        }
        if (message.bytes !== undefined) {
            writer.uint32(34).bytes(message.bytes);
        }
        if (message.enum !== undefined) {
            writer.uint32(42).string(message.enum);
        }
        if (message.bool !== undefined) {
            writer.uint32(48).bool(message.bool);
        }
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(message.timestamp, writer.uint32(58).fork()).ldelim();
        }
        if (message.duration !== undefined) {
            duration_1.Duration.encode(message.duration, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIndexValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.uint = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.int = longToString(reader.int64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.str = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.bytes = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.enum = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.bool = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.timestamp = timestamp_1.Timestamp.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.duration = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            uint: isSet(object.uint) ? globalThis.String(object.uint) : undefined,
            int: isSet(object.int) ? globalThis.String(object.int) : undefined,
            str: isSet(object.str) ? globalThis.String(object.str) : undefined,
            bytes: isSet(object.bytes) ? bytesFromBase64(object.bytes) : undefined,
            enum: isSet(object.enum) ? globalThis.String(object.enum) : undefined,
            bool: isSet(object.bool) ? globalThis.Boolean(object.bool) : undefined,
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            duration: isSet(object.duration) ? duration_1.Duration.fromJSON(object.duration) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.uint !== undefined) {
            obj.uint = message.uint;
        }
        if (message.int !== undefined) {
            obj.int = message.int;
        }
        if (message.str !== undefined) {
            obj.str = message.str;
        }
        if (message.bytes !== undefined) {
            obj.bytes = base64FromBytes(message.bytes);
        }
        if (message.enum !== undefined) {
            obj.enum = message.enum;
        }
        if (message.bool !== undefined) {
            obj.bool = message.bool;
        }
        if (message.timestamp !== undefined) {
            obj.timestamp = fromTimestamp(message.timestamp).toISOString();
        }
        if (message.duration !== undefined) {
            obj.duration = duration_1.Duration.toJSON(message.duration);
        }
        return obj;
    },
    create(base) {
        return exports.IndexValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseIndexValue();
        message.uint = (_a = object.uint) !== null && _a !== void 0 ? _a : undefined;
        message.int = (_b = object.int) !== null && _b !== void 0 ? _b : undefined;
        message.str = (_c = object.str) !== null && _c !== void 0 ? _c : undefined;
        message.bytes = (_d = object.bytes) !== null && _d !== void 0 ? _d : undefined;
        message.enum = (_e = object.enum) !== null && _e !== void 0 ? _e : undefined;
        message.bool = (_f = object.bool) !== null && _f !== void 0 ? _f : undefined;
        message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
            ? timestamp_1.Timestamp.fromPartial(object.timestamp)
            : undefined;
        message.duration = (object.duration !== undefined && object.duration !== null)
            ? duration_1.Duration.fromPartial(object.duration)
            : undefined;
        return message;
    },
};
exports.QueryServiceName = "cosmos.orm.query.v1alpha1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.Get = this.Get.bind(this);
        this.List = this.List.bind(this);
    }
    Get(request) {
        const data = exports.GetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Get", data);
        return promise.then((data) => exports.GetResponse.decode(_m0.Reader.create(data)));
    }
    List(request) {
        const data = exports.ListRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "List", data);
        return promise.then((data) => exports.ListResponse.decode(_m0.Reader.create(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return toTimestamp(o);
    }
    else if (typeof o === "string") {
        return toTimestamp(new globalThis.Date(o));
    }
    else {
        return timestamp_1.Timestamp.fromJSON(o);
    }
}
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map