import * as _m0 from "protobufjs/minimal";
import { Params, ValidatorSigningInfo } from "./slashing";
export declare const protobufPackage = "cosmos.slashing.v1beta1";
/** GenesisState defines the slashing module's genesis state. */
export interface GenesisState {
    /** params defines all the parameters of the module. */
    params?: Params | undefined;
    /**
     * signing_infos represents a map between validator addresses and their
     * signing infos.
     */
    signing_infos: SigningInfo[];
    /**
     * missed_blocks represents a map between validator addresses and their
     * missed blocks.
     */
    missed_blocks: ValidatorMissedBlocks[];
}
/** SigningInfo stores validator signing info of corresponding address. */
export interface SigningInfo {
    /** address is the validator address. */
    address: string;
    /** validator_signing_info represents the signing info of this validator. */
    validator_signing_info?: ValidatorSigningInfo | undefined;
}
/**
 * ValidatorMissedBlocks contains array of missed blocks of corresponding
 * address.
 */
export interface ValidatorMissedBlocks {
    /** address is the validator address. */
    address: string;
    /** missed_blocks is an array of missed blocks by the validator. */
    missed_blocks: MissedBlock[];
}
/** MissedBlock contains height and missed status as boolean. */
export interface MissedBlock {
    /** index is the height at which the block was missed. */
    index: string;
    /** missed is the missed status. */
    missed: boolean;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create(base?: {
        params?: {
            signed_blocks_window?: string | undefined;
            min_signed_per_window?: Uint8Array | undefined;
            downtime_jail_duration?: {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } | undefined;
            slash_fraction_double_sign?: Uint8Array | undefined;
            slash_fraction_downtime?: Uint8Array | undefined;
        } | undefined;
        signing_infos?: {
            address?: string | undefined;
            validator_signing_info?: {
                address?: string | undefined;
                start_height?: string | undefined;
                index_offset?: string | undefined;
                jailed_until?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                tombstoned?: boolean | undefined;
                missed_blocks_counter?: string | undefined;
            } | undefined;
        }[] | undefined;
        missed_blocks?: {
            address?: string | undefined;
            missed_blocks?: {
                index?: string | undefined;
                missed?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
    } | undefined): GenesisState;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
export declare const SigningInfo: {
    encode(message: SigningInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SigningInfo;
    fromJSON(object: any): SigningInfo;
    toJSON(message: SigningInfo): unknown;
    create(base?: {
        address?: string | undefined;
        validator_signing_info?: {
            address?: string | undefined;
            start_height?: string | undefined;
            index_offset?: string | undefined;
            jailed_until?: {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } | undefined;
            tombstoned?: boolean | undefined;
            missed_blocks_counter?: string | undefined;
        } | undefined;
    } | undefined): SigningInfo;
    fromPartial(object: DeepPartial<SigningInfo>): SigningInfo;
};
export declare const ValidatorMissedBlocks: {
    encode(message: ValidatorMissedBlocks, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ValidatorMissedBlocks;
    fromJSON(object: any): ValidatorMissedBlocks;
    toJSON(message: ValidatorMissedBlocks): unknown;
    create(base?: {
        address?: string | undefined;
        missed_blocks?: {
            index?: string | undefined;
            missed?: boolean | undefined;
        }[] | undefined;
    } | undefined): ValidatorMissedBlocks;
    fromPartial(object: DeepPartial<ValidatorMissedBlocks>): ValidatorMissedBlocks;
};
export declare const MissedBlock: {
    encode(message: MissedBlock, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MissedBlock;
    fromJSON(object: any): MissedBlock;
    toJSON(message: MissedBlock): unknown;
    create(base?: {
        index?: string | undefined;
        missed?: boolean | undefined;
    } | undefined): MissedBlock;
    fromPartial(object: DeepPartial<MissedBlock>): MissedBlock;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=genesis.d.ts.map