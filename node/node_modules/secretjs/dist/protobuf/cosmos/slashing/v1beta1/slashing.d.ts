import * as _m0 from "protobufjs/minimal";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
export declare const protobufPackage = "cosmos.slashing.v1beta1";
/**
 * ValidatorSigningInfo defines a validator's signing info for monitoring their
 * liveness activity.
 */
export interface ValidatorSigningInfo {
    address: string;
    /** Height at which validator was first a candidate OR was un-jailed */
    start_height: string;
    /**
     * Index which is incremented every time a validator is bonded in a block and
     * _may_ have signed a pre-commit or not. This in conjunction with the
     * signed_blocks_window param determines the index in the missed block bitmap.
     */
    index_offset: string;
    /** Timestamp until which the validator is jailed due to liveness downtime. */
    jailed_until?: Timestamp | undefined;
    /**
     * Whether or not a validator has been tombstoned (killed out of validator
     * set). It is set once the validator commits an equivocation or for any other
     * configured misbehavior.
     */
    tombstoned: boolean;
    /**
     * A counter of missed (unsigned) blocks. It is used to avoid unnecessary
     * reads in the missed block bitmap.
     */
    missed_blocks_counter: string;
}
/** Params represents the parameters used for by the slashing module. */
export interface Params {
    signed_blocks_window: string;
    min_signed_per_window: Uint8Array;
    downtime_jail_duration?: Duration | undefined;
    slash_fraction_double_sign: Uint8Array;
    slash_fraction_downtime: Uint8Array;
}
export declare const ValidatorSigningInfo: {
    encode(message: ValidatorSigningInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ValidatorSigningInfo;
    fromJSON(object: any): ValidatorSigningInfo;
    toJSON(message: ValidatorSigningInfo): unknown;
    create(base?: {
        address?: string | undefined;
        start_height?: string | undefined;
        index_offset?: string | undefined;
        jailed_until?: {
            seconds?: string | undefined;
            nanos?: number | undefined;
        } | undefined;
        tombstoned?: boolean | undefined;
        missed_blocks_counter?: string | undefined;
    } | undefined): ValidatorSigningInfo;
    fromPartial(object: DeepPartial<ValidatorSigningInfo>): ValidatorSigningInfo;
};
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    create(base?: {
        signed_blocks_window?: string | undefined;
        min_signed_per_window?: Uint8Array | undefined;
        downtime_jail_duration?: {
            seconds?: string | undefined;
            nanos?: number | undefined;
        } | undefined;
        slash_fraction_double_sign?: Uint8Array | undefined;
        slash_fraction_downtime?: Uint8Array | undefined;
    } | undefined): Params;
    fromPartial(object: DeepPartial<Params>): Params;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=slashing.d.ts.map