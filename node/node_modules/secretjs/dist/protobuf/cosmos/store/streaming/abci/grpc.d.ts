import * as _m0 from "protobufjs/minimal";
import { RequestFinalizeBlock, ResponseCommit, ResponseFinalizeBlock } from "../../../../tendermint/abci/types";
import { StoreKVPair } from "../../v1beta1/listening";
export declare const protobufPackage = "cosmos.store.streaming.abci";
/** ListenEndBlockRequest is the request type for the ListenEndBlock RPC method */
export interface ListenFinalizeBlockRequest {
    req?: RequestFinalizeBlock | undefined;
    res?: ResponseFinalizeBlock | undefined;
}
/** ListenEndBlockResponse is the response type for the ListenEndBlock RPC method */
export interface ListenFinalizeBlockResponse {
}
/** ListenCommitRequest is the request type for the ListenCommit RPC method */
export interface ListenCommitRequest {
    /** explicitly pass in block height as ResponseCommit does not contain this info */
    block_height: string;
    res?: ResponseCommit | undefined;
    change_set: StoreKVPair[];
}
/** ListenCommitResponse is the response type for the ListenCommit RPC method */
export interface ListenCommitResponse {
}
export declare const ListenFinalizeBlockRequest: {
    encode(message: ListenFinalizeBlockRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ListenFinalizeBlockRequest;
    fromJSON(object: any): ListenFinalizeBlockRequest;
    toJSON(message: ListenFinalizeBlockRequest): unknown;
    create(base?: {
        req?: {
            txs?: Uint8Array[] | undefined;
            decided_last_commit?: {
                round?: number | undefined;
                votes?: {
                    validator?: {
                        address?: Uint8Array | undefined;
                        power?: string | undefined;
                    } | undefined;
                    block_id_flag?: import("../../../../tendermint/types/validator").BlockIDFlag | undefined;
                }[] | undefined;
            } | undefined;
            misbehavior?: {
                type?: import("../../../../tendermint/abci/types").MisbehaviorType | undefined;
                validator?: {
                    address?: Uint8Array | undefined;
                    power?: string | undefined;
                } | undefined;
                height?: string | undefined;
                time?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                total_voting_power?: string | undefined;
            }[] | undefined;
            hash?: Uint8Array | undefined;
            height?: string | undefined;
            time?: {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } | undefined;
            next_validators_hash?: Uint8Array | undefined;
            proposer_address?: Uint8Array | undefined;
            encrypted_random?: {
                random?: Uint8Array | undefined;
                proof?: Uint8Array | undefined;
            } | undefined;
            commit?: {
                height?: string | undefined;
                round?: number | undefined;
                block_id?: {
                    hash?: Uint8Array | undefined;
                    part_set_header?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                signatures?: {
                    block_id_flag?: import("../../../../tendermint/types/validator").BlockIDFlag | undefined;
                    validator_address?: Uint8Array | undefined;
                    timestamp?: {
                        seconds?: string | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    signature?: Uint8Array | undefined;
                }[] | undefined;
            } | undefined;
        } | undefined;
        res?: {
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            tx_results?: {
                code?: number | undefined;
                data?: Uint8Array | undefined;
                log?: string | undefined;
                info?: string | undefined;
                gas_wanted?: string | undefined;
                gas_used?: string | undefined;
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
                codespace?: string | undefined;
            }[] | undefined;
            validator_updates?: {
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: string | undefined;
            }[] | undefined;
            consensus_param_updates?: {
                block?: {
                    max_bytes?: string | undefined;
                    max_gas?: string | undefined;
                } | undefined;
                evidence?: {
                    max_age_num_blocks?: string | undefined;
                    max_age_duration?: {
                        seconds?: string | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    max_bytes?: string | undefined;
                } | undefined;
                validator?: {
                    pub_key_types?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: string | undefined;
                } | undefined;
                abci?: {
                    vote_extensions_enable_height?: string | undefined;
                } | undefined;
            } | undefined;
            app_hash?: Uint8Array | undefined;
        } | undefined;
    } | undefined): ListenFinalizeBlockRequest;
    fromPartial(object: DeepPartial<ListenFinalizeBlockRequest>): ListenFinalizeBlockRequest;
};
export declare const ListenFinalizeBlockResponse: {
    encode(_: ListenFinalizeBlockResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ListenFinalizeBlockResponse;
    fromJSON(_: any): ListenFinalizeBlockResponse;
    toJSON(_: ListenFinalizeBlockResponse): unknown;
    create(base?: {} | undefined): ListenFinalizeBlockResponse;
    fromPartial(_: DeepPartial<ListenFinalizeBlockResponse>): ListenFinalizeBlockResponse;
};
export declare const ListenCommitRequest: {
    encode(message: ListenCommitRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ListenCommitRequest;
    fromJSON(object: any): ListenCommitRequest;
    toJSON(message: ListenCommitRequest): unknown;
    create(base?: {
        block_height?: string | undefined;
        res?: {
            retain_height?: string | undefined;
        } | undefined;
        change_set?: {
            store_key?: string | undefined;
            delete?: boolean | undefined;
            key?: Uint8Array | undefined;
            value?: Uint8Array | undefined;
        }[] | undefined;
    } | undefined): ListenCommitRequest;
    fromPartial(object: DeepPartial<ListenCommitRequest>): ListenCommitRequest;
};
export declare const ListenCommitResponse: {
    encode(_: ListenCommitResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ListenCommitResponse;
    fromJSON(_: any): ListenCommitResponse;
    toJSON(_: ListenCommitResponse): unknown;
    create(base?: {} | undefined): ListenCommitResponse;
    fromPartial(_: DeepPartial<ListenCommitResponse>): ListenCommitResponse;
};
/** ABCIListenerService is the service for the BaseApp ABCIListener interface */
export interface ABCIListenerService {
    /** ListenFinalizeBlock is the corresponding endpoint for ABCIListener.ListenEndBlock */
    ListenFinalizeBlock(request: ListenFinalizeBlockRequest): Promise<ListenFinalizeBlockResponse>;
    /** ListenCommit is the corresponding endpoint for ABCIListener.ListenCommit */
    ListenCommit(request: ListenCommitRequest): Promise<ListenCommitResponse>;
}
export declare const ABCIListenerServiceServiceName = "cosmos.store.streaming.abci.ABCIListenerService";
export declare class ABCIListenerServiceClientImpl implements ABCIListenerService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ListenFinalizeBlock(request: ListenFinalizeBlockRequest): Promise<ListenFinalizeBlockResponse>;
    ListenCommit(request: ListenCommitRequest): Promise<ListenCommitResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=grpc.d.ts.map