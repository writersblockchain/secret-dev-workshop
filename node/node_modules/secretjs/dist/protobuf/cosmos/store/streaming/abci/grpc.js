"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: cosmos/store/streaming/abci/grpc.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ABCIListenerServiceClientImpl = exports.ABCIListenerServiceServiceName = exports.ListenCommitResponse = exports.ListenCommitRequest = exports.ListenFinalizeBlockResponse = exports.ListenFinalizeBlockRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
const types_1 = require("../../../../tendermint/abci/types");
const listening_1 = require("../../v1beta1/listening");
exports.protobufPackage = "cosmos.store.streaming.abci";
function createBaseListenFinalizeBlockRequest() {
    return { req: undefined, res: undefined };
}
exports.ListenFinalizeBlockRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.req !== undefined) {
            types_1.RequestFinalizeBlock.encode(message.req, writer.uint32(10).fork()).ldelim();
        }
        if (message.res !== undefined) {
            types_1.ResponseFinalizeBlock.encode(message.res, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.req = types_1.RequestFinalizeBlock.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.res = types_1.ResponseFinalizeBlock.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            req: isSet(object.req) ? types_1.RequestFinalizeBlock.fromJSON(object.req) : undefined,
            res: isSet(object.res) ? types_1.ResponseFinalizeBlock.fromJSON(object.res) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.req !== undefined) {
            obj.req = types_1.RequestFinalizeBlock.toJSON(message.req);
        }
        if (message.res !== undefined) {
            obj.res = types_1.ResponseFinalizeBlock.toJSON(message.res);
        }
        return obj;
    },
    create(base) {
        return exports.ListenFinalizeBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListenFinalizeBlockRequest();
        message.req = (object.req !== undefined && object.req !== null)
            ? types_1.RequestFinalizeBlock.fromPartial(object.req)
            : undefined;
        message.res = (object.res !== undefined && object.res !== null)
            ? types_1.ResponseFinalizeBlock.fromPartial(object.res)
            : undefined;
        return message;
    },
};
function createBaseListenFinalizeBlockResponse() {
    return {};
}
exports.ListenFinalizeBlockResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenFinalizeBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListenFinalizeBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListenFinalizeBlockResponse();
        return message;
    },
};
function createBaseListenCommitRequest() {
    return { block_height: "0", res: undefined, change_set: [] };
}
exports.ListenCommitRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.block_height !== "0") {
            writer.uint32(8).int64(message.block_height);
        }
        if (message.res !== undefined) {
            types_1.ResponseCommit.encode(message.res, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.change_set) {
            listening_1.StoreKVPair.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.block_height = longToString(reader.int64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.res = types_1.ResponseCommit.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.change_set.push(listening_1.StoreKVPair.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            block_height: isSet(object.block_height) ? globalThis.String(object.block_height) : "0",
            res: isSet(object.res) ? types_1.ResponseCommit.fromJSON(object.res) : undefined,
            change_set: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.change_set)
                ? object.change_set.map((e) => listening_1.StoreKVPair.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.block_height !== "0") {
            obj.block_height = message.block_height;
        }
        if (message.res !== undefined) {
            obj.res = types_1.ResponseCommit.toJSON(message.res);
        }
        if ((_a = message.change_set) === null || _a === void 0 ? void 0 : _a.length) {
            obj.change_set = message.change_set.map((e) => listening_1.StoreKVPair.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListenCommitRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListenCommitRequest();
        message.block_height = (_a = object.block_height) !== null && _a !== void 0 ? _a : "0";
        message.res = (object.res !== undefined && object.res !== null)
            ? types_1.ResponseCommit.fromPartial(object.res)
            : undefined;
        message.change_set = ((_b = object.change_set) === null || _b === void 0 ? void 0 : _b.map((e) => listening_1.StoreKVPair.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListenCommitResponse() {
    return {};
}
exports.ListenCommitResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListenCommitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListenCommitResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListenCommitResponse();
        return message;
    },
};
exports.ABCIListenerServiceServiceName = "cosmos.store.streaming.abci.ABCIListenerService";
class ABCIListenerServiceClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.ABCIListenerServiceServiceName;
        this.rpc = rpc;
        this.ListenFinalizeBlock = this.ListenFinalizeBlock.bind(this);
        this.ListenCommit = this.ListenCommit.bind(this);
    }
    ListenFinalizeBlock(request) {
        const data = exports.ListenFinalizeBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListenFinalizeBlock", data);
        return promise.then((data) => exports.ListenFinalizeBlockResponse.decode(_m0.Reader.create(data)));
    }
    ListenCommit(request) {
        const data = exports.ListenCommitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListenCommit", data);
        return promise.then((data) => exports.ListenCommitResponse.decode(_m0.Reader.create(data)));
    }
}
exports.ABCIListenerServiceClientImpl = ABCIListenerServiceClientImpl;
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=grpc.js.map