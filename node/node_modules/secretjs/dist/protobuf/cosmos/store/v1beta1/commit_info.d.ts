import * as _m0 from "protobufjs/minimal";
import { Timestamp } from "../../../google/protobuf/timestamp";
export declare const protobufPackage = "cosmos.store.v1beta1";
/**
 * CommitInfo defines commit information used by the multi-store when committing
 * a version/height.
 */
export interface CommitInfo {
    version: string;
    store_infos: StoreInfo[];
    timestamp?: Timestamp | undefined;
}
/**
 * StoreInfo defines store-specific commit information. It contains a reference
 * between a store name and the commit ID.
 */
export interface StoreInfo {
    name: string;
    commit_id?: CommitID | undefined;
}
/**
 * CommitID defines the commitment information when a specific store is
 * committed.
 */
export interface CommitID {
    version: string;
    hash: Uint8Array;
}
export declare const CommitInfo: {
    encode(message: CommitInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommitInfo;
    fromJSON(object: any): CommitInfo;
    toJSON(message: CommitInfo): unknown;
    create(base?: {
        version?: string | undefined;
        store_infos?: {
            name?: string | undefined;
            commit_id?: {
                version?: string | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
        }[] | undefined;
        timestamp?: {
            seconds?: string | undefined;
            nanos?: number | undefined;
        } | undefined;
    } | undefined): CommitInfo;
    fromPartial(object: DeepPartial<CommitInfo>): CommitInfo;
};
export declare const StoreInfo: {
    encode(message: StoreInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): StoreInfo;
    fromJSON(object: any): StoreInfo;
    toJSON(message: StoreInfo): unknown;
    create(base?: {
        name?: string | undefined;
        commit_id?: {
            version?: string | undefined;
            hash?: Uint8Array | undefined;
        } | undefined;
    } | undefined): StoreInfo;
    fromPartial(object: DeepPartial<StoreInfo>): StoreInfo;
};
export declare const CommitID: {
    encode(message: CommitID, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommitID;
    fromJSON(object: any): CommitID;
    toJSON(message: CommitID): unknown;
    create(base?: {
        version?: string | undefined;
        hash?: Uint8Array | undefined;
    } | undefined): CommitID;
    fromPartial(object: DeepPartial<CommitID>): CommitID;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=commit_info.d.ts.map