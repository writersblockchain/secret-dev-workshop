"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: cosmos/store/v1beta1/listening.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockMetadata = exports.StoreKVPair = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const types_1 = require("../../../tendermint/abci/types");
exports.protobufPackage = "cosmos.store.v1beta1";
function createBaseStoreKVPair() {
    return { store_key: "", delete: false, key: new Uint8Array(0), value: new Uint8Array(0) };
}
exports.StoreKVPair = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.store_key !== "") {
            writer.uint32(10).string(message.store_key);
        }
        if (message.delete !== false) {
            writer.uint32(16).bool(message.delete);
        }
        if (message.key.length !== 0) {
            writer.uint32(26).bytes(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(34).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStoreKVPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.store_key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.delete = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            store_key: isSet(object.store_key) ? globalThis.String(object.store_key) : "",
            delete: isSet(object.delete) ? globalThis.Boolean(object.delete) : false,
            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.store_key !== "") {
            obj.store_key = message.store_key;
        }
        if (message.delete !== false) {
            obj.delete = message.delete;
        }
        if (message.key.length !== 0) {
            obj.key = base64FromBytes(message.key);
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.StoreKVPair.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseStoreKVPair();
        message.store_key = (_a = object.store_key) !== null && _a !== void 0 ? _a : "";
        message.delete = (_b = object.delete) !== null && _b !== void 0 ? _b : false;
        message.key = (_c = object.key) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.value = (_d = object.value) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        return message;
    },
};
function createBaseBlockMetadata() {
    return { response_commit: undefined, request_finalize_block: undefined, response_finalize_block: undefined };
}
exports.BlockMetadata = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.response_commit !== undefined) {
            types_1.ResponseCommit.encode(message.response_commit, writer.uint32(50).fork()).ldelim();
        }
        if (message.request_finalize_block !== undefined) {
            types_1.RequestFinalizeBlock.encode(message.request_finalize_block, writer.uint32(58).fork()).ldelim();
        }
        if (message.response_finalize_block !== undefined) {
            types_1.ResponseFinalizeBlock.encode(message.response_finalize_block, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.response_commit = types_1.ResponseCommit.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.request_finalize_block = types_1.RequestFinalizeBlock.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.response_finalize_block = types_1.ResponseFinalizeBlock.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response_commit: isSet(object.response_commit) ? types_1.ResponseCommit.fromJSON(object.response_commit) : undefined,
            request_finalize_block: isSet(object.request_finalize_block)
                ? types_1.RequestFinalizeBlock.fromJSON(object.request_finalize_block)
                : undefined,
            response_finalize_block: isSet(object.response_finalize_block)
                ? types_1.ResponseFinalizeBlock.fromJSON(object.response_finalize_block)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response_commit !== undefined) {
            obj.response_commit = types_1.ResponseCommit.toJSON(message.response_commit);
        }
        if (message.request_finalize_block !== undefined) {
            obj.request_finalize_block = types_1.RequestFinalizeBlock.toJSON(message.request_finalize_block);
        }
        if (message.response_finalize_block !== undefined) {
            obj.response_finalize_block = types_1.ResponseFinalizeBlock.toJSON(message.response_finalize_block);
        }
        return obj;
    },
    create(base) {
        return exports.BlockMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseBlockMetadata();
        message.response_commit = (object.response_commit !== undefined && object.response_commit !== null)
            ? types_1.ResponseCommit.fromPartial(object.response_commit)
            : undefined;
        message.request_finalize_block =
            (object.request_finalize_block !== undefined && object.request_finalize_block !== null)
                ? types_1.RequestFinalizeBlock.fromPartial(object.request_finalize_block)
                : undefined;
        message.response_finalize_block =
            (object.response_finalize_block !== undefined && object.response_finalize_block !== null)
                ? types_1.ResponseFinalizeBlock.fromPartial(object.response_finalize_block)
                : undefined;
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=listening.js.map