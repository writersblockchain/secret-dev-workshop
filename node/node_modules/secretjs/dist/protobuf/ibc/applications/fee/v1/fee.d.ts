import * as _m0 from "protobufjs/minimal";
import { Coin } from "../../../../cosmos/base/v1beta1/coin";
import { PacketId } from "../../../core/channel/v1/channel";
export declare const protobufPackage = "ibc.applications.fee.v1";
/** Fee defines the ICS29 receive, acknowledgement and timeout fees */
export interface Fee {
    /** the packet receive fee */
    recv_fee: Coin[];
    /** the packet acknowledgement fee */
    ack_fee: Coin[];
    /** the packet timeout fee */
    timeout_fee: Coin[];
}
/** PacketFee contains ICS29 relayer fees, refund address and optional list of permitted relayers */
export interface PacketFee {
    /** fee encapsulates the recv, ack and timeout fees associated with an IBC packet */
    fee?: Fee | undefined;
    /** the refund address for unspent fees */
    refund_address: string;
    /** optional list of relayers permitted to receive fees */
    relayers: string[];
}
/** PacketFees contains a list of type PacketFee */
export interface PacketFees {
    /** list of packet fees */
    packet_fees: PacketFee[];
}
/** IdentifiedPacketFees contains a list of type PacketFee and associated PacketId */
export interface IdentifiedPacketFees {
    /** unique packet identifier comprised of the channel ID, port ID and sequence */
    packet_id?: PacketId | undefined;
    /** list of packet fees */
    packet_fees: PacketFee[];
}
export declare const Fee: {
    encode(message: Fee, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Fee;
    fromJSON(object: any): Fee;
    toJSON(message: Fee): unknown;
    create(base?: {
        recv_fee?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        ack_fee?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        timeout_fee?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } | undefined): Fee;
    fromPartial(object: DeepPartial<Fee>): Fee;
};
export declare const PacketFee: {
    encode(message: PacketFee, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PacketFee;
    fromJSON(object: any): PacketFee;
    toJSON(message: PacketFee): unknown;
    create(base?: {
        fee?: {
            recv_fee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
            ack_fee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
            timeout_fee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } | undefined;
        refund_address?: string | undefined;
        relayers?: string[] | undefined;
    } | undefined): PacketFee;
    fromPartial(object: DeepPartial<PacketFee>): PacketFee;
};
export declare const PacketFees: {
    encode(message: PacketFees, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PacketFees;
    fromJSON(object: any): PacketFees;
    toJSON(message: PacketFees): unknown;
    create(base?: {
        packet_fees?: {
            fee?: {
                recv_fee?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                }[] | undefined;
                ack_fee?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                }[] | undefined;
                timeout_fee?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                }[] | undefined;
            } | undefined;
            refund_address?: string | undefined;
            relayers?: string[] | undefined;
        }[] | undefined;
    } | undefined): PacketFees;
    fromPartial(object: DeepPartial<PacketFees>): PacketFees;
};
export declare const IdentifiedPacketFees: {
    encode(message: IdentifiedPacketFees, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): IdentifiedPacketFees;
    fromJSON(object: any): IdentifiedPacketFees;
    toJSON(message: IdentifiedPacketFees): unknown;
    create(base?: {
        packet_id?: {
            port_id?: string | undefined;
            channel_id?: string | undefined;
            sequence?: string | undefined;
        } | undefined;
        packet_fees?: {
            fee?: {
                recv_fee?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                }[] | undefined;
                ack_fee?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                }[] | undefined;
                timeout_fee?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                }[] | undefined;
            } | undefined;
            refund_address?: string | undefined;
            relayers?: string[] | undefined;
        }[] | undefined;
    } | undefined): IdentifiedPacketFees;
    fromPartial(object: DeepPartial<IdentifiedPacketFees>): IdentifiedPacketFees;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=fee.d.ts.map