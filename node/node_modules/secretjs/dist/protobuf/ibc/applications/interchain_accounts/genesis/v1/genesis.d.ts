import * as _m0 from "protobufjs/minimal";
import { Params } from "../../controller/v1/controller";
import { Params as Params1 } from "../../host/v1/host";
export declare const protobufPackage = "ibc.applications.interchain_accounts.genesis.v1";
/** GenesisState defines the interchain accounts genesis state */
export interface GenesisState {
    controller_genesis_state?: ControllerGenesisState | undefined;
    host_genesis_state?: HostGenesisState | undefined;
}
/** ControllerGenesisState defines the interchain accounts controller genesis state */
export interface ControllerGenesisState {
    active_channels: ActiveChannel[];
    interchain_accounts: RegisteredInterchainAccount[];
    ports: string[];
    params?: Params | undefined;
}
/** HostGenesisState defines the interchain accounts host genesis state */
export interface HostGenesisState {
    active_channels: ActiveChannel[];
    interchain_accounts: RegisteredInterchainAccount[];
    port: string;
    params?: Params1 | undefined;
}
/**
 * ActiveChannel contains a connection ID, port ID and associated active channel ID, as well as a boolean flag to
 * indicate if the channel is middleware enabled
 */
export interface ActiveChannel {
    connection_id: string;
    port_id: string;
    channel_id: string;
    is_middleware_enabled: boolean;
}
/** RegisteredInterchainAccount contains a connection ID, port ID and associated interchain account address */
export interface RegisteredInterchainAccount {
    connection_id: string;
    port_id: string;
    account_address: string;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create(base?: {
        controller_genesis_state?: {
            active_channels?: {
                connection_id?: string | undefined;
                port_id?: string | undefined;
                channel_id?: string | undefined;
                is_middleware_enabled?: boolean | undefined;
            }[] | undefined;
            interchain_accounts?: {
                connection_id?: string | undefined;
                port_id?: string | undefined;
                account_address?: string | undefined;
            }[] | undefined;
            ports?: string[] | undefined;
            params?: {
                controller_enabled?: boolean | undefined;
            } | undefined;
        } | undefined;
        host_genesis_state?: {
            active_channels?: {
                connection_id?: string | undefined;
                port_id?: string | undefined;
                channel_id?: string | undefined;
                is_middleware_enabled?: boolean | undefined;
            }[] | undefined;
            interchain_accounts?: {
                connection_id?: string | undefined;
                port_id?: string | undefined;
                account_address?: string | undefined;
            }[] | undefined;
            port?: string | undefined;
            params?: {
                host_enabled?: boolean | undefined;
                allow_messages?: string[] | undefined;
            } | undefined;
        } | undefined;
    } | undefined): GenesisState;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
export declare const ControllerGenesisState: {
    encode(message: ControllerGenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ControllerGenesisState;
    fromJSON(object: any): ControllerGenesisState;
    toJSON(message: ControllerGenesisState): unknown;
    create(base?: {
        active_channels?: {
            connection_id?: string | undefined;
            port_id?: string | undefined;
            channel_id?: string | undefined;
            is_middleware_enabled?: boolean | undefined;
        }[] | undefined;
        interchain_accounts?: {
            connection_id?: string | undefined;
            port_id?: string | undefined;
            account_address?: string | undefined;
        }[] | undefined;
        ports?: string[] | undefined;
        params?: {
            controller_enabled?: boolean | undefined;
        } | undefined;
    } | undefined): ControllerGenesisState;
    fromPartial(object: DeepPartial<ControllerGenesisState>): ControllerGenesisState;
};
export declare const HostGenesisState: {
    encode(message: HostGenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): HostGenesisState;
    fromJSON(object: any): HostGenesisState;
    toJSON(message: HostGenesisState): unknown;
    create(base?: {
        active_channels?: {
            connection_id?: string | undefined;
            port_id?: string | undefined;
            channel_id?: string | undefined;
            is_middleware_enabled?: boolean | undefined;
        }[] | undefined;
        interchain_accounts?: {
            connection_id?: string | undefined;
            port_id?: string | undefined;
            account_address?: string | undefined;
        }[] | undefined;
        port?: string | undefined;
        params?: {
            host_enabled?: boolean | undefined;
            allow_messages?: string[] | undefined;
        } | undefined;
    } | undefined): HostGenesisState;
    fromPartial(object: DeepPartial<HostGenesisState>): HostGenesisState;
};
export declare const ActiveChannel: {
    encode(message: ActiveChannel, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ActiveChannel;
    fromJSON(object: any): ActiveChannel;
    toJSON(message: ActiveChannel): unknown;
    create(base?: {
        connection_id?: string | undefined;
        port_id?: string | undefined;
        channel_id?: string | undefined;
        is_middleware_enabled?: boolean | undefined;
    } | undefined): ActiveChannel;
    fromPartial(object: DeepPartial<ActiveChannel>): ActiveChannel;
};
export declare const RegisteredInterchainAccount: {
    encode(message: RegisteredInterchainAccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RegisteredInterchainAccount;
    fromJSON(object: any): RegisteredInterchainAccount;
    toJSON(message: RegisteredInterchainAccount): unknown;
    create(base?: {
        connection_id?: string | undefined;
        port_id?: string | undefined;
        account_address?: string | undefined;
    } | undefined): RegisteredInterchainAccount;
    fromPartial(object: DeepPartial<RegisteredInterchainAccount>): RegisteredInterchainAccount;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=genesis.d.ts.map