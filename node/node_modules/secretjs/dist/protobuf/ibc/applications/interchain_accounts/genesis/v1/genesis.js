"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: ibc/applications/interchain_accounts/genesis/v1/genesis.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisteredInterchainAccount = exports.ActiveChannel = exports.HostGenesisState = exports.ControllerGenesisState = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const controller_1 = require("../../controller/v1/controller");
const host_1 = require("../../host/v1/host");
exports.protobufPackage = "ibc.applications.interchain_accounts.genesis.v1";
function createBaseGenesisState() {
    return { controller_genesis_state: undefined, host_genesis_state: undefined };
}
exports.GenesisState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.controller_genesis_state !== undefined) {
            exports.ControllerGenesisState.encode(message.controller_genesis_state, writer.uint32(10).fork()).ldelim();
        }
        if (message.host_genesis_state !== undefined) {
            exports.HostGenesisState.encode(message.host_genesis_state, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.controller_genesis_state = exports.ControllerGenesisState.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.host_genesis_state = exports.HostGenesisState.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            controller_genesis_state: isSet(object.controller_genesis_state)
                ? exports.ControllerGenesisState.fromJSON(object.controller_genesis_state)
                : undefined,
            host_genesis_state: isSet(object.host_genesis_state)
                ? exports.HostGenesisState.fromJSON(object.host_genesis_state)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.controller_genesis_state !== undefined) {
            obj.controller_genesis_state = exports.ControllerGenesisState.toJSON(message.controller_genesis_state);
        }
        if (message.host_genesis_state !== undefined) {
            obj.host_genesis_state = exports.HostGenesisState.toJSON(message.host_genesis_state);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.controller_genesis_state =
            (object.controller_genesis_state !== undefined && object.controller_genesis_state !== null)
                ? exports.ControllerGenesisState.fromPartial(object.controller_genesis_state)
                : undefined;
        message.host_genesis_state = (object.host_genesis_state !== undefined && object.host_genesis_state !== null)
            ? exports.HostGenesisState.fromPartial(object.host_genesis_state)
            : undefined;
        return message;
    },
};
function createBaseControllerGenesisState() {
    return { active_channels: [], interchain_accounts: [], ports: [], params: undefined };
}
exports.ControllerGenesisState = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.active_channels) {
            exports.ActiveChannel.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.interchain_accounts) {
            exports.RegisteredInterchainAccount.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.ports) {
            writer.uint32(26).string(v);
        }
        if (message.params !== undefined) {
            controller_1.Params.encode(message.params, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseControllerGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.active_channels.push(exports.ActiveChannel.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.interchain_accounts.push(exports.RegisteredInterchainAccount.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.ports.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.params = controller_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            active_channels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.active_channels)
                ? object.active_channels.map((e) => exports.ActiveChannel.fromJSON(e))
                : [],
            interchain_accounts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.interchain_accounts)
                ? object.interchain_accounts.map((e) => exports.RegisteredInterchainAccount.fromJSON(e))
                : [],
            ports: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ports) ? object.ports.map((e) => globalThis.String(e)) : [],
            params: isSet(object.params) ? controller_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if ((_a = message.active_channels) === null || _a === void 0 ? void 0 : _a.length) {
            obj.active_channels = message.active_channels.map((e) => exports.ActiveChannel.toJSON(e));
        }
        if ((_b = message.interchain_accounts) === null || _b === void 0 ? void 0 : _b.length) {
            obj.interchain_accounts = message.interchain_accounts.map((e) => exports.RegisteredInterchainAccount.toJSON(e));
        }
        if ((_c = message.ports) === null || _c === void 0 ? void 0 : _c.length) {
            obj.ports = message.ports;
        }
        if (message.params !== undefined) {
            obj.params = controller_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.ControllerGenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseControllerGenesisState();
        message.active_channels = ((_a = object.active_channels) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ActiveChannel.fromPartial(e))) || [];
        message.interchain_accounts = ((_b = object.interchain_accounts) === null || _b === void 0 ? void 0 : _b.map((e) => exports.RegisteredInterchainAccount.fromPartial(e))) ||
            [];
        message.ports = ((_c = object.ports) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.params = (object.params !== undefined && object.params !== null)
            ? controller_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseHostGenesisState() {
    return { active_channels: [], interchain_accounts: [], port: "", params: undefined };
}
exports.HostGenesisState = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.active_channels) {
            exports.ActiveChannel.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.interchain_accounts) {
            exports.RegisteredInterchainAccount.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.port !== "") {
            writer.uint32(26).string(message.port);
        }
        if (message.params !== undefined) {
            host_1.Params.encode(message.params, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHostGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.active_channels.push(exports.ActiveChannel.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.interchain_accounts.push(exports.RegisteredInterchainAccount.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.port = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.params = host_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            active_channels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.active_channels)
                ? object.active_channels.map((e) => exports.ActiveChannel.fromJSON(e))
                : [],
            interchain_accounts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.interchain_accounts)
                ? object.interchain_accounts.map((e) => exports.RegisteredInterchainAccount.fromJSON(e))
                : [],
            port: isSet(object.port) ? globalThis.String(object.port) : "",
            params: isSet(object.params) ? host_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.active_channels) === null || _a === void 0 ? void 0 : _a.length) {
            obj.active_channels = message.active_channels.map((e) => exports.ActiveChannel.toJSON(e));
        }
        if ((_b = message.interchain_accounts) === null || _b === void 0 ? void 0 : _b.length) {
            obj.interchain_accounts = message.interchain_accounts.map((e) => exports.RegisteredInterchainAccount.toJSON(e));
        }
        if (message.port !== "") {
            obj.port = message.port;
        }
        if (message.params !== undefined) {
            obj.params = host_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.HostGenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseHostGenesisState();
        message.active_channels = ((_a = object.active_channels) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ActiveChannel.fromPartial(e))) || [];
        message.interchain_accounts = ((_b = object.interchain_accounts) === null || _b === void 0 ? void 0 : _b.map((e) => exports.RegisteredInterchainAccount.fromPartial(e))) ||
            [];
        message.port = (_c = object.port) !== null && _c !== void 0 ? _c : "";
        message.params = (object.params !== undefined && object.params !== null)
            ? host_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseActiveChannel() {
    return { connection_id: "", port_id: "", channel_id: "", is_middleware_enabled: false };
}
exports.ActiveChannel = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.connection_id !== "") {
            writer.uint32(10).string(message.connection_id);
        }
        if (message.port_id !== "") {
            writer.uint32(18).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.is_middleware_enabled !== false) {
            writer.uint32(32).bool(message.is_middleware_enabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActiveChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.connection_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.is_middleware_enabled = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            connection_id: isSet(object.connection_id) ? globalThis.String(object.connection_id) : "",
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            is_middleware_enabled: isSet(object.is_middleware_enabled)
                ? globalThis.Boolean(object.is_middleware_enabled)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.connection_id !== "") {
            obj.connection_id = message.connection_id;
        }
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.is_middleware_enabled !== false) {
            obj.is_middleware_enabled = message.is_middleware_enabled;
        }
        return obj;
    },
    create(base) {
        return exports.ActiveChannel.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseActiveChannel();
        message.connection_id = (_a = object.connection_id) !== null && _a !== void 0 ? _a : "";
        message.port_id = (_b = object.port_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.is_middleware_enabled = (_d = object.is_middleware_enabled) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseRegisteredInterchainAccount() {
    return { connection_id: "", port_id: "", account_address: "" };
}
exports.RegisteredInterchainAccount = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.connection_id !== "") {
            writer.uint32(10).string(message.connection_id);
        }
        if (message.port_id !== "") {
            writer.uint32(18).string(message.port_id);
        }
        if (message.account_address !== "") {
            writer.uint32(26).string(message.account_address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisteredInterchainAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.connection_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.account_address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            connection_id: isSet(object.connection_id) ? globalThis.String(object.connection_id) : "",
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            account_address: isSet(object.account_address) ? globalThis.String(object.account_address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.connection_id !== "") {
            obj.connection_id = message.connection_id;
        }
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.account_address !== "") {
            obj.account_address = message.account_address;
        }
        return obj;
    },
    create(base) {
        return exports.RegisteredInterchainAccount.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRegisteredInterchainAccount();
        message.connection_id = (_a = object.connection_id) !== null && _a !== void 0 ? _a : "";
        message.port_id = (_b = object.port_id) !== null && _b !== void 0 ? _b : "";
        message.account_address = (_c = object.account_address) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map