"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: ibc/applications/transfer/v1/authz.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferAuthorization = exports.Allocation = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const coin_1 = require("../../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "ibc.applications.transfer.v1";
function createBaseAllocation() {
    return { source_port: "", source_channel: "", spend_limit: [], allow_list: [], allowed_packet_data: [] };
}
exports.Allocation = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.source_port !== "") {
            writer.uint32(10).string(message.source_port);
        }
        if (message.source_channel !== "") {
            writer.uint32(18).string(message.source_channel);
        }
        for (const v of message.spend_limit) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.allow_list) {
            writer.uint32(34).string(v);
        }
        for (const v of message.allowed_packet_data) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAllocation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.source_port = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.source_channel = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.spend_limit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.allow_list.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.allowed_packet_data.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            source_port: isSet(object.source_port) ? globalThis.String(object.source_port) : "",
            source_channel: isSet(object.source_channel) ? globalThis.String(object.source_channel) : "",
            spend_limit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.spend_limit)
                ? object.spend_limit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            allow_list: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allow_list)
                ? object.allow_list.map((e) => globalThis.String(e))
                : [],
            allowed_packet_data: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allowed_packet_data)
                ? object.allowed_packet_data.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.source_port !== "") {
            obj.source_port = message.source_port;
        }
        if (message.source_channel !== "") {
            obj.source_channel = message.source_channel;
        }
        if ((_a = message.spend_limit) === null || _a === void 0 ? void 0 : _a.length) {
            obj.spend_limit = message.spend_limit.map((e) => coin_1.Coin.toJSON(e));
        }
        if ((_b = message.allow_list) === null || _b === void 0 ? void 0 : _b.length) {
            obj.allow_list = message.allow_list;
        }
        if ((_c = message.allowed_packet_data) === null || _c === void 0 ? void 0 : _c.length) {
            obj.allowed_packet_data = message.allowed_packet_data;
        }
        return obj;
    },
    create(base) {
        return exports.Allocation.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseAllocation();
        message.source_port = (_a = object.source_port) !== null && _a !== void 0 ? _a : "";
        message.source_channel = (_b = object.source_channel) !== null && _b !== void 0 ? _b : "";
        message.spend_limit = ((_c = object.spend_limit) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.allow_list = ((_d = object.allow_list) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.allowed_packet_data = ((_e = object.allowed_packet_data) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseTransferAuthorization() {
    return { allocations: [] };
}
exports.TransferAuthorization = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.allocations) {
            exports.Allocation.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransferAuthorization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.allocations.push(exports.Allocation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allocations: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allocations)
                ? object.allocations.map((e) => exports.Allocation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.allocations) === null || _a === void 0 ? void 0 : _a.length) {
            obj.allocations = message.allocations.map((e) => exports.Allocation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.TransferAuthorization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTransferAuthorization();
        message.allocations = ((_a = object.allocations) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Allocation.fromPartial(e))) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=authz.js.map