import * as _m0 from "protobufjs/minimal";
import { Coin } from "../../../../cosmos/base/v1beta1/coin";
import { DenomTrace, Params } from "./transfer";
export declare const protobufPackage = "ibc.applications.transfer.v1";
/** GenesisState defines the ibc-transfer genesis state */
export interface GenesisState {
    port_id: string;
    denom_traces: DenomTrace[];
    params?: Params | undefined;
    /**
     * total_escrowed contains the total amount of tokens escrowed
     * by the transfer module
     */
    total_escrowed: Coin[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create(base?: {
        port_id?: string | undefined;
        denom_traces?: {
            path?: string | undefined;
            base_denom?: string | undefined;
        }[] | undefined;
        params?: {
            send_enabled?: boolean | undefined;
            receive_enabled?: boolean | undefined;
        } | undefined;
        total_escrowed?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } | undefined): GenesisState;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=genesis.d.ts.map