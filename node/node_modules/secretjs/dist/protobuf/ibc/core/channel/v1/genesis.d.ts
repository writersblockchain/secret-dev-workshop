import * as _m0 from "protobufjs/minimal";
import { IdentifiedChannel, PacketState, Params } from "./channel";
export declare const protobufPackage = "ibc.core.channel.v1";
/** GenesisState defines the ibc channel submodule's genesis state. */
export interface GenesisState {
    channels: IdentifiedChannel[];
    acknowledgements: PacketState[];
    commitments: PacketState[];
    receipts: PacketState[];
    send_sequences: PacketSequence[];
    recv_sequences: PacketSequence[];
    ack_sequences: PacketSequence[];
    /** the sequence for the next generated channel identifier */
    next_channel_sequence: string;
    params?: Params | undefined;
}
/**
 * PacketSequence defines the genesis type necessary to retrieve and store
 * next send and receive sequences.
 */
export interface PacketSequence {
    port_id: string;
    channel_id: string;
    sequence: string;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create(base?: {
        channels?: {
            state?: import("./channel").State | undefined;
            ordering?: import("./channel").Order | undefined;
            counterparty?: {
                port_id?: string | undefined;
                channel_id?: string | undefined;
            } | undefined;
            connection_hops?: string[] | undefined;
            version?: string | undefined;
            port_id?: string | undefined;
            channel_id?: string | undefined;
            upgrade_sequence?: string | undefined;
        }[] | undefined;
        acknowledgements?: {
            port_id?: string | undefined;
            channel_id?: string | undefined;
            sequence?: string | undefined;
            data?: Uint8Array | undefined;
        }[] | undefined;
        commitments?: {
            port_id?: string | undefined;
            channel_id?: string | undefined;
            sequence?: string | undefined;
            data?: Uint8Array | undefined;
        }[] | undefined;
        receipts?: {
            port_id?: string | undefined;
            channel_id?: string | undefined;
            sequence?: string | undefined;
            data?: Uint8Array | undefined;
        }[] | undefined;
        send_sequences?: {
            port_id?: string | undefined;
            channel_id?: string | undefined;
            sequence?: string | undefined;
        }[] | undefined;
        recv_sequences?: {
            port_id?: string | undefined;
            channel_id?: string | undefined;
            sequence?: string | undefined;
        }[] | undefined;
        ack_sequences?: {
            port_id?: string | undefined;
            channel_id?: string | undefined;
            sequence?: string | undefined;
        }[] | undefined;
        next_channel_sequence?: string | undefined;
        params?: {
            upgrade_timeout?: {
                height?: {
                    revision_number?: string | undefined;
                    revision_height?: string | undefined;
                } | undefined;
                timestamp?: string | undefined;
            } | undefined;
        } | undefined;
    } | undefined): GenesisState;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
export declare const PacketSequence: {
    encode(message: PacketSequence, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PacketSequence;
    fromJSON(object: any): PacketSequence;
    toJSON(message: PacketSequence): unknown;
    create(base?: {
        port_id?: string | undefined;
        channel_id?: string | undefined;
        sequence?: string | undefined;
    } | undefined): PacketSequence;
    fromPartial(object: DeepPartial<PacketSequence>): PacketSequence;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=genesis.d.ts.map