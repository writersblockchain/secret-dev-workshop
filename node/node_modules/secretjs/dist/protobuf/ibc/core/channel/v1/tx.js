"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: ibc/core/channel/v1/tx.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.MsgPruneAcknowledgementsResponse = exports.MsgPruneAcknowledgements = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgChannelUpgradeCancelResponse = exports.MsgChannelUpgradeCancel = exports.MsgChannelUpgradeTimeoutResponse = exports.MsgChannelUpgradeTimeout = exports.MsgChannelUpgradeOpenResponse = exports.MsgChannelUpgradeOpen = exports.MsgChannelUpgradeConfirmResponse = exports.MsgChannelUpgradeConfirm = exports.MsgChannelUpgradeAckResponse = exports.MsgChannelUpgradeAck = exports.MsgChannelUpgradeTryResponse = exports.MsgChannelUpgradeTry = exports.MsgChannelUpgradeInitResponse = exports.MsgChannelUpgradeInit = exports.MsgAcknowledgementResponse = exports.MsgAcknowledgement = exports.MsgTimeoutOnCloseResponse = exports.MsgTimeoutOnClose = exports.MsgTimeoutResponse = exports.MsgTimeout = exports.MsgRecvPacketResponse = exports.MsgRecvPacket = exports.MsgChannelCloseConfirmResponse = exports.MsgChannelCloseConfirm = exports.MsgChannelCloseInitResponse = exports.MsgChannelCloseInit = exports.MsgChannelOpenConfirmResponse = exports.MsgChannelOpenConfirm = exports.MsgChannelOpenAckResponse = exports.MsgChannelOpenAck = exports.MsgChannelOpenTryResponse = exports.MsgChannelOpenTry = exports.MsgChannelOpenInitResponse = exports.MsgChannelOpenInit = exports.responseResultTypeToJSON = exports.responseResultTypeFromJSON = exports.ResponseResultType = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
const client_1 = require("../../client/v1/client");
const channel_1 = require("./channel");
const channel_upgrade_1 = require("./channel_upgrade");
exports.protobufPackage = "ibc.core.channel.v1";
/** ResponseResultType defines the possible outcomes of the execution of a message */
var ResponseResultType;
(function (ResponseResultType) {
    /** RESPONSE_RESULT_TYPE_UNSPECIFIED - Default zero value enumeration */
    ResponseResultType[ResponseResultType["RESPONSE_RESULT_TYPE_UNSPECIFIED"] = 0] = "RESPONSE_RESULT_TYPE_UNSPECIFIED";
    /** RESPONSE_RESULT_TYPE_NOOP - The message did not call the IBC application callbacks (because, for example, the packet had already been relayed) */
    ResponseResultType[ResponseResultType["RESPONSE_RESULT_TYPE_NOOP"] = 1] = "RESPONSE_RESULT_TYPE_NOOP";
    /** RESPONSE_RESULT_TYPE_SUCCESS - The message was executed successfully */
    ResponseResultType[ResponseResultType["RESPONSE_RESULT_TYPE_SUCCESS"] = 2] = "RESPONSE_RESULT_TYPE_SUCCESS";
    /** RESPONSE_RESULT_TYPE_FAILURE - The message was executed unsuccessfully */
    ResponseResultType[ResponseResultType["RESPONSE_RESULT_TYPE_FAILURE"] = 3] = "RESPONSE_RESULT_TYPE_FAILURE";
    ResponseResultType[ResponseResultType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ResponseResultType = exports.ResponseResultType || (exports.ResponseResultType = {}));
function responseResultTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "RESPONSE_RESULT_TYPE_UNSPECIFIED":
            return ResponseResultType.RESPONSE_RESULT_TYPE_UNSPECIFIED;
        case 1:
        case "RESPONSE_RESULT_TYPE_NOOP":
            return ResponseResultType.RESPONSE_RESULT_TYPE_NOOP;
        case 2:
        case "RESPONSE_RESULT_TYPE_SUCCESS":
            return ResponseResultType.RESPONSE_RESULT_TYPE_SUCCESS;
        case 3:
        case "RESPONSE_RESULT_TYPE_FAILURE":
            return ResponseResultType.RESPONSE_RESULT_TYPE_FAILURE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ResponseResultType.UNRECOGNIZED;
    }
}
exports.responseResultTypeFromJSON = responseResultTypeFromJSON;
function responseResultTypeToJSON(object) {
    switch (object) {
        case ResponseResultType.RESPONSE_RESULT_TYPE_UNSPECIFIED:
            return "RESPONSE_RESULT_TYPE_UNSPECIFIED";
        case ResponseResultType.RESPONSE_RESULT_TYPE_NOOP:
            return "RESPONSE_RESULT_TYPE_NOOP";
        case ResponseResultType.RESPONSE_RESULT_TYPE_SUCCESS:
            return "RESPONSE_RESULT_TYPE_SUCCESS";
        case ResponseResultType.RESPONSE_RESULT_TYPE_FAILURE:
            return "RESPONSE_RESULT_TYPE_FAILURE";
        case ResponseResultType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.responseResultTypeToJSON = responseResultTypeToJSON;
function createBaseMsgChannelOpenInit() {
    return { port_id: "", channel: undefined, signer: "" };
}
exports.MsgChannelOpenInit = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel !== undefined) {
            channel_1.Channel.encode(message.channel, writer.uint32(18).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(26).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelOpenInit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel = channel_1.Channel.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel: isSet(object.channel) ? channel_1.Channel.fromJSON(object.channel) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel !== undefined) {
            obj.channel = channel_1.Channel.toJSON(message.channel);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelOpenInit.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgChannelOpenInit();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel = (object.channel !== undefined && object.channel !== null)
            ? channel_1.Channel.fromPartial(object.channel)
            : undefined;
        message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgChannelOpenInitResponse() {
    return { channel_id: "", version: "" };
}
exports.MsgChannelOpenInitResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.version !== "") {
            writer.uint32(18).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelOpenInitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            version: isSet(object.version) ? globalThis.String(object.version) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelOpenInitResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgChannelOpenInitResponse();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgChannelOpenTry() {
    return {
        port_id: "",
        previous_channel_id: "",
        channel: undefined,
        counterparty_version: "",
        proof_init: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
    };
}
exports.MsgChannelOpenTry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.previous_channel_id !== "") {
            writer.uint32(18).string(message.previous_channel_id);
        }
        if (message.channel !== undefined) {
            channel_1.Channel.encode(message.channel, writer.uint32(26).fork()).ldelim();
        }
        if (message.counterparty_version !== "") {
            writer.uint32(34).string(message.counterparty_version);
        }
        if (message.proof_init.length !== 0) {
            writer.uint32(42).bytes(message.proof_init);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(50).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(58).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelOpenTry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.previous_channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel = channel_1.Channel.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.counterparty_version = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.proof_init = reader.bytes();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            previous_channel_id: isSet(object.previous_channel_id) ? globalThis.String(object.previous_channel_id) : "",
            channel: isSet(object.channel) ? channel_1.Channel.fromJSON(object.channel) : undefined,
            counterparty_version: isSet(object.counterparty_version) ? globalThis.String(object.counterparty_version) : "",
            proof_init: isSet(object.proof_init) ? bytesFromBase64(object.proof_init) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.previous_channel_id !== "") {
            obj.previous_channel_id = message.previous_channel_id;
        }
        if (message.channel !== undefined) {
            obj.channel = channel_1.Channel.toJSON(message.channel);
        }
        if (message.counterparty_version !== "") {
            obj.counterparty_version = message.counterparty_version;
        }
        if (message.proof_init.length !== 0) {
            obj.proof_init = base64FromBytes(message.proof_init);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelOpenTry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMsgChannelOpenTry();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.previous_channel_id = (_b = object.previous_channel_id) !== null && _b !== void 0 ? _b : "";
        message.channel = (object.channel !== undefined && object.channel !== null)
            ? channel_1.Channel.fromPartial(object.channel)
            : undefined;
        message.counterparty_version = (_c = object.counterparty_version) !== null && _c !== void 0 ? _c : "";
        message.proof_init = (_d = object.proof_init) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_e = object.signer) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseMsgChannelOpenTryResponse() {
    return { version: "", channel_id: "" };
}
exports.MsgChannelOpenTryResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelOpenTryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.String(object.version) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelOpenTryResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgChannelOpenTryResponse();
        message.version = (_a = object.version) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgChannelOpenAck() {
    return {
        port_id: "",
        channel_id: "",
        counterparty_channel_id: "",
        counterparty_version: "",
        proof_try: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
    };
}
exports.MsgChannelOpenAck = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.counterparty_channel_id !== "") {
            writer.uint32(26).string(message.counterparty_channel_id);
        }
        if (message.counterparty_version !== "") {
            writer.uint32(34).string(message.counterparty_version);
        }
        if (message.proof_try.length !== 0) {
            writer.uint32(42).bytes(message.proof_try);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(50).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(58).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelOpenAck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.counterparty_channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.counterparty_version = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.proof_try = reader.bytes();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            counterparty_channel_id: isSet(object.counterparty_channel_id)
                ? globalThis.String(object.counterparty_channel_id)
                : "",
            counterparty_version: isSet(object.counterparty_version) ? globalThis.String(object.counterparty_version) : "",
            proof_try: isSet(object.proof_try) ? bytesFromBase64(object.proof_try) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.counterparty_channel_id !== "") {
            obj.counterparty_channel_id = message.counterparty_channel_id;
        }
        if (message.counterparty_version !== "") {
            obj.counterparty_version = message.counterparty_version;
        }
        if (message.proof_try.length !== 0) {
            obj.proof_try = base64FromBytes(message.proof_try);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelOpenAck.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseMsgChannelOpenAck();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.counterparty_channel_id = (_c = object.counterparty_channel_id) !== null && _c !== void 0 ? _c : "";
        message.counterparty_version = (_d = object.counterparty_version) !== null && _d !== void 0 ? _d : "";
        message.proof_try = (_e = object.proof_try) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_f = object.signer) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseMsgChannelOpenAckResponse() {
    return {};
}
exports.MsgChannelOpenAckResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelOpenAckResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgChannelOpenAckResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgChannelOpenAckResponse();
        return message;
    },
};
function createBaseMsgChannelOpenConfirm() {
    return { port_id: "", channel_id: "", proof_ack: new Uint8Array(0), proof_height: undefined, signer: "" };
}
exports.MsgChannelOpenConfirm = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.proof_ack.length !== 0) {
            writer.uint32(26).bytes(message.proof_ack);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(34).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(42).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelOpenConfirm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proof_ack = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            proof_ack: isSet(object.proof_ack) ? bytesFromBase64(object.proof_ack) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.proof_ack.length !== 0) {
            obj.proof_ack = base64FromBytes(message.proof_ack);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelOpenConfirm.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgChannelOpenConfirm();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.proof_ack = (_c = object.proof_ack) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMsgChannelOpenConfirmResponse() {
    return {};
}
exports.MsgChannelOpenConfirmResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelOpenConfirmResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgChannelOpenConfirmResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgChannelOpenConfirmResponse();
        return message;
    },
};
function createBaseMsgChannelCloseInit() {
    return { port_id: "", channel_id: "", signer: "" };
}
exports.MsgChannelCloseInit = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.signer !== "") {
            writer.uint32(26).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelCloseInit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelCloseInit.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgChannelCloseInit();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgChannelCloseInitResponse() {
    return {};
}
exports.MsgChannelCloseInitResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelCloseInitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgChannelCloseInitResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgChannelCloseInitResponse();
        return message;
    },
};
function createBaseMsgChannelCloseConfirm() {
    return {
        port_id: "",
        channel_id: "",
        proof_init: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
        counterparty_upgrade_sequence: "0",
    };
}
exports.MsgChannelCloseConfirm = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.proof_init.length !== 0) {
            writer.uint32(26).bytes(message.proof_init);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(34).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(42).string(message.signer);
        }
        if (message.counterparty_upgrade_sequence !== "0") {
            writer.uint32(48).uint64(message.counterparty_upgrade_sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelCloseConfirm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proof_init = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.counterparty_upgrade_sequence = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            proof_init: isSet(object.proof_init) ? bytesFromBase64(object.proof_init) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
            counterparty_upgrade_sequence: isSet(object.counterparty_upgrade_sequence)
                ? globalThis.String(object.counterparty_upgrade_sequence)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.proof_init.length !== 0) {
            obj.proof_init = base64FromBytes(message.proof_init);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        if (message.counterparty_upgrade_sequence !== "0") {
            obj.counterparty_upgrade_sequence = message.counterparty_upgrade_sequence;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelCloseConfirm.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMsgChannelCloseConfirm();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.proof_init = (_c = object.proof_init) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : "";
        message.counterparty_upgrade_sequence = (_e = object.counterparty_upgrade_sequence) !== null && _e !== void 0 ? _e : "0";
        return message;
    },
};
function createBaseMsgChannelCloseConfirmResponse() {
    return {};
}
exports.MsgChannelCloseConfirmResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelCloseConfirmResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgChannelCloseConfirmResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgChannelCloseConfirmResponse();
        return message;
    },
};
function createBaseMsgRecvPacket() {
    return { packet: undefined, proof_commitment: new Uint8Array(0), proof_height: undefined, signer: "" };
}
exports.MsgRecvPacket = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.packet !== undefined) {
            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();
        }
        if (message.proof_commitment.length !== 0) {
            writer.uint32(18).bytes(message.proof_commitment);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(26).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(34).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRecvPacket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.packet = channel_1.Packet.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.proof_commitment = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            packet: isSet(object.packet) ? channel_1.Packet.fromJSON(object.packet) : undefined,
            proof_commitment: isSet(object.proof_commitment) ? bytesFromBase64(object.proof_commitment) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.packet !== undefined) {
            obj.packet = channel_1.Packet.toJSON(message.packet);
        }
        if (message.proof_commitment.length !== 0) {
            obj.proof_commitment = base64FromBytes(message.proof_commitment);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgRecvPacket.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgRecvPacket();
        message.packet = (object.packet !== undefined && object.packet !== null)
            ? channel_1.Packet.fromPartial(object.packet)
            : undefined;
        message.proof_commitment = (_a = object.proof_commitment) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgRecvPacketResponse() {
    return { result: 0 };
}
exports.MsgRecvPacketResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRecvPacketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? responseResultTypeFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = responseResultTypeToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.MsgRecvPacketResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgRecvPacketResponse();
        message.result = (_a = object.result) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseMsgTimeout() {
    return {
        packet: undefined,
        proof_unreceived: new Uint8Array(0),
        proof_height: undefined,
        next_sequence_recv: "0",
        signer: "",
    };
}
exports.MsgTimeout = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.packet !== undefined) {
            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();
        }
        if (message.proof_unreceived.length !== 0) {
            writer.uint32(18).bytes(message.proof_unreceived);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(26).fork()).ldelim();
        }
        if (message.next_sequence_recv !== "0") {
            writer.uint32(32).uint64(message.next_sequence_recv);
        }
        if (message.signer !== "") {
            writer.uint32(42).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgTimeout();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.packet = channel_1.Packet.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.proof_unreceived = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.next_sequence_recv = longToString(reader.uint64());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            packet: isSet(object.packet) ? channel_1.Packet.fromJSON(object.packet) : undefined,
            proof_unreceived: isSet(object.proof_unreceived) ? bytesFromBase64(object.proof_unreceived) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            next_sequence_recv: isSet(object.next_sequence_recv) ? globalThis.String(object.next_sequence_recv) : "0",
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.packet !== undefined) {
            obj.packet = channel_1.Packet.toJSON(message.packet);
        }
        if (message.proof_unreceived.length !== 0) {
            obj.proof_unreceived = base64FromBytes(message.proof_unreceived);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.next_sequence_recv !== "0") {
            obj.next_sequence_recv = message.next_sequence_recv;
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgTimeout.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgTimeout();
        message.packet = (object.packet !== undefined && object.packet !== null)
            ? channel_1.Packet.fromPartial(object.packet)
            : undefined;
        message.proof_unreceived = (_a = object.proof_unreceived) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.next_sequence_recv = (_b = object.next_sequence_recv) !== null && _b !== void 0 ? _b : "0";
        message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgTimeoutResponse() {
    return { result: 0 };
}
exports.MsgTimeoutResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgTimeoutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? responseResultTypeFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = responseResultTypeToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.MsgTimeoutResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgTimeoutResponse();
        message.result = (_a = object.result) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseMsgTimeoutOnClose() {
    return {
        packet: undefined,
        proof_unreceived: new Uint8Array(0),
        proof_close: new Uint8Array(0),
        proof_height: undefined,
        next_sequence_recv: "0",
        signer: "",
        counterparty_upgrade_sequence: "0",
    };
}
exports.MsgTimeoutOnClose = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.packet !== undefined) {
            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();
        }
        if (message.proof_unreceived.length !== 0) {
            writer.uint32(18).bytes(message.proof_unreceived);
        }
        if (message.proof_close.length !== 0) {
            writer.uint32(26).bytes(message.proof_close);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(34).fork()).ldelim();
        }
        if (message.next_sequence_recv !== "0") {
            writer.uint32(40).uint64(message.next_sequence_recv);
        }
        if (message.signer !== "") {
            writer.uint32(50).string(message.signer);
        }
        if (message.counterparty_upgrade_sequence !== "0") {
            writer.uint32(56).uint64(message.counterparty_upgrade_sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgTimeoutOnClose();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.packet = channel_1.Packet.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.proof_unreceived = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proof_close = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.next_sequence_recv = longToString(reader.uint64());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.counterparty_upgrade_sequence = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            packet: isSet(object.packet) ? channel_1.Packet.fromJSON(object.packet) : undefined,
            proof_unreceived: isSet(object.proof_unreceived) ? bytesFromBase64(object.proof_unreceived) : new Uint8Array(0),
            proof_close: isSet(object.proof_close) ? bytesFromBase64(object.proof_close) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            next_sequence_recv: isSet(object.next_sequence_recv) ? globalThis.String(object.next_sequence_recv) : "0",
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
            counterparty_upgrade_sequence: isSet(object.counterparty_upgrade_sequence)
                ? globalThis.String(object.counterparty_upgrade_sequence)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.packet !== undefined) {
            obj.packet = channel_1.Packet.toJSON(message.packet);
        }
        if (message.proof_unreceived.length !== 0) {
            obj.proof_unreceived = base64FromBytes(message.proof_unreceived);
        }
        if (message.proof_close.length !== 0) {
            obj.proof_close = base64FromBytes(message.proof_close);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.next_sequence_recv !== "0") {
            obj.next_sequence_recv = message.next_sequence_recv;
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        if (message.counterparty_upgrade_sequence !== "0") {
            obj.counterparty_upgrade_sequence = message.counterparty_upgrade_sequence;
        }
        return obj;
    },
    create(base) {
        return exports.MsgTimeoutOnClose.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMsgTimeoutOnClose();
        message.packet = (object.packet !== undefined && object.packet !== null)
            ? channel_1.Packet.fromPartial(object.packet)
            : undefined;
        message.proof_unreceived = (_a = object.proof_unreceived) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.proof_close = (_b = object.proof_close) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.next_sequence_recv = (_c = object.next_sequence_recv) !== null && _c !== void 0 ? _c : "0";
        message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : "";
        message.counterparty_upgrade_sequence = (_e = object.counterparty_upgrade_sequence) !== null && _e !== void 0 ? _e : "0";
        return message;
    },
};
function createBaseMsgTimeoutOnCloseResponse() {
    return { result: 0 };
}
exports.MsgTimeoutOnCloseResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgTimeoutOnCloseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? responseResultTypeFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = responseResultTypeToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.MsgTimeoutOnCloseResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgTimeoutOnCloseResponse();
        message.result = (_a = object.result) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseMsgAcknowledgement() {
    return {
        packet: undefined,
        acknowledgement: new Uint8Array(0),
        proof_acked: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
    };
}
exports.MsgAcknowledgement = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.packet !== undefined) {
            channel_1.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();
        }
        if (message.acknowledgement.length !== 0) {
            writer.uint32(18).bytes(message.acknowledgement);
        }
        if (message.proof_acked.length !== 0) {
            writer.uint32(26).bytes(message.proof_acked);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(34).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(42).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAcknowledgement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.packet = channel_1.Packet.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.acknowledgement = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proof_acked = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            packet: isSet(object.packet) ? channel_1.Packet.fromJSON(object.packet) : undefined,
            acknowledgement: isSet(object.acknowledgement) ? bytesFromBase64(object.acknowledgement) : new Uint8Array(0),
            proof_acked: isSet(object.proof_acked) ? bytesFromBase64(object.proof_acked) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.packet !== undefined) {
            obj.packet = channel_1.Packet.toJSON(message.packet);
        }
        if (message.acknowledgement.length !== 0) {
            obj.acknowledgement = base64FromBytes(message.acknowledgement);
        }
        if (message.proof_acked.length !== 0) {
            obj.proof_acked = base64FromBytes(message.proof_acked);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgAcknowledgement.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgAcknowledgement();
        message.packet = (object.packet !== undefined && object.packet !== null)
            ? channel_1.Packet.fromPartial(object.packet)
            : undefined;
        message.acknowledgement = (_a = object.acknowledgement) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.proof_acked = (_b = object.proof_acked) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgAcknowledgementResponse() {
    return { result: 0 };
}
exports.MsgAcknowledgementResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAcknowledgementResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? responseResultTypeFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = responseResultTypeToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.MsgAcknowledgementResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgAcknowledgementResponse();
        message.result = (_a = object.result) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseMsgChannelUpgradeInit() {
    return { port_id: "", channel_id: "", fields: undefined, signer: "" };
}
exports.MsgChannelUpgradeInit = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.fields !== undefined) {
            channel_upgrade_1.UpgradeFields.encode(message.fields, writer.uint32(26).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(34).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeInit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fields = channel_upgrade_1.UpgradeFields.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            fields: isSet(object.fields) ? channel_upgrade_1.UpgradeFields.fromJSON(object.fields) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.fields !== undefined) {
            obj.fields = channel_upgrade_1.UpgradeFields.toJSON(message.fields);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeInit.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgChannelUpgradeInit();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.fields = (object.fields !== undefined && object.fields !== null)
            ? channel_upgrade_1.UpgradeFields.fromPartial(object.fields)
            : undefined;
        message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgChannelUpgradeInitResponse() {
    return { upgrade: undefined, upgrade_sequence: "0" };
}
exports.MsgChannelUpgradeInitResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.upgrade !== undefined) {
            channel_upgrade_1.Upgrade.encode(message.upgrade, writer.uint32(10).fork()).ldelim();
        }
        if (message.upgrade_sequence !== "0") {
            writer.uint32(16).uint64(message.upgrade_sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeInitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.upgrade = channel_upgrade_1.Upgrade.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.upgrade_sequence = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            upgrade: isSet(object.upgrade) ? channel_upgrade_1.Upgrade.fromJSON(object.upgrade) : undefined,
            upgrade_sequence: isSet(object.upgrade_sequence) ? globalThis.String(object.upgrade_sequence) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.upgrade !== undefined) {
            obj.upgrade = channel_upgrade_1.Upgrade.toJSON(message.upgrade);
        }
        if (message.upgrade_sequence !== "0") {
            obj.upgrade_sequence = message.upgrade_sequence;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeInitResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgChannelUpgradeInitResponse();
        message.upgrade = (object.upgrade !== undefined && object.upgrade !== null)
            ? channel_upgrade_1.Upgrade.fromPartial(object.upgrade)
            : undefined;
        message.upgrade_sequence = (_a = object.upgrade_sequence) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseMsgChannelUpgradeTry() {
    return {
        port_id: "",
        channel_id: "",
        proposed_upgrade_connection_hops: [],
        counterparty_upgrade_fields: undefined,
        counterparty_upgrade_sequence: "0",
        proof_channel: new Uint8Array(0),
        proof_upgrade: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
    };
}
exports.MsgChannelUpgradeTry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        for (const v of message.proposed_upgrade_connection_hops) {
            writer.uint32(26).string(v);
        }
        if (message.counterparty_upgrade_fields !== undefined) {
            channel_upgrade_1.UpgradeFields.encode(message.counterparty_upgrade_fields, writer.uint32(34).fork()).ldelim();
        }
        if (message.counterparty_upgrade_sequence !== "0") {
            writer.uint32(40).uint64(message.counterparty_upgrade_sequence);
        }
        if (message.proof_channel.length !== 0) {
            writer.uint32(50).bytes(message.proof_channel);
        }
        if (message.proof_upgrade.length !== 0) {
            writer.uint32(58).bytes(message.proof_upgrade);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(66).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(74).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeTry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proposed_upgrade_connection_hops.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.counterparty_upgrade_fields = channel_upgrade_1.UpgradeFields.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.counterparty_upgrade_sequence = longToString(reader.uint64());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.proof_channel = reader.bytes();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.proof_upgrade = reader.bytes();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            proposed_upgrade_connection_hops: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.proposed_upgrade_connection_hops)
                ? object.proposed_upgrade_connection_hops.map((e) => globalThis.String(e))
                : [],
            counterparty_upgrade_fields: isSet(object.counterparty_upgrade_fields)
                ? channel_upgrade_1.UpgradeFields.fromJSON(object.counterparty_upgrade_fields)
                : undefined,
            counterparty_upgrade_sequence: isSet(object.counterparty_upgrade_sequence)
                ? globalThis.String(object.counterparty_upgrade_sequence)
                : "0",
            proof_channel: isSet(object.proof_channel) ? bytesFromBase64(object.proof_channel) : new Uint8Array(0),
            proof_upgrade: isSet(object.proof_upgrade) ? bytesFromBase64(object.proof_upgrade) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if ((_a = message.proposed_upgrade_connection_hops) === null || _a === void 0 ? void 0 : _a.length) {
            obj.proposed_upgrade_connection_hops = message.proposed_upgrade_connection_hops;
        }
        if (message.counterparty_upgrade_fields !== undefined) {
            obj.counterparty_upgrade_fields = channel_upgrade_1.UpgradeFields.toJSON(message.counterparty_upgrade_fields);
        }
        if (message.counterparty_upgrade_sequence !== "0") {
            obj.counterparty_upgrade_sequence = message.counterparty_upgrade_sequence;
        }
        if (message.proof_channel.length !== 0) {
            obj.proof_channel = base64FromBytes(message.proof_channel);
        }
        if (message.proof_upgrade.length !== 0) {
            obj.proof_upgrade = base64FromBytes(message.proof_upgrade);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeTry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseMsgChannelUpgradeTry();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.proposed_upgrade_connection_hops = ((_c = object.proposed_upgrade_connection_hops) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.counterparty_upgrade_fields =
            (object.counterparty_upgrade_fields !== undefined && object.counterparty_upgrade_fields !== null)
                ? channel_upgrade_1.UpgradeFields.fromPartial(object.counterparty_upgrade_fields)
                : undefined;
        message.counterparty_upgrade_sequence = (_d = object.counterparty_upgrade_sequence) !== null && _d !== void 0 ? _d : "0";
        message.proof_channel = (_e = object.proof_channel) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        message.proof_upgrade = (_f = object.proof_upgrade) !== null && _f !== void 0 ? _f : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_g = object.signer) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseMsgChannelUpgradeTryResponse() {
    return { upgrade: undefined, upgrade_sequence: "0", result: 0 };
}
exports.MsgChannelUpgradeTryResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.upgrade !== undefined) {
            channel_upgrade_1.Upgrade.encode(message.upgrade, writer.uint32(10).fork()).ldelim();
        }
        if (message.upgrade_sequence !== "0") {
            writer.uint32(16).uint64(message.upgrade_sequence);
        }
        if (message.result !== 0) {
            writer.uint32(24).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeTryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.upgrade = channel_upgrade_1.Upgrade.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.upgrade_sequence = longToString(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            upgrade: isSet(object.upgrade) ? channel_upgrade_1.Upgrade.fromJSON(object.upgrade) : undefined,
            upgrade_sequence: isSet(object.upgrade_sequence) ? globalThis.String(object.upgrade_sequence) : "0",
            result: isSet(object.result) ? responseResultTypeFromJSON(object.result) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.upgrade !== undefined) {
            obj.upgrade = channel_upgrade_1.Upgrade.toJSON(message.upgrade);
        }
        if (message.upgrade_sequence !== "0") {
            obj.upgrade_sequence = message.upgrade_sequence;
        }
        if (message.result !== 0) {
            obj.result = responseResultTypeToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeTryResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgChannelUpgradeTryResponse();
        message.upgrade = (object.upgrade !== undefined && object.upgrade !== null)
            ? channel_upgrade_1.Upgrade.fromPartial(object.upgrade)
            : undefined;
        message.upgrade_sequence = (_a = object.upgrade_sequence) !== null && _a !== void 0 ? _a : "0";
        message.result = (_b = object.result) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMsgChannelUpgradeAck() {
    return {
        port_id: "",
        channel_id: "",
        counterparty_upgrade: undefined,
        proof_channel: new Uint8Array(0),
        proof_upgrade: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
    };
}
exports.MsgChannelUpgradeAck = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.counterparty_upgrade !== undefined) {
            channel_upgrade_1.Upgrade.encode(message.counterparty_upgrade, writer.uint32(26).fork()).ldelim();
        }
        if (message.proof_channel.length !== 0) {
            writer.uint32(34).bytes(message.proof_channel);
        }
        if (message.proof_upgrade.length !== 0) {
            writer.uint32(42).bytes(message.proof_upgrade);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(50).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(58).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeAck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.counterparty_upgrade = channel_upgrade_1.Upgrade.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.proof_channel = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.proof_upgrade = reader.bytes();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            counterparty_upgrade: isSet(object.counterparty_upgrade)
                ? channel_upgrade_1.Upgrade.fromJSON(object.counterparty_upgrade)
                : undefined,
            proof_channel: isSet(object.proof_channel) ? bytesFromBase64(object.proof_channel) : new Uint8Array(0),
            proof_upgrade: isSet(object.proof_upgrade) ? bytesFromBase64(object.proof_upgrade) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.counterparty_upgrade !== undefined) {
            obj.counterparty_upgrade = channel_upgrade_1.Upgrade.toJSON(message.counterparty_upgrade);
        }
        if (message.proof_channel.length !== 0) {
            obj.proof_channel = base64FromBytes(message.proof_channel);
        }
        if (message.proof_upgrade.length !== 0) {
            obj.proof_upgrade = base64FromBytes(message.proof_upgrade);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeAck.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMsgChannelUpgradeAck();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.counterparty_upgrade = (object.counterparty_upgrade !== undefined && object.counterparty_upgrade !== null)
            ? channel_upgrade_1.Upgrade.fromPartial(object.counterparty_upgrade)
            : undefined;
        message.proof_channel = (_c = object.proof_channel) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.proof_upgrade = (_d = object.proof_upgrade) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_e = object.signer) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseMsgChannelUpgradeAckResponse() {
    return { result: 0 };
}
exports.MsgChannelUpgradeAckResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeAckResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? responseResultTypeFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = responseResultTypeToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeAckResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgChannelUpgradeAckResponse();
        message.result = (_a = object.result) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseMsgChannelUpgradeConfirm() {
    return {
        port_id: "",
        channel_id: "",
        counterparty_channel_state: 0,
        counterparty_upgrade: undefined,
        proof_channel: new Uint8Array(0),
        proof_upgrade: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
    };
}
exports.MsgChannelUpgradeConfirm = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.counterparty_channel_state !== 0) {
            writer.uint32(24).int32(message.counterparty_channel_state);
        }
        if (message.counterparty_upgrade !== undefined) {
            channel_upgrade_1.Upgrade.encode(message.counterparty_upgrade, writer.uint32(34).fork()).ldelim();
        }
        if (message.proof_channel.length !== 0) {
            writer.uint32(42).bytes(message.proof_channel);
        }
        if (message.proof_upgrade.length !== 0) {
            writer.uint32(50).bytes(message.proof_upgrade);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(58).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(66).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeConfirm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.counterparty_channel_state = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.counterparty_upgrade = channel_upgrade_1.Upgrade.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.proof_channel = reader.bytes();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.proof_upgrade = reader.bytes();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            counterparty_channel_state: isSet(object.counterparty_channel_state)
                ? (0, channel_1.stateFromJSON)(object.counterparty_channel_state)
                : 0,
            counterparty_upgrade: isSet(object.counterparty_upgrade)
                ? channel_upgrade_1.Upgrade.fromJSON(object.counterparty_upgrade)
                : undefined,
            proof_channel: isSet(object.proof_channel) ? bytesFromBase64(object.proof_channel) : new Uint8Array(0),
            proof_upgrade: isSet(object.proof_upgrade) ? bytesFromBase64(object.proof_upgrade) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.counterparty_channel_state !== 0) {
            obj.counterparty_channel_state = (0, channel_1.stateToJSON)(message.counterparty_channel_state);
        }
        if (message.counterparty_upgrade !== undefined) {
            obj.counterparty_upgrade = channel_upgrade_1.Upgrade.toJSON(message.counterparty_upgrade);
        }
        if (message.proof_channel.length !== 0) {
            obj.proof_channel = base64FromBytes(message.proof_channel);
        }
        if (message.proof_upgrade.length !== 0) {
            obj.proof_upgrade = base64FromBytes(message.proof_upgrade);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeConfirm.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseMsgChannelUpgradeConfirm();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.counterparty_channel_state = (_c = object.counterparty_channel_state) !== null && _c !== void 0 ? _c : 0;
        message.counterparty_upgrade = (object.counterparty_upgrade !== undefined && object.counterparty_upgrade !== null)
            ? channel_upgrade_1.Upgrade.fromPartial(object.counterparty_upgrade)
            : undefined;
        message.proof_channel = (_d = object.proof_channel) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.proof_upgrade = (_e = object.proof_upgrade) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_f = object.signer) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseMsgChannelUpgradeConfirmResponse() {
    return { result: 0 };
}
exports.MsgChannelUpgradeConfirmResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.result !== 0) {
            writer.uint32(8).int32(message.result);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeConfirmResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: isSet(object.result) ? responseResultTypeFromJSON(object.result) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.result !== 0) {
            obj.result = responseResultTypeToJSON(message.result);
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeConfirmResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgChannelUpgradeConfirmResponse();
        message.result = (_a = object.result) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseMsgChannelUpgradeOpen() {
    return {
        port_id: "",
        channel_id: "",
        counterparty_channel_state: 0,
        counterparty_upgrade_sequence: "0",
        proof_channel: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
    };
}
exports.MsgChannelUpgradeOpen = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.counterparty_channel_state !== 0) {
            writer.uint32(24).int32(message.counterparty_channel_state);
        }
        if (message.counterparty_upgrade_sequence !== "0") {
            writer.uint32(32).uint64(message.counterparty_upgrade_sequence);
        }
        if (message.proof_channel.length !== 0) {
            writer.uint32(42).bytes(message.proof_channel);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(50).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(58).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeOpen();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.counterparty_channel_state = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.counterparty_upgrade_sequence = longToString(reader.uint64());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.proof_channel = reader.bytes();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            counterparty_channel_state: isSet(object.counterparty_channel_state)
                ? (0, channel_1.stateFromJSON)(object.counterparty_channel_state)
                : 0,
            counterparty_upgrade_sequence: isSet(object.counterparty_upgrade_sequence)
                ? globalThis.String(object.counterparty_upgrade_sequence)
                : "0",
            proof_channel: isSet(object.proof_channel) ? bytesFromBase64(object.proof_channel) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.counterparty_channel_state !== 0) {
            obj.counterparty_channel_state = (0, channel_1.stateToJSON)(message.counterparty_channel_state);
        }
        if (message.counterparty_upgrade_sequence !== "0") {
            obj.counterparty_upgrade_sequence = message.counterparty_upgrade_sequence;
        }
        if (message.proof_channel.length !== 0) {
            obj.proof_channel = base64FromBytes(message.proof_channel);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeOpen.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseMsgChannelUpgradeOpen();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.counterparty_channel_state = (_c = object.counterparty_channel_state) !== null && _c !== void 0 ? _c : 0;
        message.counterparty_upgrade_sequence = (_d = object.counterparty_upgrade_sequence) !== null && _d !== void 0 ? _d : "0";
        message.proof_channel = (_e = object.proof_channel) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_f = object.signer) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseMsgChannelUpgradeOpenResponse() {
    return {};
}
exports.MsgChannelUpgradeOpenResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeOpenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeOpenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgChannelUpgradeOpenResponse();
        return message;
    },
};
function createBaseMsgChannelUpgradeTimeout() {
    return {
        port_id: "",
        channel_id: "",
        counterparty_channel: undefined,
        proof_channel: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
    };
}
exports.MsgChannelUpgradeTimeout = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.counterparty_channel !== undefined) {
            channel_1.Channel.encode(message.counterparty_channel, writer.uint32(26).fork()).ldelim();
        }
        if (message.proof_channel.length !== 0) {
            writer.uint32(34).bytes(message.proof_channel);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(42).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(50).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeTimeout();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.counterparty_channel = channel_1.Channel.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.proof_channel = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            counterparty_channel: isSet(object.counterparty_channel)
                ? channel_1.Channel.fromJSON(object.counterparty_channel)
                : undefined,
            proof_channel: isSet(object.proof_channel) ? bytesFromBase64(object.proof_channel) : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.counterparty_channel !== undefined) {
            obj.counterparty_channel = channel_1.Channel.toJSON(message.counterparty_channel);
        }
        if (message.proof_channel.length !== 0) {
            obj.proof_channel = base64FromBytes(message.proof_channel);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeTimeout.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgChannelUpgradeTimeout();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.counterparty_channel = (object.counterparty_channel !== undefined && object.counterparty_channel !== null)
            ? channel_1.Channel.fromPartial(object.counterparty_channel)
            : undefined;
        message.proof_channel = (_c = object.proof_channel) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMsgChannelUpgradeTimeoutResponse() {
    return {};
}
exports.MsgChannelUpgradeTimeoutResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeTimeoutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeTimeoutResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgChannelUpgradeTimeoutResponse();
        return message;
    },
};
function createBaseMsgChannelUpgradeCancel() {
    return {
        port_id: "",
        channel_id: "",
        error_receipt: undefined,
        proof_error_receipt: new Uint8Array(0),
        proof_height: undefined,
        signer: "",
    };
}
exports.MsgChannelUpgradeCancel = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.error_receipt !== undefined) {
            channel_upgrade_1.ErrorReceipt.encode(message.error_receipt, writer.uint32(26).fork()).ldelim();
        }
        if (message.proof_error_receipt.length !== 0) {
            writer.uint32(34).bytes(message.proof_error_receipt);
        }
        if (message.proof_height !== undefined) {
            client_1.Height.encode(message.proof_height, writer.uint32(42).fork()).ldelim();
        }
        if (message.signer !== "") {
            writer.uint32(50).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeCancel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error_receipt = channel_upgrade_1.ErrorReceipt.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.proof_error_receipt = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.proof_height = client_1.Height.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            error_receipt: isSet(object.error_receipt) ? channel_upgrade_1.ErrorReceipt.fromJSON(object.error_receipt) : undefined,
            proof_error_receipt: isSet(object.proof_error_receipt)
                ? bytesFromBase64(object.proof_error_receipt)
                : new Uint8Array(0),
            proof_height: isSet(object.proof_height) ? client_1.Height.fromJSON(object.proof_height) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.error_receipt !== undefined) {
            obj.error_receipt = channel_upgrade_1.ErrorReceipt.toJSON(message.error_receipt);
        }
        if (message.proof_error_receipt.length !== 0) {
            obj.proof_error_receipt = base64FromBytes(message.proof_error_receipt);
        }
        if (message.proof_height !== undefined) {
            obj.proof_height = client_1.Height.toJSON(message.proof_height);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeCancel.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgChannelUpgradeCancel();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.error_receipt = (object.error_receipt !== undefined && object.error_receipt !== null)
            ? channel_upgrade_1.ErrorReceipt.fromPartial(object.error_receipt)
            : undefined;
        message.proof_error_receipt = (_c = object.proof_error_receipt) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.proof_height = (object.proof_height !== undefined && object.proof_height !== null)
            ? client_1.Height.fromPartial(object.proof_height)
            : undefined;
        message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMsgChannelUpgradeCancelResponse() {
    return {};
}
exports.MsgChannelUpgradeCancelResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChannelUpgradeCancelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgChannelUpgradeCancelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgChannelUpgradeCancelResponse();
        return message;
    },
};
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
exports.MsgUpdateParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            channel_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.params = channel_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            params: isSet(object.params) ? channel_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.params !== undefined) {
            obj.params = channel_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateParams();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.params = (object.params !== undefined && object.params !== null)
            ? channel_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
function createBaseMsgPruneAcknowledgements() {
    return { port_id: "", channel_id: "", limit: "0", signer: "" };
}
exports.MsgPruneAcknowledgements = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port_id !== "") {
            writer.uint32(10).string(message.port_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.limit !== "0") {
            writer.uint32(24).uint64(message.limit);
        }
        if (message.signer !== "") {
            writer.uint32(34).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgPruneAcknowledgements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.limit = longToString(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port_id: isSet(object.port_id) ? globalThis.String(object.port_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            limit: isSet(object.limit) ? globalThis.String(object.limit) : "0",
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port_id !== "") {
            obj.port_id = message.port_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.limit !== "0") {
            obj.limit = message.limit;
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.MsgPruneAcknowledgements.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgPruneAcknowledgements();
        message.port_id = (_a = object.port_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.limit = (_c = object.limit) !== null && _c !== void 0 ? _c : "0";
        message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMsgPruneAcknowledgementsResponse() {
    return { total_pruned_sequences: "0", total_remaining_sequences: "0" };
}
exports.MsgPruneAcknowledgementsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.total_pruned_sequences !== "0") {
            writer.uint32(8).uint64(message.total_pruned_sequences);
        }
        if (message.total_remaining_sequences !== "0") {
            writer.uint32(16).uint64(message.total_remaining_sequences);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgPruneAcknowledgementsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.total_pruned_sequences = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.total_remaining_sequences = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            total_pruned_sequences: isSet(object.total_pruned_sequences)
                ? globalThis.String(object.total_pruned_sequences)
                : "0",
            total_remaining_sequences: isSet(object.total_remaining_sequences)
                ? globalThis.String(object.total_remaining_sequences)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.total_pruned_sequences !== "0") {
            obj.total_pruned_sequences = message.total_pruned_sequences;
        }
        if (message.total_remaining_sequences !== "0") {
            obj.total_remaining_sequences = message.total_remaining_sequences;
        }
        return obj;
    },
    create(base) {
        return exports.MsgPruneAcknowledgementsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgPruneAcknowledgementsResponse();
        message.total_pruned_sequences = (_a = object.total_pruned_sequences) !== null && _a !== void 0 ? _a : "0";
        message.total_remaining_sequences = (_b = object.total_remaining_sequences) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
exports.MsgServiceName = "ibc.core.channel.v1.Msg";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.ChannelOpenInit = this.ChannelOpenInit.bind(this);
        this.ChannelOpenTry = this.ChannelOpenTry.bind(this);
        this.ChannelOpenAck = this.ChannelOpenAck.bind(this);
        this.ChannelOpenConfirm = this.ChannelOpenConfirm.bind(this);
        this.ChannelCloseInit = this.ChannelCloseInit.bind(this);
        this.ChannelCloseConfirm = this.ChannelCloseConfirm.bind(this);
        this.RecvPacket = this.RecvPacket.bind(this);
        this.Timeout = this.Timeout.bind(this);
        this.TimeoutOnClose = this.TimeoutOnClose.bind(this);
        this.Acknowledgement = this.Acknowledgement.bind(this);
        this.ChannelUpgradeInit = this.ChannelUpgradeInit.bind(this);
        this.ChannelUpgradeTry = this.ChannelUpgradeTry.bind(this);
        this.ChannelUpgradeAck = this.ChannelUpgradeAck.bind(this);
        this.ChannelUpgradeConfirm = this.ChannelUpgradeConfirm.bind(this);
        this.ChannelUpgradeOpen = this.ChannelUpgradeOpen.bind(this);
        this.ChannelUpgradeTimeout = this.ChannelUpgradeTimeout.bind(this);
        this.ChannelUpgradeCancel = this.ChannelUpgradeCancel.bind(this);
        this.UpdateChannelParams = this.UpdateChannelParams.bind(this);
        this.PruneAcknowledgements = this.PruneAcknowledgements.bind(this);
    }
    ChannelOpenInit(request) {
        const data = exports.MsgChannelOpenInit.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelOpenInit", data);
        return promise.then((data) => exports.MsgChannelOpenInitResponse.decode(_m0.Reader.create(data)));
    }
    ChannelOpenTry(request) {
        const data = exports.MsgChannelOpenTry.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelOpenTry", data);
        return promise.then((data) => exports.MsgChannelOpenTryResponse.decode(_m0.Reader.create(data)));
    }
    ChannelOpenAck(request) {
        const data = exports.MsgChannelOpenAck.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelOpenAck", data);
        return promise.then((data) => exports.MsgChannelOpenAckResponse.decode(_m0.Reader.create(data)));
    }
    ChannelOpenConfirm(request) {
        const data = exports.MsgChannelOpenConfirm.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelOpenConfirm", data);
        return promise.then((data) => exports.MsgChannelOpenConfirmResponse.decode(_m0.Reader.create(data)));
    }
    ChannelCloseInit(request) {
        const data = exports.MsgChannelCloseInit.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelCloseInit", data);
        return promise.then((data) => exports.MsgChannelCloseInitResponse.decode(_m0.Reader.create(data)));
    }
    ChannelCloseConfirm(request) {
        const data = exports.MsgChannelCloseConfirm.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelCloseConfirm", data);
        return promise.then((data) => exports.MsgChannelCloseConfirmResponse.decode(_m0.Reader.create(data)));
    }
    RecvPacket(request) {
        const data = exports.MsgRecvPacket.encode(request).finish();
        const promise = this.rpc.request(this.service, "RecvPacket", data);
        return promise.then((data) => exports.MsgRecvPacketResponse.decode(_m0.Reader.create(data)));
    }
    Timeout(request) {
        const data = exports.MsgTimeout.encode(request).finish();
        const promise = this.rpc.request(this.service, "Timeout", data);
        return promise.then((data) => exports.MsgTimeoutResponse.decode(_m0.Reader.create(data)));
    }
    TimeoutOnClose(request) {
        const data = exports.MsgTimeoutOnClose.encode(request).finish();
        const promise = this.rpc.request(this.service, "TimeoutOnClose", data);
        return promise.then((data) => exports.MsgTimeoutOnCloseResponse.decode(_m0.Reader.create(data)));
    }
    Acknowledgement(request) {
        const data = exports.MsgAcknowledgement.encode(request).finish();
        const promise = this.rpc.request(this.service, "Acknowledgement", data);
        return promise.then((data) => exports.MsgAcknowledgementResponse.decode(_m0.Reader.create(data)));
    }
    ChannelUpgradeInit(request) {
        const data = exports.MsgChannelUpgradeInit.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelUpgradeInit", data);
        return promise.then((data) => exports.MsgChannelUpgradeInitResponse.decode(_m0.Reader.create(data)));
    }
    ChannelUpgradeTry(request) {
        const data = exports.MsgChannelUpgradeTry.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelUpgradeTry", data);
        return promise.then((data) => exports.MsgChannelUpgradeTryResponse.decode(_m0.Reader.create(data)));
    }
    ChannelUpgradeAck(request) {
        const data = exports.MsgChannelUpgradeAck.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelUpgradeAck", data);
        return promise.then((data) => exports.MsgChannelUpgradeAckResponse.decode(_m0.Reader.create(data)));
    }
    ChannelUpgradeConfirm(request) {
        const data = exports.MsgChannelUpgradeConfirm.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelUpgradeConfirm", data);
        return promise.then((data) => exports.MsgChannelUpgradeConfirmResponse.decode(_m0.Reader.create(data)));
    }
    ChannelUpgradeOpen(request) {
        const data = exports.MsgChannelUpgradeOpen.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelUpgradeOpen", data);
        return promise.then((data) => exports.MsgChannelUpgradeOpenResponse.decode(_m0.Reader.create(data)));
    }
    ChannelUpgradeTimeout(request) {
        const data = exports.MsgChannelUpgradeTimeout.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelUpgradeTimeout", data);
        return promise.then((data) => exports.MsgChannelUpgradeTimeoutResponse.decode(_m0.Reader.create(data)));
    }
    ChannelUpgradeCancel(request) {
        const data = exports.MsgChannelUpgradeCancel.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChannelUpgradeCancel", data);
        return promise.then((data) => exports.MsgChannelUpgradeCancelResponse.decode(_m0.Reader.create(data)));
    }
    UpdateChannelParams(request) {
        const data = exports.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateChannelParams", data);
        return promise.then((data) => exports.MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
    }
    PruneAcknowledgements(request) {
        const data = exports.MsgPruneAcknowledgements.encode(request).finish();
        const promise = this.rpc.request(this.service, "PruneAcknowledgements", data);
        return promise.then((data) => exports.MsgPruneAcknowledgementsResponse.decode(_m0.Reader.create(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map