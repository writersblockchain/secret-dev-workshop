import * as _m0 from "protobufjs/minimal";
import { GenesisState as GenesisState3 } from "../../channel/v1/genesis";
import { GenesisState as GenesisState1 } from "../../client/v1/genesis";
import { GenesisState as GenesisState2 } from "../../connection/v1/genesis";
export declare const protobufPackage = "ibc.core.types.v1";
/** GenesisState defines the ibc module's genesis state. */
export interface GenesisState {
    /** ICS002 - Clients genesis state */
    client_genesis?: GenesisState1 | undefined;
    /** ICS003 - Connections genesis state */
    connection_genesis?: GenesisState2 | undefined;
    /** ICS004 - Channel genesis state */
    channel_genesis?: GenesisState3 | undefined;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create(base?: {
        client_genesis?: {
            clients?: {
                client_id?: string | undefined;
                client_state?: {
                    type_url?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
            }[] | undefined;
            clients_consensus?: {
                client_id?: string | undefined;
                consensus_states?: {
                    height?: {
                        revision_number?: string | undefined;
                        revision_height?: string | undefined;
                    } | undefined;
                    consensus_state?: {
                        type_url?: string | undefined;
                        value?: Uint8Array | undefined;
                    } | undefined;
                }[] | undefined;
            }[] | undefined;
            clients_metadata?: {
                client_id?: string | undefined;
                client_metadata?: {
                    key?: Uint8Array | undefined;
                    value?: Uint8Array | undefined;
                }[] | undefined;
            }[] | undefined;
            params?: {
                allowed_clients?: string[] | undefined;
            } | undefined;
            create_localhost?: boolean | undefined;
            next_client_sequence?: string | undefined;
        } | undefined;
        connection_genesis?: {
            connections?: {
                id?: string | undefined;
                client_id?: string | undefined;
                versions?: {
                    identifier?: string | undefined;
                    features?: string[] | undefined;
                }[] | undefined;
                state?: import("../../connection/v1/connection").State | undefined;
                counterparty?: {
                    client_id?: string | undefined;
                    connection_id?: string | undefined;
                    prefix?: {
                        key_prefix?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                delay_period?: string | undefined;
            }[] | undefined;
            client_connection_paths?: {
                client_id?: string | undefined;
                paths?: string[] | undefined;
            }[] | undefined;
            next_connection_sequence?: string | undefined;
            params?: {
                max_expected_time_per_block?: string | undefined;
            } | undefined;
        } | undefined;
        channel_genesis?: {
            channels?: {
                state?: import("../../channel/v1/channel").State | undefined;
                ordering?: import("../../channel/v1/channel").Order | undefined;
                counterparty?: {
                    port_id?: string | undefined;
                    channel_id?: string | undefined;
                } | undefined;
                connection_hops?: string[] | undefined;
                version?: string | undefined;
                port_id?: string | undefined;
                channel_id?: string | undefined;
                upgrade_sequence?: string | undefined;
            }[] | undefined;
            acknowledgements?: {
                port_id?: string | undefined;
                channel_id?: string | undefined;
                sequence?: string | undefined;
                data?: Uint8Array | undefined;
            }[] | undefined;
            commitments?: {
                port_id?: string | undefined;
                channel_id?: string | undefined;
                sequence?: string | undefined;
                data?: Uint8Array | undefined;
            }[] | undefined;
            receipts?: {
                port_id?: string | undefined;
                channel_id?: string | undefined;
                sequence?: string | undefined;
                data?: Uint8Array | undefined;
            }[] | undefined;
            send_sequences?: {
                port_id?: string | undefined;
                channel_id?: string | undefined;
                sequence?: string | undefined;
            }[] | undefined;
            recv_sequences?: {
                port_id?: string | undefined;
                channel_id?: string | undefined;
                sequence?: string | undefined;
            }[] | undefined;
            ack_sequences?: {
                port_id?: string | undefined;
                channel_id?: string | undefined;
                sequence?: string | undefined;
            }[] | undefined;
            next_channel_sequence?: string | undefined;
            params?: {
                upgrade_timeout?: {
                    height?: {
                        revision_number?: string | undefined;
                        revision_height?: string | undefined;
                    } | undefined;
                    timestamp?: string | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } | undefined): GenesisState;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=genesis.d.ts.map