"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: ibc/lightclients/solomachine/v3/solomachine.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeaderData = exports.SignBytes = exports.TimestampedSignatureData = exports.SignatureAndData = exports.Misbehaviour = exports.Header = exports.ConsensusState = exports.ClientState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
const any_1 = require("../../../../google/protobuf/any");
exports.protobufPackage = "ibc.lightclients.solomachine.v3";
function createBaseClientState() {
    return { sequence: "0", is_frozen: false, consensus_state: undefined };
}
exports.ClientState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sequence !== "0") {
            writer.uint32(8).uint64(message.sequence);
        }
        if (message.is_frozen !== false) {
            writer.uint32(16).bool(message.is_frozen);
        }
        if (message.consensus_state !== undefined) {
            exports.ConsensusState.encode(message.consensus_state, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.is_frozen = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.consensus_state = exports.ConsensusState.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: isSet(object.sequence) ? globalThis.String(object.sequence) : "0",
            is_frozen: isSet(object.is_frozen) ? globalThis.Boolean(object.is_frozen) : false,
            consensus_state: isSet(object.consensus_state) ? exports.ConsensusState.fromJSON(object.consensus_state) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sequence !== "0") {
            obj.sequence = message.sequence;
        }
        if (message.is_frozen !== false) {
            obj.is_frozen = message.is_frozen;
        }
        if (message.consensus_state !== undefined) {
            obj.consensus_state = exports.ConsensusState.toJSON(message.consensus_state);
        }
        return obj;
    },
    create(base) {
        return exports.ClientState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseClientState();
        message.sequence = (_a = object.sequence) !== null && _a !== void 0 ? _a : "0";
        message.is_frozen = (_b = object.is_frozen) !== null && _b !== void 0 ? _b : false;
        message.consensus_state = (object.consensus_state !== undefined && object.consensus_state !== null)
            ? exports.ConsensusState.fromPartial(object.consensus_state)
            : undefined;
        return message;
    },
};
function createBaseConsensusState() {
    return { public_key: undefined, diversifier: "", timestamp: "0" };
}
exports.ConsensusState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.public_key !== undefined) {
            any_1.Any.encode(message.public_key, writer.uint32(10).fork()).ldelim();
        }
        if (message.diversifier !== "") {
            writer.uint32(18).string(message.diversifier);
        }
        if (message.timestamp !== "0") {
            writer.uint32(24).uint64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConsensusState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.public_key = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.diversifier = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            public_key: isSet(object.public_key) ? any_1.Any.fromJSON(object.public_key) : undefined,
            diversifier: isSet(object.diversifier) ? globalThis.String(object.diversifier) : "",
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.public_key !== undefined) {
            obj.public_key = any_1.Any.toJSON(message.public_key);
        }
        if (message.diversifier !== "") {
            obj.diversifier = message.diversifier;
        }
        if (message.timestamp !== "0") {
            obj.timestamp = message.timestamp;
        }
        return obj;
    },
    create(base) {
        return exports.ConsensusState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConsensusState();
        message.public_key = (object.public_key !== undefined && object.public_key !== null)
            ? any_1.Any.fromPartial(object.public_key)
            : undefined;
        message.diversifier = (_a = object.diversifier) !== null && _a !== void 0 ? _a : "";
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseHeader() {
    return { timestamp: "0", signature: new Uint8Array(0), new_public_key: undefined, new_diversifier: "" };
}
exports.Header = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.timestamp !== "0") {
            writer.uint32(8).uint64(message.timestamp);
        }
        if (message.signature.length !== 0) {
            writer.uint32(18).bytes(message.signature);
        }
        if (message.new_public_key !== undefined) {
            any_1.Any.encode(message.new_public_key, writer.uint32(26).fork()).ldelim();
        }
        if (message.new_diversifier !== "") {
            writer.uint32(34).string(message.new_diversifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeader();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.timestamp = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signature = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.new_public_key = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.new_diversifier = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
            new_public_key: isSet(object.new_public_key) ? any_1.Any.fromJSON(object.new_public_key) : undefined,
            new_diversifier: isSet(object.new_diversifier) ? globalThis.String(object.new_diversifier) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.timestamp !== "0") {
            obj.timestamp = message.timestamp;
        }
        if (message.signature.length !== 0) {
            obj.signature = base64FromBytes(message.signature);
        }
        if (message.new_public_key !== undefined) {
            obj.new_public_key = any_1.Any.toJSON(message.new_public_key);
        }
        if (message.new_diversifier !== "") {
            obj.new_diversifier = message.new_diversifier;
        }
        return obj;
    },
    create(base) {
        return exports.Header.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseHeader();
        message.timestamp = (_a = object.timestamp) !== null && _a !== void 0 ? _a : "0";
        message.signature = (_b = object.signature) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.new_public_key = (object.new_public_key !== undefined && object.new_public_key !== null)
            ? any_1.Any.fromPartial(object.new_public_key)
            : undefined;
        message.new_diversifier = (_c = object.new_diversifier) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMisbehaviour() {
    return { sequence: "0", signature_one: undefined, signature_two: undefined };
}
exports.Misbehaviour = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sequence !== "0") {
            writer.uint32(8).uint64(message.sequence);
        }
        if (message.signature_one !== undefined) {
            exports.SignatureAndData.encode(message.signature_one, writer.uint32(18).fork()).ldelim();
        }
        if (message.signature_two !== undefined) {
            exports.SignatureAndData.encode(message.signature_two, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMisbehaviour();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signature_one = exports.SignatureAndData.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signature_two = exports.SignatureAndData.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: isSet(object.sequence) ? globalThis.String(object.sequence) : "0",
            signature_one: isSet(object.signature_one) ? exports.SignatureAndData.fromJSON(object.signature_one) : undefined,
            signature_two: isSet(object.signature_two) ? exports.SignatureAndData.fromJSON(object.signature_two) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sequence !== "0") {
            obj.sequence = message.sequence;
        }
        if (message.signature_one !== undefined) {
            obj.signature_one = exports.SignatureAndData.toJSON(message.signature_one);
        }
        if (message.signature_two !== undefined) {
            obj.signature_two = exports.SignatureAndData.toJSON(message.signature_two);
        }
        return obj;
    },
    create(base) {
        return exports.Misbehaviour.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMisbehaviour();
        message.sequence = (_a = object.sequence) !== null && _a !== void 0 ? _a : "0";
        message.signature_one = (object.signature_one !== undefined && object.signature_one !== null)
            ? exports.SignatureAndData.fromPartial(object.signature_one)
            : undefined;
        message.signature_two = (object.signature_two !== undefined && object.signature_two !== null)
            ? exports.SignatureAndData.fromPartial(object.signature_two)
            : undefined;
        return message;
    },
};
function createBaseSignatureAndData() {
    return { signature: new Uint8Array(0), path: new Uint8Array(0), data: new Uint8Array(0), timestamp: "0" };
}
exports.SignatureAndData = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.signature.length !== 0) {
            writer.uint32(10).bytes(message.signature);
        }
        if (message.path.length !== 0) {
            writer.uint32(18).bytes(message.path);
        }
        if (message.data.length !== 0) {
            writer.uint32(26).bytes(message.data);
        }
        if (message.timestamp !== "0") {
            writer.uint32(32).uint64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignatureAndData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.signature = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.path = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.timestamp = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
            path: isSet(object.path) ? bytesFromBase64(object.path) : new Uint8Array(0),
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signature.length !== 0) {
            obj.signature = base64FromBytes(message.signature);
        }
        if (message.path.length !== 0) {
            obj.path = base64FromBytes(message.path);
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        if (message.timestamp !== "0") {
            obj.timestamp = message.timestamp;
        }
        return obj;
    },
    create(base) {
        return exports.SignatureAndData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseSignatureAndData();
        message.signature = (_a = object.signature) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.path = (_b = object.path) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.data = (_c = object.data) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.timestamp = (_d = object.timestamp) !== null && _d !== void 0 ? _d : "0";
        return message;
    },
};
function createBaseTimestampedSignatureData() {
    return { signature_data: new Uint8Array(0), timestamp: "0" };
}
exports.TimestampedSignatureData = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.signature_data.length !== 0) {
            writer.uint32(10).bytes(message.signature_data);
        }
        if (message.timestamp !== "0") {
            writer.uint32(16).uint64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimestampedSignatureData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.signature_data = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signature_data: isSet(object.signature_data) ? bytesFromBase64(object.signature_data) : new Uint8Array(0),
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signature_data.length !== 0) {
            obj.signature_data = base64FromBytes(message.signature_data);
        }
        if (message.timestamp !== "0") {
            obj.timestamp = message.timestamp;
        }
        return obj;
    },
    create(base) {
        return exports.TimestampedSignatureData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTimestampedSignatureData();
        message.signature_data = (_a = object.signature_data) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseSignBytes() {
    return { sequence: "0", timestamp: "0", diversifier: "", path: new Uint8Array(0), data: new Uint8Array(0) };
}
exports.SignBytes = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sequence !== "0") {
            writer.uint32(8).uint64(message.sequence);
        }
        if (message.timestamp !== "0") {
            writer.uint32(16).uint64(message.timestamp);
        }
        if (message.diversifier !== "") {
            writer.uint32(26).string(message.diversifier);
        }
        if (message.path.length !== 0) {
            writer.uint32(34).bytes(message.path);
        }
        if (message.data.length !== 0) {
            writer.uint32(42).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignBytes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp = longToString(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.diversifier = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.path = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: isSet(object.sequence) ? globalThis.String(object.sequence) : "0",
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
            diversifier: isSet(object.diversifier) ? globalThis.String(object.diversifier) : "",
            path: isSet(object.path) ? bytesFromBase64(object.path) : new Uint8Array(0),
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sequence !== "0") {
            obj.sequence = message.sequence;
        }
        if (message.timestamp !== "0") {
            obj.timestamp = message.timestamp;
        }
        if (message.diversifier !== "") {
            obj.diversifier = message.diversifier;
        }
        if (message.path.length !== 0) {
            obj.path = base64FromBytes(message.path);
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.SignBytes.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseSignBytes();
        message.sequence = (_a = object.sequence) !== null && _a !== void 0 ? _a : "0";
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : "0";
        message.diversifier = (_c = object.diversifier) !== null && _c !== void 0 ? _c : "";
        message.path = (_d = object.path) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.data = (_e = object.data) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        return message;
    },
};
function createBaseHeaderData() {
    return { new_pub_key: undefined, new_diversifier: "" };
}
exports.HeaderData = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.new_pub_key !== undefined) {
            any_1.Any.encode(message.new_pub_key, writer.uint32(10).fork()).ldelim();
        }
        if (message.new_diversifier !== "") {
            writer.uint32(18).string(message.new_diversifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeaderData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.new_pub_key = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.new_diversifier = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            new_pub_key: isSet(object.new_pub_key) ? any_1.Any.fromJSON(object.new_pub_key) : undefined,
            new_diversifier: isSet(object.new_diversifier) ? globalThis.String(object.new_diversifier) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.new_pub_key !== undefined) {
            obj.new_pub_key = any_1.Any.toJSON(message.new_pub_key);
        }
        if (message.new_diversifier !== "") {
            obj.new_diversifier = message.new_diversifier;
        }
        return obj;
    },
    create(base) {
        return exports.HeaderData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseHeaderData();
        message.new_pub_key = (object.new_pub_key !== undefined && object.new_pub_key !== null)
            ? any_1.Any.fromPartial(object.new_pub_key)
            : undefined;
        message.new_diversifier = (_a = object.new_diversifier) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=solomachine.js.map