import * as _m0 from "protobufjs/minimal";
import { StringEvent } from "../../../cosmos/base/abci/v1beta1/abci";
import { Empty } from "../../../google/protobuf/empty";
import { ContractCodeHistoryEntry, ContractInfo } from "./types";
export declare const protobufPackage = "secret.compute.v1beta1";
export interface QuerySecretContractRequest {
    /** address is the bech32 human readable address of the contract */
    contract_address: string;
    query: Uint8Array;
}
export interface QueryByLabelRequest {
    label: string;
}
export interface QueryByContractAddressRequest {
    /** address is the bech32 human readable address of the contract */
    contract_address: string;
}
export interface QueryByCodeIdRequest {
    code_id: string;
}
export interface QuerySecretContractResponse {
    data: Uint8Array;
}
/**
 * QueryContractInfoResponse is the response type for the Query/ContractInfo RPC
 * method
 */
export interface QueryContractInfoResponse {
    /** contract_address is the bech32 human readable address of the contract */
    contract_address: string;
    contract_info?: ContractInfo | undefined;
}
/**
 * ContractInfoWithAddress adds the contract address to the ContractInfo
 * representation
 */
export interface ContractInfoWithAddress {
    /** contract_address is the bech32 human readable address of the contract */
    contract_address: string;
    contract_info?: ContractInfo | undefined;
}
export interface QueryContractsByCodeIdResponse {
    contract_infos: ContractInfoWithAddress[];
}
export interface CodeInfoResponse {
    code_id: string;
    /** creator is the bech32 human readable address of the contract */
    creator: string;
    code_hash: string;
    source: string;
    builder: string;
}
export interface QueryCodeResponse {
    code_info?: CodeInfoResponse | undefined;
    wasm: Uint8Array;
}
export interface QueryCodesResponse {
    code_infos: CodeInfoResponse[];
}
export interface QueryContractAddressResponse {
    /** address is the bech32 human readable address of the contract */
    contract_address: string;
}
export interface QueryContractLabelResponse {
    label: string;
}
export interface QueryCodeHashResponse {
    code_hash: string;
}
/** DecryptedAnswer is a struct that represents a decrypted tx-query */
export interface DecryptedAnswer {
    type: string;
    input: string;
    output_data: string;
    output_data_as_string: string;
}
export interface DecryptedAnswers {
    answers: DecryptedAnswer[];
    output_logs: StringEvent[];
    output_error: string;
    plaintext_error: string;
}
/**
 * QueryContractHistoryRequest is the request type for the Query/ContractHistory
 * RPC method
 */
export interface QueryContractHistoryRequest {
    /** address is the address of the contract to query */
    contract_address: string;
}
/**
 * QueryContractHistoryResponse is the response type for the
 * Query/ContractHistory RPC method
 */
export interface QueryContractHistoryResponse {
    entries: ContractCodeHistoryEntry[];
}
export declare const QuerySecretContractRequest: {
    encode(message: QuerySecretContractRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QuerySecretContractRequest;
    fromJSON(object: any): QuerySecretContractRequest;
    toJSON(message: QuerySecretContractRequest): unknown;
    create(base?: {
        contract_address?: string | undefined;
        query?: Uint8Array | undefined;
    } | undefined): QuerySecretContractRequest;
    fromPartial(object: DeepPartial<QuerySecretContractRequest>): QuerySecretContractRequest;
};
export declare const QueryByLabelRequest: {
    encode(message: QueryByLabelRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryByLabelRequest;
    fromJSON(object: any): QueryByLabelRequest;
    toJSON(message: QueryByLabelRequest): unknown;
    create(base?: {
        label?: string | undefined;
    } | undefined): QueryByLabelRequest;
    fromPartial(object: DeepPartial<QueryByLabelRequest>): QueryByLabelRequest;
};
export declare const QueryByContractAddressRequest: {
    encode(message: QueryByContractAddressRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryByContractAddressRequest;
    fromJSON(object: any): QueryByContractAddressRequest;
    toJSON(message: QueryByContractAddressRequest): unknown;
    create(base?: {
        contract_address?: string | undefined;
    } | undefined): QueryByContractAddressRequest;
    fromPartial(object: DeepPartial<QueryByContractAddressRequest>): QueryByContractAddressRequest;
};
export declare const QueryByCodeIdRequest: {
    encode(message: QueryByCodeIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryByCodeIdRequest;
    fromJSON(object: any): QueryByCodeIdRequest;
    toJSON(message: QueryByCodeIdRequest): unknown;
    create(base?: {
        code_id?: string | undefined;
    } | undefined): QueryByCodeIdRequest;
    fromPartial(object: DeepPartial<QueryByCodeIdRequest>): QueryByCodeIdRequest;
};
export declare const QuerySecretContractResponse: {
    encode(message: QuerySecretContractResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QuerySecretContractResponse;
    fromJSON(object: any): QuerySecretContractResponse;
    toJSON(message: QuerySecretContractResponse): unknown;
    create(base?: {
        data?: Uint8Array | undefined;
    } | undefined): QuerySecretContractResponse;
    fromPartial(object: DeepPartial<QuerySecretContractResponse>): QuerySecretContractResponse;
};
export declare const QueryContractInfoResponse: {
    encode(message: QueryContractInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractInfoResponse;
    fromJSON(object: any): QueryContractInfoResponse;
    toJSON(message: QueryContractInfoResponse): unknown;
    create(base?: {
        contract_address?: string | undefined;
        contract_info?: {
            code_id?: string | undefined;
            creator?: Uint8Array | undefined;
            label?: string | undefined;
            created?: {
                block_height?: string | undefined;
                tx_index?: string | undefined;
            } | undefined;
            ibc_port_id?: string | undefined;
            admin?: string | undefined;
            admin_proof?: Uint8Array | undefined;
        } | undefined;
    } | undefined): QueryContractInfoResponse;
    fromPartial(object: DeepPartial<QueryContractInfoResponse>): QueryContractInfoResponse;
};
export declare const ContractInfoWithAddress: {
    encode(message: ContractInfoWithAddress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ContractInfoWithAddress;
    fromJSON(object: any): ContractInfoWithAddress;
    toJSON(message: ContractInfoWithAddress): unknown;
    create(base?: {
        contract_address?: string | undefined;
        contract_info?: {
            code_id?: string | undefined;
            creator?: Uint8Array | undefined;
            label?: string | undefined;
            created?: {
                block_height?: string | undefined;
                tx_index?: string | undefined;
            } | undefined;
            ibc_port_id?: string | undefined;
            admin?: string | undefined;
            admin_proof?: Uint8Array | undefined;
        } | undefined;
    } | undefined): ContractInfoWithAddress;
    fromPartial(object: DeepPartial<ContractInfoWithAddress>): ContractInfoWithAddress;
};
export declare const QueryContractsByCodeIdResponse: {
    encode(message: QueryContractsByCodeIdResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractsByCodeIdResponse;
    fromJSON(object: any): QueryContractsByCodeIdResponse;
    toJSON(message: QueryContractsByCodeIdResponse): unknown;
    create(base?: {
        contract_infos?: {
            contract_address?: string | undefined;
            contract_info?: {
                code_id?: string | undefined;
                creator?: Uint8Array | undefined;
                label?: string | undefined;
                created?: {
                    block_height?: string | undefined;
                    tx_index?: string | undefined;
                } | undefined;
                ibc_port_id?: string | undefined;
                admin?: string | undefined;
                admin_proof?: Uint8Array | undefined;
            } | undefined;
        }[] | undefined;
    } | undefined): QueryContractsByCodeIdResponse;
    fromPartial(object: DeepPartial<QueryContractsByCodeIdResponse>): QueryContractsByCodeIdResponse;
};
export declare const CodeInfoResponse: {
    encode(message: CodeInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CodeInfoResponse;
    fromJSON(object: any): CodeInfoResponse;
    toJSON(message: CodeInfoResponse): unknown;
    create(base?: {
        code_id?: string | undefined;
        creator?: string | undefined;
        code_hash?: string | undefined;
        source?: string | undefined;
        builder?: string | undefined;
    } | undefined): CodeInfoResponse;
    fromPartial(object: DeepPartial<CodeInfoResponse>): CodeInfoResponse;
};
export declare const QueryCodeResponse: {
    encode(message: QueryCodeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCodeResponse;
    fromJSON(object: any): QueryCodeResponse;
    toJSON(message: QueryCodeResponse): unknown;
    create(base?: {
        code_info?: {
            code_id?: string | undefined;
            creator?: string | undefined;
            code_hash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        } | undefined;
        wasm?: Uint8Array | undefined;
    } | undefined): QueryCodeResponse;
    fromPartial(object: DeepPartial<QueryCodeResponse>): QueryCodeResponse;
};
export declare const QueryCodesResponse: {
    encode(message: QueryCodesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCodesResponse;
    fromJSON(object: any): QueryCodesResponse;
    toJSON(message: QueryCodesResponse): unknown;
    create(base?: {
        code_infos?: {
            code_id?: string | undefined;
            creator?: string | undefined;
            code_hash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        }[] | undefined;
    } | undefined): QueryCodesResponse;
    fromPartial(object: DeepPartial<QueryCodesResponse>): QueryCodesResponse;
};
export declare const QueryContractAddressResponse: {
    encode(message: QueryContractAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractAddressResponse;
    fromJSON(object: any): QueryContractAddressResponse;
    toJSON(message: QueryContractAddressResponse): unknown;
    create(base?: {
        contract_address?: string | undefined;
    } | undefined): QueryContractAddressResponse;
    fromPartial(object: DeepPartial<QueryContractAddressResponse>): QueryContractAddressResponse;
};
export declare const QueryContractLabelResponse: {
    encode(message: QueryContractLabelResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractLabelResponse;
    fromJSON(object: any): QueryContractLabelResponse;
    toJSON(message: QueryContractLabelResponse): unknown;
    create(base?: {
        label?: string | undefined;
    } | undefined): QueryContractLabelResponse;
    fromPartial(object: DeepPartial<QueryContractLabelResponse>): QueryContractLabelResponse;
};
export declare const QueryCodeHashResponse: {
    encode(message: QueryCodeHashResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCodeHashResponse;
    fromJSON(object: any): QueryCodeHashResponse;
    toJSON(message: QueryCodeHashResponse): unknown;
    create(base?: {
        code_hash?: string | undefined;
    } | undefined): QueryCodeHashResponse;
    fromPartial(object: DeepPartial<QueryCodeHashResponse>): QueryCodeHashResponse;
};
export declare const DecryptedAnswer: {
    encode(message: DecryptedAnswer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DecryptedAnswer;
    fromJSON(object: any): DecryptedAnswer;
    toJSON(message: DecryptedAnswer): unknown;
    create(base?: {
        type?: string | undefined;
        input?: string | undefined;
        output_data?: string | undefined;
        output_data_as_string?: string | undefined;
    } | undefined): DecryptedAnswer;
    fromPartial(object: DeepPartial<DecryptedAnswer>): DecryptedAnswer;
};
export declare const DecryptedAnswers: {
    encode(message: DecryptedAnswers, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DecryptedAnswers;
    fromJSON(object: any): DecryptedAnswers;
    toJSON(message: DecryptedAnswers): unknown;
    create(base?: {
        answers?: {
            type?: string | undefined;
            input?: string | undefined;
            output_data?: string | undefined;
            output_data_as_string?: string | undefined;
        }[] | undefined;
        output_logs?: {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        output_error?: string | undefined;
        plaintext_error?: string | undefined;
    } | undefined): DecryptedAnswers;
    fromPartial(object: DeepPartial<DecryptedAnswers>): DecryptedAnswers;
};
export declare const QueryContractHistoryRequest: {
    encode(message: QueryContractHistoryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractHistoryRequest;
    fromJSON(object: any): QueryContractHistoryRequest;
    toJSON(message: QueryContractHistoryRequest): unknown;
    create(base?: {
        contract_address?: string | undefined;
    } | undefined): QueryContractHistoryRequest;
    fromPartial(object: DeepPartial<QueryContractHistoryRequest>): QueryContractHistoryRequest;
};
export declare const QueryContractHistoryResponse: {
    encode(message: QueryContractHistoryResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractHistoryResponse;
    fromJSON(object: any): QueryContractHistoryResponse;
    toJSON(message: QueryContractHistoryResponse): unknown;
    create(base?: {
        entries?: {
            operation?: import("./types").ContractCodeHistoryOperationType | undefined;
            code_id?: string | undefined;
            updated?: {
                block_height?: string | undefined;
                tx_index?: string | undefined;
            } | undefined;
            msg?: Uint8Array | undefined;
        }[] | undefined;
    } | undefined): QueryContractHistoryResponse;
    fromPartial(object: DeepPartial<QueryContractHistoryResponse>): QueryContractHistoryResponse;
};
/** Query defines the gRPC querier service */
export interface Query {
    /** Query contract info by address */
    ContractInfo(request: QueryByContractAddressRequest): Promise<QueryContractInfoResponse>;
    /** Query code info by id */
    ContractsByCodeId(request: QueryByCodeIdRequest): Promise<QueryContractsByCodeIdResponse>;
    /** Query secret contract */
    QuerySecretContract(request: QuerySecretContractRequest): Promise<QuerySecretContractResponse>;
    /** Query a specific contract code by id */
    Code(request: QueryByCodeIdRequest): Promise<QueryCodeResponse>;
    /** Query all contract codes on-chain */
    Codes(request: Empty): Promise<QueryCodesResponse>;
    /** Query code hash by contract address */
    CodeHashByContractAddress(request: QueryByContractAddressRequest): Promise<QueryCodeHashResponse>;
    /** Query code hash by code id */
    CodeHashByCodeId(request: QueryByCodeIdRequest): Promise<QueryCodeHashResponse>;
    /** Query contract label by address */
    LabelByAddress(request: QueryByContractAddressRequest): Promise<QueryContractLabelResponse>;
    /** Query contract address by label */
    AddressByLabel(request: QueryByLabelRequest): Promise<QueryContractAddressResponse>;
    /** ContractHistory gets the contract code history */
    ContractHistory(request: QueryContractHistoryRequest): Promise<QueryContractHistoryResponse>;
}
export declare const QueryServiceName = "secret.compute.v1beta1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ContractInfo(request: QueryByContractAddressRequest): Promise<QueryContractInfoResponse>;
    ContractsByCodeId(request: QueryByCodeIdRequest): Promise<QueryContractsByCodeIdResponse>;
    QuerySecretContract(request: QuerySecretContractRequest): Promise<QuerySecretContractResponse>;
    Code(request: QueryByCodeIdRequest): Promise<QueryCodeResponse>;
    Codes(request: Empty): Promise<QueryCodesResponse>;
    CodeHashByContractAddress(request: QueryByContractAddressRequest): Promise<QueryCodeHashResponse>;
    CodeHashByCodeId(request: QueryByCodeIdRequest): Promise<QueryCodeHashResponse>;
    LabelByAddress(request: QueryByContractAddressRequest): Promise<QueryContractLabelResponse>;
    AddressByLabel(request: QueryByLabelRequest): Promise<QueryContractAddressResponse>;
    ContractHistory(request: QueryContractHistoryRequest): Promise<QueryContractHistoryResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=query.d.ts.map