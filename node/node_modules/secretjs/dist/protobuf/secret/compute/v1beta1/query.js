"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: secret/compute/v1beta1/query.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryContractHistoryResponse = exports.QueryContractHistoryRequest = exports.DecryptedAnswers = exports.DecryptedAnswer = exports.QueryCodeHashResponse = exports.QueryContractLabelResponse = exports.QueryContractAddressResponse = exports.QueryCodesResponse = exports.QueryCodeResponse = exports.CodeInfoResponse = exports.QueryContractsByCodeIdResponse = exports.ContractInfoWithAddress = exports.QueryContractInfoResponse = exports.QuerySecretContractResponse = exports.QueryByCodeIdRequest = exports.QueryByContractAddressRequest = exports.QueryByLabelRequest = exports.QuerySecretContractRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
const abci_1 = require("../../../cosmos/base/abci/v1beta1/abci");
const empty_1 = require("../../../google/protobuf/empty");
const types_1 = require("./types");
exports.protobufPackage = "secret.compute.v1beta1";
function createBaseQuerySecretContractRequest() {
    return { contract_address: "", query: new Uint8Array(0) };
}
exports.QuerySecretContractRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contract_address !== "") {
            writer.uint32(10).string(message.contract_address);
        }
        if (message.query.length !== 0) {
            writer.uint32(18).bytes(message.query);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySecretContractRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contract_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.query = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
            query: isSet(object.query) ? bytesFromBase64(object.query) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contract_address !== "") {
            obj.contract_address = message.contract_address;
        }
        if (message.query.length !== 0) {
            obj.query = base64FromBytes(message.query);
        }
        return obj;
    },
    create(base) {
        return exports.QuerySecretContractRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQuerySecretContractRequest();
        message.contract_address = (_a = object.contract_address) !== null && _a !== void 0 ? _a : "";
        message.query = (_b = object.query) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryByLabelRequest() {
    return { label: "" };
}
exports.QueryByLabelRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.label !== "") {
            writer.uint32(10).string(message.label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryByLabelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { label: isSet(object.label) ? globalThis.String(object.label) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.label !== "") {
            obj.label = message.label;
        }
        return obj;
    },
    create(base) {
        return exports.QueryByLabelRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryByLabelRequest();
        message.label = (_a = object.label) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryByContractAddressRequest() {
    return { contract_address: "" };
}
exports.QueryByContractAddressRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contract_address !== "") {
            writer.uint32(10).string(message.contract_address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryByContractAddressRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contract_address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.contract_address !== "") {
            obj.contract_address = message.contract_address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryByContractAddressRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryByContractAddressRequest();
        message.contract_address = (_a = object.contract_address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryByCodeIdRequest() {
    return { code_id: "0" };
}
exports.QueryByCodeIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.code_id !== "0") {
            writer.uint32(8).uint64(message.code_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryByCodeIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.code_id = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { code_id: isSet(object.code_id) ? globalThis.String(object.code_id) : "0" };
    },
    toJSON(message) {
        const obj = {};
        if (message.code_id !== "0") {
            obj.code_id = message.code_id;
        }
        return obj;
    },
    create(base) {
        return exports.QueryByCodeIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryByCodeIdRequest();
        message.code_id = (_a = object.code_id) !== null && _a !== void 0 ? _a : "0";
        return message;
    },
};
function createBaseQuerySecretContractResponse() {
    return { data: new Uint8Array(0) };
}
exports.QuerySecretContractResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySecretContractResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.QuerySecretContractResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQuerySecretContractResponse();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryContractInfoResponse() {
    return { contract_address: "", contract_info: undefined };
}
exports.QueryContractInfoResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contract_address !== "") {
            writer.uint32(10).string(message.contract_address);
        }
        if (message.contract_info !== undefined) {
            types_1.ContractInfo.encode(message.contract_info, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contract_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contract_info = types_1.ContractInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
            contract_info: isSet(object.contract_info) ? types_1.ContractInfo.fromJSON(object.contract_info) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contract_address !== "") {
            obj.contract_address = message.contract_address;
        }
        if (message.contract_info !== undefined) {
            obj.contract_info = types_1.ContractInfo.toJSON(message.contract_info);
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractInfoResponse();
        message.contract_address = (_a = object.contract_address) !== null && _a !== void 0 ? _a : "";
        message.contract_info = (object.contract_info !== undefined && object.contract_info !== null)
            ? types_1.ContractInfo.fromPartial(object.contract_info)
            : undefined;
        return message;
    },
};
function createBaseContractInfoWithAddress() {
    return { contract_address: "", contract_info: undefined };
}
exports.ContractInfoWithAddress = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contract_address !== "") {
            writer.uint32(10).string(message.contract_address);
        }
        if (message.contract_info !== undefined) {
            types_1.ContractInfo.encode(message.contract_info, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractInfoWithAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contract_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contract_info = types_1.ContractInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
            contract_info: isSet(object.contract_info) ? types_1.ContractInfo.fromJSON(object.contract_info) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contract_address !== "") {
            obj.contract_address = message.contract_address;
        }
        if (message.contract_info !== undefined) {
            obj.contract_info = types_1.ContractInfo.toJSON(message.contract_info);
        }
        return obj;
    },
    create(base) {
        return exports.ContractInfoWithAddress.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseContractInfoWithAddress();
        message.contract_address = (_a = object.contract_address) !== null && _a !== void 0 ? _a : "";
        message.contract_info = (object.contract_info !== undefined && object.contract_info !== null)
            ? types_1.ContractInfo.fromPartial(object.contract_info)
            : undefined;
        return message;
    },
};
function createBaseQueryContractsByCodeIdResponse() {
    return { contract_infos: [] };
}
exports.QueryContractsByCodeIdResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.contract_infos) {
            exports.ContractInfoWithAddress.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractsByCodeIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contract_infos.push(exports.ContractInfoWithAddress.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contract_infos: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.contract_infos)
                ? object.contract_infos.map((e) => exports.ContractInfoWithAddress.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.contract_infos) === null || _a === void 0 ? void 0 : _a.length) {
            obj.contract_infos = message.contract_infos.map((e) => exports.ContractInfoWithAddress.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractsByCodeIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractsByCodeIdResponse();
        message.contract_infos = ((_a = object.contract_infos) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ContractInfoWithAddress.fromPartial(e))) || [];
        return message;
    },
};
function createBaseCodeInfoResponse() {
    return { code_id: "0", creator: "", code_hash: "", source: "", builder: "" };
}
exports.CodeInfoResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.code_id !== "0") {
            writer.uint32(8).uint64(message.code_id);
        }
        if (message.creator !== "") {
            writer.uint32(18).string(message.creator);
        }
        if (message.code_hash !== "") {
            writer.uint32(26).string(message.code_hash);
        }
        if (message.source !== "") {
            writer.uint32(34).string(message.source);
        }
        if (message.builder !== "") {
            writer.uint32(42).string(message.builder);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCodeInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.code_id = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.code_hash = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.builder = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code_id: isSet(object.code_id) ? globalThis.String(object.code_id) : "0",
            creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
            code_hash: isSet(object.code_hash) ? globalThis.String(object.code_hash) : "",
            source: isSet(object.source) ? globalThis.String(object.source) : "",
            builder: isSet(object.builder) ? globalThis.String(object.builder) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code_id !== "0") {
            obj.code_id = message.code_id;
        }
        if (message.creator !== "") {
            obj.creator = message.creator;
        }
        if (message.code_hash !== "") {
            obj.code_hash = message.code_hash;
        }
        if (message.source !== "") {
            obj.source = message.source;
        }
        if (message.builder !== "") {
            obj.builder = message.builder;
        }
        return obj;
    },
    create(base) {
        return exports.CodeInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseCodeInfoResponse();
        message.code_id = (_a = object.code_id) !== null && _a !== void 0 ? _a : "0";
        message.creator = (_b = object.creator) !== null && _b !== void 0 ? _b : "";
        message.code_hash = (_c = object.code_hash) !== null && _c !== void 0 ? _c : "";
        message.source = (_d = object.source) !== null && _d !== void 0 ? _d : "";
        message.builder = (_e = object.builder) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseQueryCodeResponse() {
    return { code_info: undefined, wasm: new Uint8Array(0) };
}
exports.QueryCodeResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.code_info !== undefined) {
            exports.CodeInfoResponse.encode(message.code_info, writer.uint32(10).fork()).ldelim();
        }
        if (message.wasm.length !== 0) {
            writer.uint32(18).bytes(message.wasm);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCodeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code_info = exports.CodeInfoResponse.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.wasm = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code_info: isSet(object.code_info) ? exports.CodeInfoResponse.fromJSON(object.code_info) : undefined,
            wasm: isSet(object.wasm) ? bytesFromBase64(object.wasm) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code_info !== undefined) {
            obj.code_info = exports.CodeInfoResponse.toJSON(message.code_info);
        }
        if (message.wasm.length !== 0) {
            obj.wasm = base64FromBytes(message.wasm);
        }
        return obj;
    },
    create(base) {
        return exports.QueryCodeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCodeResponse();
        message.code_info = (object.code_info !== undefined && object.code_info !== null)
            ? exports.CodeInfoResponse.fromPartial(object.code_info)
            : undefined;
        message.wasm = (_a = object.wasm) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryCodesResponse() {
    return { code_infos: [] };
}
exports.QueryCodesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.code_infos) {
            exports.CodeInfoResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCodesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code_infos.push(exports.CodeInfoResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code_infos: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.code_infos)
                ? object.code_infos.map((e) => exports.CodeInfoResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.code_infos) === null || _a === void 0 ? void 0 : _a.length) {
            obj.code_infos = message.code_infos.map((e) => exports.CodeInfoResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryCodesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCodesResponse();
        message.code_infos = ((_a = object.code_infos) === null || _a === void 0 ? void 0 : _a.map((e) => exports.CodeInfoResponse.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryContractAddressResponse() {
    return { contract_address: "" };
}
exports.QueryContractAddressResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contract_address !== "") {
            writer.uint32(10).string(message.contract_address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractAddressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contract_address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.contract_address !== "") {
            obj.contract_address = message.contract_address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractAddressResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractAddressResponse();
        message.contract_address = (_a = object.contract_address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryContractLabelResponse() {
    return { label: "" };
}
exports.QueryContractLabelResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.label !== "") {
            writer.uint32(10).string(message.label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractLabelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { label: isSet(object.label) ? globalThis.String(object.label) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.label !== "") {
            obj.label = message.label;
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractLabelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractLabelResponse();
        message.label = (_a = object.label) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryCodeHashResponse() {
    return { code_hash: "" };
}
exports.QueryCodeHashResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.code_hash !== "") {
            writer.uint32(10).string(message.code_hash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCodeHashResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code_hash = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { code_hash: isSet(object.code_hash) ? globalThis.String(object.code_hash) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.code_hash !== "") {
            obj.code_hash = message.code_hash;
        }
        return obj;
    },
    create(base) {
        return exports.QueryCodeHashResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCodeHashResponse();
        message.code_hash = (_a = object.code_hash) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDecryptedAnswer() {
    return { type: "", input: "", output_data: "", output_data_as_string: "" };
}
exports.DecryptedAnswer = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.input !== "") {
            writer.uint32(18).string(message.input);
        }
        if (message.output_data !== "") {
            writer.uint32(26).string(message.output_data);
        }
        if (message.output_data_as_string !== "") {
            writer.uint32(34).string(message.output_data_as_string);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecryptedAnswer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.input = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.output_data = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.output_data_as_string = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            input: isSet(object.input) ? globalThis.String(object.input) : "",
            output_data: isSet(object.output_data) ? globalThis.String(object.output_data) : "",
            output_data_as_string: isSet(object.output_data_as_string) ? globalThis.String(object.output_data_as_string) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.input !== "") {
            obj.input = message.input;
        }
        if (message.output_data !== "") {
            obj.output_data = message.output_data;
        }
        if (message.output_data_as_string !== "") {
            obj.output_data_as_string = message.output_data_as_string;
        }
        return obj;
    },
    create(base) {
        return exports.DecryptedAnswer.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseDecryptedAnswer();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : "";
        message.input = (_b = object.input) !== null && _b !== void 0 ? _b : "";
        message.output_data = (_c = object.output_data) !== null && _c !== void 0 ? _c : "";
        message.output_data_as_string = (_d = object.output_data_as_string) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseDecryptedAnswers() {
    return { answers: [], output_logs: [], output_error: "", plaintext_error: "" };
}
exports.DecryptedAnswers = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.answers) {
            exports.DecryptedAnswer.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.output_logs) {
            abci_1.StringEvent.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.output_error !== "") {
            writer.uint32(26).string(message.output_error);
        }
        if (message.plaintext_error !== "") {
            writer.uint32(34).string(message.plaintext_error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecryptedAnswers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.answers.push(exports.DecryptedAnswer.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.output_logs.push(abci_1.StringEvent.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.output_error = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.plaintext_error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            answers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.answers)
                ? object.answers.map((e) => exports.DecryptedAnswer.fromJSON(e))
                : [],
            output_logs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.output_logs)
                ? object.output_logs.map((e) => abci_1.StringEvent.fromJSON(e))
                : [],
            output_error: isSet(object.output_error) ? globalThis.String(object.output_error) : "",
            plaintext_error: isSet(object.plaintext_error) ? globalThis.String(object.plaintext_error) : "",
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.answers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.answers = message.answers.map((e) => exports.DecryptedAnswer.toJSON(e));
        }
        if ((_b = message.output_logs) === null || _b === void 0 ? void 0 : _b.length) {
            obj.output_logs = message.output_logs.map((e) => abci_1.StringEvent.toJSON(e));
        }
        if (message.output_error !== "") {
            obj.output_error = message.output_error;
        }
        if (message.plaintext_error !== "") {
            obj.plaintext_error = message.plaintext_error;
        }
        return obj;
    },
    create(base) {
        return exports.DecryptedAnswers.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseDecryptedAnswers();
        message.answers = ((_a = object.answers) === null || _a === void 0 ? void 0 : _a.map((e) => exports.DecryptedAnswer.fromPartial(e))) || [];
        message.output_logs = ((_b = object.output_logs) === null || _b === void 0 ? void 0 : _b.map((e) => abci_1.StringEvent.fromPartial(e))) || [];
        message.output_error = (_c = object.output_error) !== null && _c !== void 0 ? _c : "";
        message.plaintext_error = (_d = object.plaintext_error) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseQueryContractHistoryRequest() {
    return { contract_address: "" };
}
exports.QueryContractHistoryRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contract_address !== "") {
            writer.uint32(10).string(message.contract_address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractHistoryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contract_address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.contract_address !== "") {
            obj.contract_address = message.contract_address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractHistoryRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractHistoryRequest();
        message.contract_address = (_a = object.contract_address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryContractHistoryResponse() {
    return { entries: [] };
}
exports.QueryContractHistoryResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.entries) {
            types_1.ContractCodeHistoryEntry.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractHistoryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.entries.push(types_1.ContractCodeHistoryEntry.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            entries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.entries)
                ? object.entries.map((e) => types_1.ContractCodeHistoryEntry.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.entries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.entries = message.entries.map((e) => types_1.ContractCodeHistoryEntry.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractHistoryResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractHistoryResponse();
        message.entries = ((_a = object.entries) === null || _a === void 0 ? void 0 : _a.map((e) => types_1.ContractCodeHistoryEntry.fromPartial(e))) || [];
        return message;
    },
};
exports.QueryServiceName = "secret.compute.v1beta1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.ContractInfo = this.ContractInfo.bind(this);
        this.ContractsByCodeId = this.ContractsByCodeId.bind(this);
        this.QuerySecretContract = this.QuerySecretContract.bind(this);
        this.Code = this.Code.bind(this);
        this.Codes = this.Codes.bind(this);
        this.CodeHashByContractAddress = this.CodeHashByContractAddress.bind(this);
        this.CodeHashByCodeId = this.CodeHashByCodeId.bind(this);
        this.LabelByAddress = this.LabelByAddress.bind(this);
        this.AddressByLabel = this.AddressByLabel.bind(this);
        this.ContractHistory = this.ContractHistory.bind(this);
    }
    ContractInfo(request) {
        const data = exports.QueryByContractAddressRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ContractInfo", data);
        return promise.then((data) => exports.QueryContractInfoResponse.decode(_m0.Reader.create(data)));
    }
    ContractsByCodeId(request) {
        const data = exports.QueryByCodeIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ContractsByCodeId", data);
        return promise.then((data) => exports.QueryContractsByCodeIdResponse.decode(_m0.Reader.create(data)));
    }
    QuerySecretContract(request) {
        const data = exports.QuerySecretContractRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "QuerySecretContract", data);
        return promise.then((data) => exports.QuerySecretContractResponse.decode(_m0.Reader.create(data)));
    }
    Code(request) {
        const data = exports.QueryByCodeIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Code", data);
        return promise.then((data) => exports.QueryCodeResponse.decode(_m0.Reader.create(data)));
    }
    Codes(request) {
        const data = empty_1.Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "Codes", data);
        return promise.then((data) => exports.QueryCodesResponse.decode(_m0.Reader.create(data)));
    }
    CodeHashByContractAddress(request) {
        const data = exports.QueryByContractAddressRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CodeHashByContractAddress", data);
        return promise.then((data) => exports.QueryCodeHashResponse.decode(_m0.Reader.create(data)));
    }
    CodeHashByCodeId(request) {
        const data = exports.QueryByCodeIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CodeHashByCodeId", data);
        return promise.then((data) => exports.QueryCodeHashResponse.decode(_m0.Reader.create(data)));
    }
    LabelByAddress(request) {
        const data = exports.QueryByContractAddressRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "LabelByAddress", data);
        return promise.then((data) => exports.QueryContractLabelResponse.decode(_m0.Reader.create(data)));
    }
    AddressByLabel(request) {
        const data = exports.QueryByLabelRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddressByLabel", data);
        return promise.then((data) => exports.QueryContractAddressResponse.decode(_m0.Reader.create(data)));
    }
    ContractHistory(request) {
        const data = exports.QueryContractHistoryRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ContractHistory", data);
        return promise.then((data) => exports.QueryContractHistoryResponse.decode(_m0.Reader.create(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map