import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "secret.registration.v1beta1";
export interface RaAuthenticate {
    sender: Uint8Array;
    certificate: Uint8Array;
}
export interface RaAuthenticateResponse {
    data: string;
    events: string;
}
export interface MasterKey {
    bytes: Uint8Array;
}
export interface Key {
    key: Uint8Array;
}
export declare const RaAuthenticate: {
    encode(message: RaAuthenticate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RaAuthenticate;
    fromJSON(object: any): RaAuthenticate;
    toJSON(message: RaAuthenticate): unknown;
    create(base?: {
        sender?: Uint8Array | undefined;
        certificate?: Uint8Array | undefined;
    } | undefined): RaAuthenticate;
    fromPartial(object: DeepPartial<RaAuthenticate>): RaAuthenticate;
};
export declare const RaAuthenticateResponse: {
    encode(message: RaAuthenticateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RaAuthenticateResponse;
    fromJSON(object: any): RaAuthenticateResponse;
    toJSON(message: RaAuthenticateResponse): unknown;
    create(base?: {
        data?: string | undefined;
        events?: string | undefined;
    } | undefined): RaAuthenticateResponse;
    fromPartial(object: DeepPartial<RaAuthenticateResponse>): RaAuthenticateResponse;
};
export declare const MasterKey: {
    encode(message: MasterKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MasterKey;
    fromJSON(object: any): MasterKey;
    toJSON(message: MasterKey): unknown;
    create(base?: {
        bytes?: Uint8Array | undefined;
    } | undefined): MasterKey;
    fromPartial(object: DeepPartial<MasterKey>): MasterKey;
};
export declare const Key: {
    encode(message: Key, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Key;
    fromJSON(object: any): Key;
    toJSON(message: Key): unknown;
    create(base?: {
        key?: Uint8Array | undefined;
    } | undefined): Key;
    fromPartial(object: DeepPartial<Key>): Key;
};
/** Msg defines the wasm Msg service. */
export interface Msg {
    /** Register and authenticate new node */
    RegisterAuth(request: RaAuthenticate): Promise<RaAuthenticateResponse>;
}
export declare const MsgServiceName = "secret.registration.v1beta1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    RegisterAuth(request: RaAuthenticate): Promise<RaAuthenticateResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=msg.d.ts.map