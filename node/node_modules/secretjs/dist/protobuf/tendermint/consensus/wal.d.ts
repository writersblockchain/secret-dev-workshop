import * as _m0 from "protobufjs/minimal";
import { Duration } from "../../google/protobuf/duration";
import { Timestamp } from "../../google/protobuf/timestamp";
import { EventDataRoundState } from "../types/events";
import { Message } from "./types";
export declare const protobufPackage = "tendermint.consensus";
/** MsgInfo are msgs from the reactor which may update the state */
export interface MsgInfo {
    msg?: Message | undefined;
    peer_id: string;
}
/** TimeoutInfo internally generated messages which may update the state */
export interface TimeoutInfo {
    duration?: Duration | undefined;
    height: string;
    round: number;
    step: number;
}
/**
 * EndHeight marks the end of the given height inside WAL.
 * @internal used by scripts/wal2json util.
 */
export interface EndHeight {
    height: string;
}
export interface WALMessage {
    event_data_round_state?: EventDataRoundState | undefined;
    msg_info?: MsgInfo | undefined;
    timeout_info?: TimeoutInfo | undefined;
    end_height?: EndHeight | undefined;
}
/** TimedWALMessage wraps WALMessage and adds Time for debugging purposes. */
export interface TimedWALMessage {
    time?: Timestamp | undefined;
    msg?: WALMessage | undefined;
}
export declare const MsgInfo: {
    encode(message: MsgInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgInfo;
    fromJSON(object: any): MsgInfo;
    toJSON(message: MsgInfo): unknown;
    create(base?: {
        msg?: {
            new_round_step?: {
                height?: string | undefined;
                round?: number | undefined;
                step?: number | undefined;
                seconds_since_start_time?: string | undefined;
                last_commit_round?: number | undefined;
            } | undefined;
            new_valid_block?: {
                height?: string | undefined;
                round?: number | undefined;
                block_part_set_header?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
                block_parts?: {
                    bits?: string | undefined;
                    elems?: string[] | undefined;
                } | undefined;
                is_commit?: boolean | undefined;
            } | undefined;
            proposal?: {
                proposal?: {
                    type?: import("../types/types").SignedMsgType | undefined;
                    height?: string | undefined;
                    round?: number | undefined;
                    pol_round?: number | undefined;
                    block_id?: {
                        hash?: Uint8Array | undefined;
                        part_set_header?: {
                            total?: number | undefined;
                            hash?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    timestamp?: {
                        seconds?: string | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    signature?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            proposal_pol?: {
                height?: string | undefined;
                proposal_pol_round?: number | undefined;
                proposal_pol?: {
                    bits?: string | undefined;
                    elems?: string[] | undefined;
                } | undefined;
            } | undefined;
            block_part?: {
                height?: string | undefined;
                round?: number | undefined;
                part?: {
                    index?: number | undefined;
                    bytes?: Uint8Array | undefined;
                    proof?: {
                        total?: string | undefined;
                        index?: string | undefined;
                        leaf_hash?: Uint8Array | undefined;
                        aunts?: Uint8Array[] | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            vote?: {
                vote?: {
                    type?: import("../types/types").SignedMsgType | undefined;
                    height?: string | undefined;
                    round?: number | undefined;
                    block_id?: {
                        hash?: Uint8Array | undefined;
                        part_set_header?: {
                            total?: number | undefined;
                            hash?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    timestamp?: {
                        seconds?: string | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    validator_address?: Uint8Array | undefined;
                    validator_index?: number | undefined;
                    signature?: Uint8Array | undefined;
                    extension?: Uint8Array | undefined;
                    extension_signature?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            has_vote?: {
                height?: string | undefined;
                round?: number | undefined;
                type?: import("../types/types").SignedMsgType | undefined;
                index?: number | undefined;
            } | undefined;
            vote_set_maj23?: {
                height?: string | undefined;
                round?: number | undefined;
                type?: import("../types/types").SignedMsgType | undefined;
                block_id?: {
                    hash?: Uint8Array | undefined;
                    part_set_header?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            vote_set_bits?: {
                height?: string | undefined;
                round?: number | undefined;
                type?: import("../types/types").SignedMsgType | undefined;
                block_id?: {
                    hash?: Uint8Array | undefined;
                    part_set_header?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                votes?: {
                    bits?: string | undefined;
                    elems?: string[] | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        peer_id?: string | undefined;
    } | undefined): MsgInfo;
    fromPartial(object: DeepPartial<MsgInfo>): MsgInfo;
};
export declare const TimeoutInfo: {
    encode(message: TimeoutInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TimeoutInfo;
    fromJSON(object: any): TimeoutInfo;
    toJSON(message: TimeoutInfo): unknown;
    create(base?: {
        duration?: {
            seconds?: string | undefined;
            nanos?: number | undefined;
        } | undefined;
        height?: string | undefined;
        round?: number | undefined;
        step?: number | undefined;
    } | undefined): TimeoutInfo;
    fromPartial(object: DeepPartial<TimeoutInfo>): TimeoutInfo;
};
export declare const EndHeight: {
    encode(message: EndHeight, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EndHeight;
    fromJSON(object: any): EndHeight;
    toJSON(message: EndHeight): unknown;
    create(base?: {
        height?: string | undefined;
    } | undefined): EndHeight;
    fromPartial(object: DeepPartial<EndHeight>): EndHeight;
};
export declare const WALMessage: {
    encode(message: WALMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): WALMessage;
    fromJSON(object: any): WALMessage;
    toJSON(message: WALMessage): unknown;
    create(base?: {
        event_data_round_state?: {
            height?: string | undefined;
            round?: number | undefined;
            step?: string | undefined;
        } | undefined;
        msg_info?: {
            msg?: {
                new_round_step?: {
                    height?: string | undefined;
                    round?: number | undefined;
                    step?: number | undefined;
                    seconds_since_start_time?: string | undefined;
                    last_commit_round?: number | undefined;
                } | undefined;
                new_valid_block?: {
                    height?: string | undefined;
                    round?: number | undefined;
                    block_part_set_header?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                    block_parts?: {
                        bits?: string | undefined;
                        elems?: string[] | undefined;
                    } | undefined;
                    is_commit?: boolean | undefined;
                } | undefined;
                proposal?: {
                    proposal?: {
                        type?: import("../types/types").SignedMsgType | undefined;
                        height?: string | undefined;
                        round?: number | undefined;
                        pol_round?: number | undefined;
                        block_id?: {
                            hash?: Uint8Array | undefined;
                            part_set_header?: {
                                total?: number | undefined;
                                hash?: Uint8Array | undefined;
                            } | undefined;
                        } | undefined;
                        timestamp?: {
                            seconds?: string | undefined;
                            nanos?: number | undefined;
                        } | undefined;
                        signature?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                proposal_pol?: {
                    height?: string | undefined;
                    proposal_pol_round?: number | undefined;
                    proposal_pol?: {
                        bits?: string | undefined;
                        elems?: string[] | undefined;
                    } | undefined;
                } | undefined;
                block_part?: {
                    height?: string | undefined;
                    round?: number | undefined;
                    part?: {
                        index?: number | undefined;
                        bytes?: Uint8Array | undefined;
                        proof?: {
                            total?: string | undefined;
                            index?: string | undefined;
                            leaf_hash?: Uint8Array | undefined;
                            aunts?: Uint8Array[] | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined;
                vote?: {
                    vote?: {
                        type?: import("../types/types").SignedMsgType | undefined;
                        height?: string | undefined;
                        round?: number | undefined;
                        block_id?: {
                            hash?: Uint8Array | undefined;
                            part_set_header?: {
                                total?: number | undefined;
                                hash?: Uint8Array | undefined;
                            } | undefined;
                        } | undefined;
                        timestamp?: {
                            seconds?: string | undefined;
                            nanos?: number | undefined;
                        } | undefined;
                        validator_address?: Uint8Array | undefined;
                        validator_index?: number | undefined;
                        signature?: Uint8Array | undefined;
                        extension?: Uint8Array | undefined;
                        extension_signature?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                has_vote?: {
                    height?: string | undefined;
                    round?: number | undefined;
                    type?: import("../types/types").SignedMsgType | undefined;
                    index?: number | undefined;
                } | undefined;
                vote_set_maj23?: {
                    height?: string | undefined;
                    round?: number | undefined;
                    type?: import("../types/types").SignedMsgType | undefined;
                    block_id?: {
                        hash?: Uint8Array | undefined;
                        part_set_header?: {
                            total?: number | undefined;
                            hash?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined;
                vote_set_bits?: {
                    height?: string | undefined;
                    round?: number | undefined;
                    type?: import("../types/types").SignedMsgType | undefined;
                    block_id?: {
                        hash?: Uint8Array | undefined;
                        part_set_header?: {
                            total?: number | undefined;
                            hash?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    votes?: {
                        bits?: string | undefined;
                        elems?: string[] | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            peer_id?: string | undefined;
        } | undefined;
        timeout_info?: {
            duration?: {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } | undefined;
            height?: string | undefined;
            round?: number | undefined;
            step?: number | undefined;
        } | undefined;
        end_height?: {
            height?: string | undefined;
        } | undefined;
    } | undefined): WALMessage;
    fromPartial(object: DeepPartial<WALMessage>): WALMessage;
};
export declare const TimedWALMessage: {
    encode(message: TimedWALMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TimedWALMessage;
    fromJSON(object: any): TimedWALMessage;
    toJSON(message: TimedWALMessage): unknown;
    create(base?: {
        time?: {
            seconds?: string | undefined;
            nanos?: number | undefined;
        } | undefined;
        msg?: {
            event_data_round_state?: {
                height?: string | undefined;
                round?: number | undefined;
                step?: string | undefined;
            } | undefined;
            msg_info?: {
                msg?: {
                    new_round_step?: {
                        height?: string | undefined;
                        round?: number | undefined;
                        step?: number | undefined;
                        seconds_since_start_time?: string | undefined;
                        last_commit_round?: number | undefined;
                    } | undefined;
                    new_valid_block?: {
                        height?: string | undefined;
                        round?: number | undefined;
                        block_part_set_header?: {
                            total?: number | undefined;
                            hash?: Uint8Array | undefined;
                        } | undefined;
                        block_parts?: {
                            bits?: string | undefined;
                            elems?: string[] | undefined;
                        } | undefined;
                        is_commit?: boolean | undefined;
                    } | undefined;
                    proposal?: {
                        proposal?: {
                            type?: import("../types/types").SignedMsgType | undefined;
                            height?: string | undefined;
                            round?: number | undefined;
                            pol_round?: number | undefined;
                            block_id?: {
                                hash?: Uint8Array | undefined;
                                part_set_header?: {
                                    total?: number | undefined;
                                    hash?: Uint8Array | undefined;
                                } | undefined;
                            } | undefined;
                            timestamp?: {
                                seconds?: string | undefined;
                                nanos?: number | undefined;
                            } | undefined;
                            signature?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    proposal_pol?: {
                        height?: string | undefined;
                        proposal_pol_round?: number | undefined;
                        proposal_pol?: {
                            bits?: string | undefined;
                            elems?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                    block_part?: {
                        height?: string | undefined;
                        round?: number | undefined;
                        part?: {
                            index?: number | undefined;
                            bytes?: Uint8Array | undefined;
                            proof?: {
                                total?: string | undefined;
                                index?: string | undefined;
                                leaf_hash?: Uint8Array | undefined;
                                aunts?: Uint8Array[] | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    vote?: {
                        vote?: {
                            type?: import("../types/types").SignedMsgType | undefined;
                            height?: string | undefined;
                            round?: number | undefined;
                            block_id?: {
                                hash?: Uint8Array | undefined;
                                part_set_header?: {
                                    total?: number | undefined;
                                    hash?: Uint8Array | undefined;
                                } | undefined;
                            } | undefined;
                            timestamp?: {
                                seconds?: string | undefined;
                                nanos?: number | undefined;
                            } | undefined;
                            validator_address?: Uint8Array | undefined;
                            validator_index?: number | undefined;
                            signature?: Uint8Array | undefined;
                            extension?: Uint8Array | undefined;
                            extension_signature?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    has_vote?: {
                        height?: string | undefined;
                        round?: number | undefined;
                        type?: import("../types/types").SignedMsgType | undefined;
                        index?: number | undefined;
                    } | undefined;
                    vote_set_maj23?: {
                        height?: string | undefined;
                        round?: number | undefined;
                        type?: import("../types/types").SignedMsgType | undefined;
                        block_id?: {
                            hash?: Uint8Array | undefined;
                            part_set_header?: {
                                total?: number | undefined;
                                hash?: Uint8Array | undefined;
                            } | undefined;
                        } | undefined;
                    } | undefined;
                    vote_set_bits?: {
                        height?: string | undefined;
                        round?: number | undefined;
                        type?: import("../types/types").SignedMsgType | undefined;
                        block_id?: {
                            hash?: Uint8Array | undefined;
                            part_set_header?: {
                                total?: number | undefined;
                                hash?: Uint8Array | undefined;
                            } | undefined;
                        } | undefined;
                        votes?: {
                            bits?: string | undefined;
                            elems?: string[] | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined;
                peer_id?: string | undefined;
            } | undefined;
            timeout_info?: {
                duration?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                height?: string | undefined;
                round?: number | undefined;
                step?: number | undefined;
            } | undefined;
            end_height?: {
                height?: string | undefined;
            } | undefined;
        } | undefined;
    } | undefined): TimedWALMessage;
    fromPartial(object: DeepPartial<TimedWALMessage>): TimedWALMessage;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=wal.d.ts.map