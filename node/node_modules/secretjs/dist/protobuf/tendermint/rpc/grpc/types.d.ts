import * as _m0 from "protobufjs/minimal";
import { ExecTxResult, ResponseCheckTx } from "../../abci/types";
export declare const protobufPackage = "tendermint.rpc.grpc";
export interface RequestPing {
}
export interface RequestBroadcastTx {
    tx: Uint8Array;
}
export interface ResponsePing {
}
export interface ResponseBroadcastTx {
    check_tx?: ResponseCheckTx | undefined;
    tx_result?: ExecTxResult | undefined;
}
export declare const RequestPing: {
    encode(_: RequestPing, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RequestPing;
    fromJSON(_: any): RequestPing;
    toJSON(_: RequestPing): unknown;
    create(base?: {} | undefined): RequestPing;
    fromPartial(_: DeepPartial<RequestPing>): RequestPing;
};
export declare const RequestBroadcastTx: {
    encode(message: RequestBroadcastTx, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RequestBroadcastTx;
    fromJSON(object: any): RequestBroadcastTx;
    toJSON(message: RequestBroadcastTx): unknown;
    create(base?: {
        tx?: Uint8Array | undefined;
    } | undefined): RequestBroadcastTx;
    fromPartial(object: DeepPartial<RequestBroadcastTx>): RequestBroadcastTx;
};
export declare const ResponsePing: {
    encode(_: ResponsePing, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ResponsePing;
    fromJSON(_: any): ResponsePing;
    toJSON(_: ResponsePing): unknown;
    create(base?: {} | undefined): ResponsePing;
    fromPartial(_: DeepPartial<ResponsePing>): ResponsePing;
};
export declare const ResponseBroadcastTx: {
    encode(message: ResponseBroadcastTx, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ResponseBroadcastTx;
    fromJSON(object: any): ResponseBroadcastTx;
    toJSON(message: ResponseBroadcastTx): unknown;
    create(base?: {
        check_tx?: {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gas_wanted?: string | undefined;
            gas_used?: string | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        } | undefined;
        tx_result?: {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gas_wanted?: string | undefined;
            gas_used?: string | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        } | undefined;
    } | undefined): ResponseBroadcastTx;
    fromPartial(object: DeepPartial<ResponseBroadcastTx>): ResponseBroadcastTx;
};
/**
 * BroadcastAPI
 *
 * Deprecated: This API will be superseded by a more comprehensive gRPC-based
 * broadcast API, and is scheduled for removal after v0.38.
 */
export interface BroadcastAPI {
    Ping(request: RequestPing): Promise<ResponsePing>;
    BroadcastTx(request: RequestBroadcastTx): Promise<ResponseBroadcastTx>;
}
export declare const BroadcastAPIServiceName = "tendermint.rpc.grpc.BroadcastAPI";
export declare class BroadcastAPIClientImpl implements BroadcastAPI {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Ping(request: RequestPing): Promise<ResponsePing>;
    BroadcastTx(request: RequestBroadcastTx): Promise<ResponseBroadcastTx>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=types.d.ts.map