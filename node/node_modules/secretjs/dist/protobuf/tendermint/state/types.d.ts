import * as _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Event, ExecTxResult, ResponseFinalizeBlock, ValidatorUpdate } from "../abci/types";
import { ConsensusParams } from "../types/params";
import { BlockID } from "../types/types";
import { ValidatorSet } from "../types/validator";
import { Consensus } from "../version/types";
export declare const protobufPackage = "tendermint.state";
/**
 * LegacyABCIResponses retains the responses
 * of the legacy ABCI calls during block processing.
 * Note ReponseDeliverTx is renamed to ExecTxResult but they are semantically the same
 * Kept for backwards compatibility for versions prior to v0.38
 */
export interface LegacyABCIResponses {
    deliver_txs: ExecTxResult[];
    end_block?: ResponseEndBlock | undefined;
    begin_block?: ResponseBeginBlock | undefined;
}
/** ResponseBeginBlock is kept for backwards compatibility for versions prior to v0.38 */
export interface ResponseBeginBlock {
    events: Event[];
}
/** ResponseEndBlock is kept for backwards compatibility for versions prior to v0.38 */
export interface ResponseEndBlock {
    validator_updates: ValidatorUpdate[];
    consensus_param_updates?: ConsensusParams | undefined;
    events: Event[];
}
/** ValidatorsInfo represents the latest validator set, or the last height it changed */
export interface ValidatorsInfo {
    validator_set?: ValidatorSet | undefined;
    last_height_changed: string;
}
/** ConsensusParamsInfo represents the latest consensus params, or the last height it changed */
export interface ConsensusParamsInfo {
    consensus_params?: ConsensusParams | undefined;
    last_height_changed: string;
}
export interface ABCIResponsesInfo {
    legacy_abci_responses?: LegacyABCIResponses | undefined;
    height: string;
    response_finalize_block?: ResponseFinalizeBlock | undefined;
}
export interface Version {
    consensus?: Consensus | undefined;
    software: string;
}
export interface State {
    version?: Version | undefined;
    /** immutable */
    chain_id: string;
    initial_height: string;
    /** LastBlockHeight=0 at genesis (ie. block(H=0) does not exist) */
    last_block_height: string;
    last_block_id?: BlockID | undefined;
    last_block_time?: Timestamp | undefined;
    /**
     * LastValidators is used to validate block.LastCommit.
     * Validators are persisted to the database separately every time they change,
     * so we can query for historical validator sets.
     * Note that if s.LastBlockHeight causes a valset change,
     * we set s.LastHeightValidatorsChanged = s.LastBlockHeight + 1 + 1
     * Extra +1 due to nextValSet delay.
     */
    next_validators?: ValidatorSet | undefined;
    validators?: ValidatorSet | undefined;
    last_validators?: ValidatorSet | undefined;
    last_height_validators_changed: string;
    /**
     * Consensus parameters used for validating blocks.
     * Changes returned by EndBlock and updated after Commit.
     */
    consensus_params?: ConsensusParams | undefined;
    last_height_consensus_params_changed: string;
    /** Merkle root of the results from executing prev block */
    last_results_hash: Uint8Array;
    /** the latest AppHash we've received from calling abci.Commit() */
    app_hash: Uint8Array;
}
export declare const LegacyABCIResponses: {
    encode(message: LegacyABCIResponses, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): LegacyABCIResponses;
    fromJSON(object: any): LegacyABCIResponses;
    toJSON(message: LegacyABCIResponses): unknown;
    create(base?: {
        deliver_txs?: {
            code?: number | undefined;
            data?: Uint8Array | undefined;
            log?: string | undefined;
            info?: string | undefined;
            gas_wanted?: string | undefined;
            gas_used?: string | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            codespace?: string | undefined;
        }[] | undefined;
        end_block?: {
            validator_updates?: {
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: string | undefined;
            }[] | undefined;
            consensus_param_updates?: {
                block?: {
                    max_bytes?: string | undefined;
                    max_gas?: string | undefined;
                } | undefined;
                evidence?: {
                    max_age_num_blocks?: string | undefined;
                    max_age_duration?: {
                        seconds?: string | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    max_bytes?: string | undefined;
                } | undefined;
                validator?: {
                    pub_key_types?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: string | undefined;
                } | undefined;
                abci?: {
                    vote_extensions_enable_height?: string | undefined;
                } | undefined;
            } | undefined;
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
        } | undefined;
        begin_block?: {
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
        } | undefined;
    } | undefined): LegacyABCIResponses;
    fromPartial(object: DeepPartial<LegacyABCIResponses>): LegacyABCIResponses;
};
export declare const ResponseBeginBlock: {
    encode(message: ResponseBeginBlock, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ResponseBeginBlock;
    fromJSON(object: any): ResponseBeginBlock;
    toJSON(message: ResponseBeginBlock): unknown;
    create(base?: {
        events?: {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
    } | undefined): ResponseBeginBlock;
    fromPartial(object: DeepPartial<ResponseBeginBlock>): ResponseBeginBlock;
};
export declare const ResponseEndBlock: {
    encode(message: ResponseEndBlock, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ResponseEndBlock;
    fromJSON(object: any): ResponseEndBlock;
    toJSON(message: ResponseEndBlock): unknown;
    create(base?: {
        validator_updates?: {
            pub_key?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            power?: string | undefined;
        }[] | undefined;
        consensus_param_updates?: {
            block?: {
                max_bytes?: string | undefined;
                max_gas?: string | undefined;
            } | undefined;
            evidence?: {
                max_age_num_blocks?: string | undefined;
                max_age_duration?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                max_bytes?: string | undefined;
            } | undefined;
            validator?: {
                pub_key_types?: string[] | undefined;
            } | undefined;
            version?: {
                app?: string | undefined;
            } | undefined;
            abci?: {
                vote_extensions_enable_height?: string | undefined;
            } | undefined;
        } | undefined;
        events?: {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
                index?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
    } | undefined): ResponseEndBlock;
    fromPartial(object: DeepPartial<ResponseEndBlock>): ResponseEndBlock;
};
export declare const ValidatorsInfo: {
    encode(message: ValidatorsInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ValidatorsInfo;
    fromJSON(object: any): ValidatorsInfo;
    toJSON(message: ValidatorsInfo): unknown;
    create(base?: {
        validator_set?: {
            validators?: {
                address?: Uint8Array | undefined;
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                voting_power?: string | undefined;
                proposer_priority?: string | undefined;
            }[] | undefined;
            proposer?: {
                address?: Uint8Array | undefined;
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                voting_power?: string | undefined;
                proposer_priority?: string | undefined;
            } | undefined;
            total_voting_power?: string | undefined;
        } | undefined;
        last_height_changed?: string | undefined;
    } | undefined): ValidatorsInfo;
    fromPartial(object: DeepPartial<ValidatorsInfo>): ValidatorsInfo;
};
export declare const ConsensusParamsInfo: {
    encode(message: ConsensusParamsInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ConsensusParamsInfo;
    fromJSON(object: any): ConsensusParamsInfo;
    toJSON(message: ConsensusParamsInfo): unknown;
    create(base?: {
        consensus_params?: {
            block?: {
                max_bytes?: string | undefined;
                max_gas?: string | undefined;
            } | undefined;
            evidence?: {
                max_age_num_blocks?: string | undefined;
                max_age_duration?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                max_bytes?: string | undefined;
            } | undefined;
            validator?: {
                pub_key_types?: string[] | undefined;
            } | undefined;
            version?: {
                app?: string | undefined;
            } | undefined;
            abci?: {
                vote_extensions_enable_height?: string | undefined;
            } | undefined;
        } | undefined;
        last_height_changed?: string | undefined;
    } | undefined): ConsensusParamsInfo;
    fromPartial(object: DeepPartial<ConsensusParamsInfo>): ConsensusParamsInfo;
};
export declare const ABCIResponsesInfo: {
    encode(message: ABCIResponsesInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ABCIResponsesInfo;
    fromJSON(object: any): ABCIResponsesInfo;
    toJSON(message: ABCIResponsesInfo): unknown;
    create(base?: {
        legacy_abci_responses?: {
            deliver_txs?: {
                code?: number | undefined;
                data?: Uint8Array | undefined;
                log?: string | undefined;
                info?: string | undefined;
                gas_wanted?: string | undefined;
                gas_used?: string | undefined;
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
                codespace?: string | undefined;
            }[] | undefined;
            end_block?: {
                validator_updates?: {
                    pub_key?: {
                        ed25519?: Uint8Array | undefined;
                        secp256k1?: Uint8Array | undefined;
                    } | undefined;
                    power?: string | undefined;
                }[] | undefined;
                consensus_param_updates?: {
                    block?: {
                        max_bytes?: string | undefined;
                        max_gas?: string | undefined;
                    } | undefined;
                    evidence?: {
                        max_age_num_blocks?: string | undefined;
                        max_age_duration?: {
                            seconds?: string | undefined;
                            nanos?: number | undefined;
                        } | undefined;
                        max_bytes?: string | undefined;
                    } | undefined;
                    validator?: {
                        pub_key_types?: string[] | undefined;
                    } | undefined;
                    version?: {
                        app?: string | undefined;
                    } | undefined;
                    abci?: {
                        vote_extensions_enable_height?: string | undefined;
                    } | undefined;
                } | undefined;
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
            begin_block?: {
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
        } | undefined;
        height?: string | undefined;
        response_finalize_block?: {
            events?: {
                type?: string | undefined;
                attributes?: {
                    key?: string | undefined;
                    value?: string | undefined;
                    index?: boolean | undefined;
                }[] | undefined;
            }[] | undefined;
            tx_results?: {
                code?: number | undefined;
                data?: Uint8Array | undefined;
                log?: string | undefined;
                info?: string | undefined;
                gas_wanted?: string | undefined;
                gas_used?: string | undefined;
                events?: {
                    type?: string | undefined;
                    attributes?: {
                        key?: string | undefined;
                        value?: string | undefined;
                        index?: boolean | undefined;
                    }[] | undefined;
                }[] | undefined;
                codespace?: string | undefined;
            }[] | undefined;
            validator_updates?: {
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                power?: string | undefined;
            }[] | undefined;
            consensus_param_updates?: {
                block?: {
                    max_bytes?: string | undefined;
                    max_gas?: string | undefined;
                } | undefined;
                evidence?: {
                    max_age_num_blocks?: string | undefined;
                    max_age_duration?: {
                        seconds?: string | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                    max_bytes?: string | undefined;
                } | undefined;
                validator?: {
                    pub_key_types?: string[] | undefined;
                } | undefined;
                version?: {
                    app?: string | undefined;
                } | undefined;
                abci?: {
                    vote_extensions_enable_height?: string | undefined;
                } | undefined;
            } | undefined;
            app_hash?: Uint8Array | undefined;
        } | undefined;
    } | undefined): ABCIResponsesInfo;
    fromPartial(object: DeepPartial<ABCIResponsesInfo>): ABCIResponsesInfo;
};
export declare const Version: {
    encode(message: Version, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Version;
    fromJSON(object: any): Version;
    toJSON(message: Version): unknown;
    create(base?: {
        consensus?: {
            block?: string | undefined;
            app?: string | undefined;
        } | undefined;
        software?: string | undefined;
    } | undefined): Version;
    fromPartial(object: DeepPartial<Version>): Version;
};
export declare const State: {
    encode(message: State, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): State;
    fromJSON(object: any): State;
    toJSON(message: State): unknown;
    create(base?: {
        version?: {
            consensus?: {
                block?: string | undefined;
                app?: string | undefined;
            } | undefined;
            software?: string | undefined;
        } | undefined;
        chain_id?: string | undefined;
        initial_height?: string | undefined;
        last_block_height?: string | undefined;
        last_block_id?: {
            hash?: Uint8Array | undefined;
            part_set_header?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        last_block_time?: {
            seconds?: string | undefined;
            nanos?: number | undefined;
        } | undefined;
        next_validators?: {
            validators?: {
                address?: Uint8Array | undefined;
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                voting_power?: string | undefined;
                proposer_priority?: string | undefined;
            }[] | undefined;
            proposer?: {
                address?: Uint8Array | undefined;
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                voting_power?: string | undefined;
                proposer_priority?: string | undefined;
            } | undefined;
            total_voting_power?: string | undefined;
        } | undefined;
        validators?: {
            validators?: {
                address?: Uint8Array | undefined;
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                voting_power?: string | undefined;
                proposer_priority?: string | undefined;
            }[] | undefined;
            proposer?: {
                address?: Uint8Array | undefined;
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                voting_power?: string | undefined;
                proposer_priority?: string | undefined;
            } | undefined;
            total_voting_power?: string | undefined;
        } | undefined;
        last_validators?: {
            validators?: {
                address?: Uint8Array | undefined;
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                voting_power?: string | undefined;
                proposer_priority?: string | undefined;
            }[] | undefined;
            proposer?: {
                address?: Uint8Array | undefined;
                pub_key?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                voting_power?: string | undefined;
                proposer_priority?: string | undefined;
            } | undefined;
            total_voting_power?: string | undefined;
        } | undefined;
        last_height_validators_changed?: string | undefined;
        consensus_params?: {
            block?: {
                max_bytes?: string | undefined;
                max_gas?: string | undefined;
            } | undefined;
            evidence?: {
                max_age_num_blocks?: string | undefined;
                max_age_duration?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                max_bytes?: string | undefined;
            } | undefined;
            validator?: {
                pub_key_types?: string[] | undefined;
            } | undefined;
            version?: {
                app?: string | undefined;
            } | undefined;
            abci?: {
                vote_extensions_enable_height?: string | undefined;
            } | undefined;
        } | undefined;
        last_height_consensus_params_changed?: string | undefined;
        last_results_hash?: Uint8Array | undefined;
        app_hash?: Uint8Array | undefined;
    } | undefined): State;
    fromPartial(object: DeepPartial<State>): State;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=types.d.ts.map