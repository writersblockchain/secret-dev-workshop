import * as _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { SignedMsgType } from "./types";
export declare const protobufPackage = "tendermint.types";
export interface CanonicalBlockID {
    hash: Uint8Array;
    part_set_header?: CanonicalPartSetHeader | undefined;
}
export interface CanonicalPartSetHeader {
    total: number;
    hash: Uint8Array;
}
export interface CanonicalProposal {
    /** type alias for byte */
    type: SignedMsgType;
    /** canonicalization requires fixed size encoding here */
    height: string;
    /** canonicalization requires fixed size encoding here */
    round: string;
    pol_round: string;
    block_id?: CanonicalBlockID | undefined;
    timestamp?: Timestamp | undefined;
    chain_id: string;
}
export interface CanonicalVote {
    /** type alias for byte */
    type: SignedMsgType;
    /** canonicalization requires fixed size encoding here */
    height: string;
    /** canonicalization requires fixed size encoding here */
    round: string;
    block_id?: CanonicalBlockID | undefined;
    timestamp?: Timestamp | undefined;
    chain_id: string;
}
/**
 * CanonicalVoteExtension provides us a way to serialize a vote extension from
 * a particular validator such that we can sign over those serialized bytes.
 */
export interface CanonicalVoteExtension {
    extension: Uint8Array;
    height: string;
    round: string;
    chain_id: string;
}
export declare const CanonicalBlockID: {
    encode(message: CanonicalBlockID, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CanonicalBlockID;
    fromJSON(object: any): CanonicalBlockID;
    toJSON(message: CanonicalBlockID): unknown;
    create(base?: {
        hash?: Uint8Array | undefined;
        part_set_header?: {
            total?: number | undefined;
            hash?: Uint8Array | undefined;
        } | undefined;
    } | undefined): CanonicalBlockID;
    fromPartial(object: DeepPartial<CanonicalBlockID>): CanonicalBlockID;
};
export declare const CanonicalPartSetHeader: {
    encode(message: CanonicalPartSetHeader, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CanonicalPartSetHeader;
    fromJSON(object: any): CanonicalPartSetHeader;
    toJSON(message: CanonicalPartSetHeader): unknown;
    create(base?: {
        total?: number | undefined;
        hash?: Uint8Array | undefined;
    } | undefined): CanonicalPartSetHeader;
    fromPartial(object: DeepPartial<CanonicalPartSetHeader>): CanonicalPartSetHeader;
};
export declare const CanonicalProposal: {
    encode(message: CanonicalProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CanonicalProposal;
    fromJSON(object: any): CanonicalProposal;
    toJSON(message: CanonicalProposal): unknown;
    create(base?: {
        type?: SignedMsgType | undefined;
        height?: string | undefined;
        round?: string | undefined;
        pol_round?: string | undefined;
        block_id?: {
            hash?: Uint8Array | undefined;
            part_set_header?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        timestamp?: {
            seconds?: string | undefined;
            nanos?: number | undefined;
        } | undefined;
        chain_id?: string | undefined;
    } | undefined): CanonicalProposal;
    fromPartial(object: DeepPartial<CanonicalProposal>): CanonicalProposal;
};
export declare const CanonicalVote: {
    encode(message: CanonicalVote, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CanonicalVote;
    fromJSON(object: any): CanonicalVote;
    toJSON(message: CanonicalVote): unknown;
    create(base?: {
        type?: SignedMsgType | undefined;
        height?: string | undefined;
        round?: string | undefined;
        block_id?: {
            hash?: Uint8Array | undefined;
            part_set_header?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        timestamp?: {
            seconds?: string | undefined;
            nanos?: number | undefined;
        } | undefined;
        chain_id?: string | undefined;
    } | undefined): CanonicalVote;
    fromPartial(object: DeepPartial<CanonicalVote>): CanonicalVote;
};
export declare const CanonicalVoteExtension: {
    encode(message: CanonicalVoteExtension, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CanonicalVoteExtension;
    fromJSON(object: any): CanonicalVoteExtension;
    toJSON(message: CanonicalVoteExtension): unknown;
    create(base?: {
        extension?: Uint8Array | undefined;
        height?: string | undefined;
        round?: string | undefined;
        chain_id?: string | undefined;
    } | undefined): CanonicalVoteExtension;
    fromPartial(object: DeepPartial<CanonicalVoteExtension>): CanonicalVoteExtension;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=canonical.d.ts.map