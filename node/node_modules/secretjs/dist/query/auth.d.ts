import { BaseAccount, ModuleAccount } from "../grpc_gateway/cosmos/auth/v1beta1/auth.pb";
import { QueryAccountsRequest, QueryAccountRequest, QueryModuleAccountsRequest, QueryModuleAccountsResponse, QueryModuleAccountByNameRequest, Bech32PrefixRequest, Bech32PrefixResponse, AddressBytesToStringRequest, AddressBytesToStringResponse, AddressStringToBytesRequest, AddressStringToBytesResponse, QueryAccountAddressByIDRequest, QueryAccountAddressByIDResponse, QueryAccountInfoRequest, QueryAccountInfoResponse, QueryParamsRequest, QueryParamsResponse } from "../grpc_gateway/cosmos/auth/v1beta1/query.pb";
import { PageResponse } from "../grpc_gateway/cosmos/base/query/v1beta1/pagination.pb";
import { ContinuousVestingAccount, DelayedVestingAccount, PermanentLockedAccount, PeriodicVestingAccount } from "../grpc_gateway/cosmos/vesting/v1beta1/vesting.pb";
export declare type Account = {
    "@type": "/cosmos.auth.v1beta1.BaseAccount" | "/cosmos.auth.v1beta1.ModuleAccount" | "/cosmos.vesting.v1beta1.ContinuousVestingAccount" | "/cosmos.vesting.v1beta1.DelayedVestingAccount" | "/cosmos.vesting.v1beta1.PeriodicVestingAccount" | "/cosmos.vesting.v1beta1.PermanentLockedAccount";
} & (BaseAccount | ModuleAccount | ContinuousVestingAccount | DelayedVestingAccount | PeriodicVestingAccount | PermanentLockedAccount);
/** AuthQuerier is the query interface for the x/auth module */
export declare class AuthQuerier {
    private url;
    constructor(url: string);
    accounts(req: QueryAccountsRequest, headers?: HeadersInit): Promise<{
        accounts?: Account[];
        pagination?: PageResponse;
    }>;
    account(req: QueryAccountRequest, headers?: HeadersInit): Promise<{
        account?: Account;
    }>;
    params(req: QueryParamsRequest, headers?: HeadersInit): Promise<QueryParamsResponse>;
    moduleAccounts(req: QueryModuleAccountsRequest, headers?: HeadersInit): Promise<QueryModuleAccountsResponse>;
    moduleAccountByName(req: QueryModuleAccountByNameRequest, headers?: HeadersInit): Promise<{
        account?: Account;
    }>;
    bech32Prefix(req: Bech32PrefixRequest, headers?: HeadersInit): Promise<Bech32PrefixResponse>;
    addressBytesToString(req: AddressBytesToStringRequest, headers?: HeadersInit): Promise<AddressBytesToStringResponse>;
    addressStringToBytes(req: AddressStringToBytesRequest, headers?: HeadersInit): Promise<AddressStringToBytesResponse>;
    accountAddressByID(req: QueryAccountAddressByIDRequest, headers?: HeadersInit): Promise<QueryAccountAddressByIDResponse>;
    accountInfo(req: QueryAccountInfoRequest, headers?: HeadersInit): Promise<QueryAccountInfoResponse>;
}
//# sourceMappingURL=auth.d.ts.map