import { AminoMsg, Msg, ProtoMsg } from "./types";
import { Coin } from "../protobuf/cosmos/base/v1beta1/coin";
import { MsgVote as MsgVoteParams, MsgVoteWeighted as MsgVoteWeightedParams, MsgCancelProposal as MsgCancelProposalParams, MsgDeposit as MsgDepositParams } from "../protobuf/cosmos/gov/v1/tx";
export { MsgVote as MsgVoteParams, MsgVoteWeighted as MsgVoteWeightedParams, MsgCancelProposal as MsgCancelProposalParams, MsgDeposit as MsgDepositParams, } from "../protobuf/cosmos/gov/v1/tx";
export { VoteOption, ProposalStatus } from "../protobuf/cosmos/gov/v1/gov";
export declare enum ProposalType {
    TextProposal = "TextProposal",
    CommunityPoolSpendProposal = "CommunityPoolSpendProposal",
    /**
     * @see {@link https://docs.scrt.network/guides/governance} for possible subspaces, keys and values.
     */
    ParameterChangeProposal = "ParameterChangeProposal",
    /** Not supported with Amino signer. */
    ClientUpdateProposal = "ClientUpdateProposal",
    /** Not supported with Amino signer. */
    UpgradeProposal = "UpgradeProposal",
    SoftwareUpgradeProposal = "SoftwareUpgradeProposal",
    CancelSoftwareUpgradeProposal = "CancelSoftwareUpgradeProposal"
}
export declare type ProposalContent = import("../protobuf/cosmos/gov/v1beta1/gov").TextProposal | import("../protobuf/cosmos/distribution/v1beta1/distribution").CommunityPoolSpendProposal | import("../protobuf/cosmos/params/v1beta1/params").ParameterChangeProposal | import("../protobuf/ibc/core/client/v1/client").ClientUpdateProposal | import("../protobuf/ibc/core/client/v1/client").UpgradeProposal | import("../protobuf/cosmos/upgrade/v1beta1/upgrade").SoftwareUpgradeProposal | import("../protobuf/cosmos/upgrade/v1beta1/upgrade").CancelSoftwareUpgradeProposal;
export declare type ParamChange = {
    subspace: string;
    key: string;
    value: string;
};
export interface MsgSubmitProposalParams {
    /** messages are the arbitrary messages to be executed if proposal passes. */
    messages: Msg[];
    /** initial_deposit is the deposit value that must be paid at proposal submission. */
    initial_deposit: Coin[];
    /** proposer is the account address of the proposer. */
    proposer: string;
    /** metadata is any arbitrary metadata attached to the proposal. */
    metadata: string;
    /**
     * title is the title of the proposal.
     *
     * Since: cosmos-sdk 0.47
     */
    title: string;
    /**
     * summary is the summary of the proposal
     *
     * Since: cosmos-sdk 0.47
     */
    summary: string;
    /**
     * expedited defines if the proposal is expedited or not
     *
     * Since: cosmos-sdk 0.50
     */
    expedited: boolean;
}
/**
 * MsgSubmitProposal defines an sdk.Msg type that supports submitting arbitrary
 * proposal Content.
 */
export declare class MsgSubmitProposal implements Msg {
    params: MsgSubmitProposalParams;
    constructor(params: MsgSubmitProposalParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
export declare class MsgVote implements Msg {
    params: MsgVoteParams;
    constructor(params: MsgVoteParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/** MsgVoteWeighted defines a message to cast a vote, with an option to split the vote. */
export declare class MsgVoteWeighted implements Msg {
    params: MsgVoteWeightedParams;
    constructor(params: MsgVoteWeightedParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/** MsgDeposit defines a message to submit a deposit to an existing proposal. */
export declare class MsgDeposit implements Msg {
    params: MsgDepositParams;
    constructor(params: MsgDepositParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/** MsgDeposit defines a message to submit a deposit to an existing proposal. */
export declare class MsgCancelProposal implements Msg {
    params: MsgCancelProposalParams;
    constructor(params: MsgCancelProposalParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
export interface MsgExecLegacyContentParams {
    type: ProposalType;
    initial_deposit: Coin[];
    proposer: string;
    content: ProposalContent;
    authority: string;
}
/** MsgDeposit defines a message to submit a deposit to an existing proposal. */
export declare class MsgExecLegacyContent implements Msg {
    params: MsgExecLegacyContentParams;
    constructor(params: MsgExecLegacyContentParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
//# sourceMappingURL=gov.d.ts.map