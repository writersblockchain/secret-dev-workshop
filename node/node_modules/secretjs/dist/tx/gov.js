"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgExecLegacyContent = exports.MsgCancelProposal = exports.MsgDeposit = exports.MsgVoteWeighted = exports.MsgVote = exports.MsgSubmitProposal = exports.ProposalType = exports.ProposalStatus = exports.VoteOption = exports.MsgDepositParams = exports.MsgCancelProposalParams = exports.MsgVoteWeightedParams = exports.MsgVoteParams = void 0;
const any_1 = require("../protobuf/google/protobuf/any");
const tx_1 = require("../protobuf/cosmos/gov/v1/tx");
var tx_2 = require("../protobuf/cosmos/gov/v1/tx");
Object.defineProperty(exports, "MsgVoteParams", { enumerable: true, get: function () { return tx_2.MsgVote; } });
Object.defineProperty(exports, "MsgVoteWeightedParams", { enumerable: true, get: function () { return tx_2.MsgVoteWeighted; } });
Object.defineProperty(exports, "MsgCancelProposalParams", { enumerable: true, get: function () { return tx_2.MsgCancelProposal; } });
Object.defineProperty(exports, "MsgDepositParams", { enumerable: true, get: function () { return tx_2.MsgDeposit; } });
var gov_1 = require("../protobuf/cosmos/gov/v1/gov");
Object.defineProperty(exports, "VoteOption", { enumerable: true, get: function () { return gov_1.VoteOption; } });
Object.defineProperty(exports, "ProposalStatus", { enumerable: true, get: function () { return gov_1.ProposalStatus; } });
var ProposalType;
(function (ProposalType) {
    ProposalType["TextProposal"] = "TextProposal";
    ProposalType["CommunityPoolSpendProposal"] = "CommunityPoolSpendProposal";
    /**
     * @see {@link https://docs.scrt.network/guides/governance} for possible subspaces, keys and values.
     */
    ProposalType["ParameterChangeProposal"] = "ParameterChangeProposal";
    /** Not supported with Amino signer. */
    ProposalType["ClientUpdateProposal"] = "ClientUpdateProposal";
    /** Not supported with Amino signer. */
    ProposalType["UpgradeProposal"] = "UpgradeProposal";
    ProposalType["SoftwareUpgradeProposal"] = "SoftwareUpgradeProposal";
    ProposalType["CancelSoftwareUpgradeProposal"] = "CancelSoftwareUpgradeProposal";
})(ProposalType = exports.ProposalType || (exports.ProposalType = {}));
/**
 * MsgSubmitProposal defines an sdk.Msg type that supports submitting arbitrary
 * proposal Content.
 */
class MsgSubmitProposal {
    constructor(params) {
        this.params = params;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            let msgContent = Object.assign(Object.assign({}, this.params), { messages: yield Promise.all(this.params.messages.map((msg) => __awaiter(this, void 0, void 0, function* () {
                    const protoMsg = yield msg.toProto();
                    return any_1.Any.fromPartial({
                        type_url: protoMsg.type_url,
                        value: protoMsg.encode(),
                    });
                }))) });
            return {
                type_url: `/cosmos.gov.v1.MsgSubmitProposal`,
                value: msgContent,
                encode: () => tx_1.MsgSubmitProposal.encode(msgContent).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Not implemented. Please use WalletProto");
        });
    }
}
exports.MsgSubmitProposal = MsgSubmitProposal;
class MsgVote {
    constructor(params) {
        this.params = params;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: `/cosmos.gov.v1.MsgVote`,
                value: this.params,
                encode: () => tx_1.MsgVote.encode(this.params).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type: "cosmos-sdk/MsgVote",
                value: this.params,
            };
        });
    }
}
exports.MsgVote = MsgVote;
/** MsgVoteWeighted defines a message to cast a vote, with an option to split the vote. */
class MsgVoteWeighted {
    constructor(params) {
        this.params = params;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: `/cosmos.gov.v1.MsgVoteWeighted`,
                value: this.params,
                encode: () => tx_1.MsgVoteWeighted.encode(this.params).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type: "cosmos-sdk/MsgVoteWeighted",
                value: this.params,
            };
        });
    }
}
exports.MsgVoteWeighted = MsgVoteWeighted;
/** MsgDeposit defines a message to submit a deposit to an existing proposal. */
class MsgDeposit {
    constructor(params) {
        this.params = params;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: `/cosmos.gov.v1.MsgDeposit`,
                value: this.params,
                encode: () => tx_1.MsgDeposit.encode(this.params).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type: "cosmos-sdk/MsgDeposit",
                value: this.params,
            };
        });
    }
}
exports.MsgDeposit = MsgDeposit;
/** MsgDeposit defines a message to submit a deposit to an existing proposal. */
class MsgCancelProposal {
    constructor(params) {
        this.params = params;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: `/cosmos.gov.v1.MsgCancelProposal`,
                value: this.params,
                encode: () => tx_1.MsgCancelProposal.encode(this.params).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type: "cosmos-sdk/MsgCancelProposal",
                value: this.params,
            };
        });
    }
}
exports.MsgCancelProposal = MsgCancelProposal;
/** MsgDeposit defines a message to submit a deposit to an existing proposal. */
class MsgExecLegacyContent {
    constructor(params) {
        this.params = params;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            let content;
            switch (this.params.type) {
                case ProposalType.TextProposal:
                    const { TextProposal } = yield Promise.resolve().then(() => __importStar(require("../protobuf/cosmos/gov/v1beta1/gov")));
                    content = any_1.Any.fromPartial({
                        type_url: "/cosmos.gov.v1beta1.TextProposal",
                        value: TextProposal.encode(TextProposal.fromPartial(this.params.content)).finish(),
                    });
                    break;
                case ProposalType.CommunityPoolSpendProposal:
                    const { CommunityPoolSpendProposal } = yield Promise.resolve().then(() => __importStar(require("../protobuf/cosmos/distribution/v1beta1/distribution")));
                    content = any_1.Any.fromPartial({
                        type_url: "/cosmos.distribution.v1beta1.CommunityPoolSpendProposal",
                        value: CommunityPoolSpendProposal.encode(CommunityPoolSpendProposal.fromPartial(this.params.content)).finish(),
                    });
                    break;
                case ProposalType.ParameterChangeProposal:
                    const { ParameterChangeProposal } = yield Promise.resolve().then(() => __importStar(require("../protobuf/cosmos/params/v1beta1/params")));
                    content = any_1.Any.fromPartial({
                        type_url: "/cosmos.params.v1beta1.ParameterChangeProposal",
                        value: ParameterChangeProposal.encode(ParameterChangeProposal.fromPartial(this.params.content)).finish(),
                    });
                    break;
                case ProposalType.ClientUpdateProposal:
                    const { ClientUpdateProposal } = yield Promise.resolve().then(() => __importStar(require("../protobuf/ibc/core/client/v1/client")));
                    content = any_1.Any.fromPartial({
                        type_url: "/ibc.core.client.v1.ClientUpdateProposal",
                        value: ClientUpdateProposal.encode(ClientUpdateProposal.fromPartial(this.params.content)).finish(),
                    });
                    break;
                case ProposalType.UpgradeProposal:
                    const { UpgradeProposal } = yield Promise.resolve().then(() => __importStar(require("../protobuf/ibc/core/client/v1/client")));
                    content = any_1.Any.fromPartial({
                        type_url: "/ibc.core.client.v1.UpgradeProposal",
                        value: UpgradeProposal.encode(UpgradeProposal.fromPartial(this.params.content)).finish(),
                    });
                    break;
                case ProposalType.SoftwareUpgradeProposal:
                    const { SoftwareUpgradeProposal } = yield Promise.resolve().then(() => __importStar(require("../protobuf/cosmos/upgrade/v1beta1/upgrade")));
                    content = any_1.Any.fromPartial({
                        type_url: "/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal",
                        value: SoftwareUpgradeProposal.encode(SoftwareUpgradeProposal.fromPartial(this.params.content)).finish(),
                    });
                    break;
                case ProposalType.CancelSoftwareUpgradeProposal:
                    const { CancelSoftwareUpgradeProposal } = yield Promise.resolve().then(() => __importStar(require("../protobuf/cosmos/upgrade/v1beta1/upgrade")));
                    content = any_1.Any.fromPartial({
                        type_url: "/cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal",
                        value: CancelSoftwareUpgradeProposal.encode(CancelSoftwareUpgradeProposal.fromPartial(this.params.content)).finish(),
                    });
                    break;
                default:
                    throw new Error(`Unknown proposal type: "${this.params.type}" - ${JSON.stringify(this.params.content)}`);
            }
            const msgContent = {
                authority: this.params.authority,
                content,
            };
            return {
                type_url: `/cosmos.gov.v1.MsgExecLegacyContent`,
                value: msgContent,
                encode: () => tx_1.MsgExecLegacyContent.encode(msgContent).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Not implemented. Please use WalletProto");
        });
    }
}
exports.MsgExecLegacyContent = MsgExecLegacyContent;
//# sourceMappingURL=gov.js.map