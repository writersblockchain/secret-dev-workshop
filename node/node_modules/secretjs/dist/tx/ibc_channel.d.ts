import { AminoMsg, Msg, ProtoMsg } from "./types";
import { MsgChannelOpenInit as MsgChannelOpenInitParams, MsgChannelOpenTry as MsgChannelOpenTryParams, MsgChannelOpenAck as MsgChannelOpenAckParams, MsgChannelOpenConfirm as MsgChannelOpenConfirmParams, MsgChannelCloseInit as MsgChannelCloseInitParams, MsgChannelCloseConfirm as MsgChannelCloseConfirmParams, MsgRecvPacket as MsgRecvPacketParams, MsgTimeout as MsgTimeoutParams, MsgTimeoutOnClose as MsgTimeoutOnCloseParams, MsgAcknowledgement as MsgAcknowledgementParams, MsgChannelUpgradeInit as MsgChannelUpgradeInitParams, MsgChannelUpgradeTry as MsgChannelUpgradeTryParams, MsgChannelUpgradeAck as MsgChannelUpgradeAckParams, MsgChannelUpgradeOpen as MsgChannelUpgradeOpenParams, MsgChannelUpgradeTimeout as MsgChannelUpgradeTimeoutParams, MsgChannelUpgradeCancel as MsgChannelUpgradeCancelParams, MsgPruneAcknowledgements as MsgPruneAcknowledgementsParams } from "../protobuf/ibc/core/channel/v1/tx";
export { MsgChannelOpenInit as MsgChannelOpenInitParams, MsgChannelOpenTry as MsgChannelOpenTryParams, MsgChannelOpenAck as MsgChannelOpenAckParams, MsgChannelOpenConfirm as MsgChannelOpenConfirmParams, MsgChannelCloseInit as MsgChannelCloseInitParams, MsgChannelCloseConfirm as MsgChannelCloseConfirmParams, MsgRecvPacket as MsgRecvPacketParams, MsgTimeout as MsgTimeoutParams, MsgTimeoutOnClose as MsgTimeoutOnCloseParams, MsgAcknowledgement as MsgAcknowledgementParams, MsgChannelUpgradeInit as MsgChannelUpgradeInitParams, MsgChannelUpgradeTry as MsgChannelUpgradeTryParams, MsgChannelUpgradeAck as MsgChannelUpgradeAckParams, MsgChannelUpgradeOpen as MsgChannelUpgradeOpenParams, MsgChannelUpgradeTimeout as MsgChannelUpgradeTimeoutParams, MsgChannelUpgradeCancel as MsgChannelUpgradeCancelParams, MsgPruneAcknowledgements as MsgPruneAcknowledgementsParams, } from "../protobuf/ibc/core/channel/v1/tx";
/** MsgRecvPacket receives incoming IBC packet */
export declare class MsgRecvPacket implements Msg {
    private msg;
    constructor(msg: MsgRecvPacketParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/** MsgTimeout receives timed-out packet */
export declare class MsgTimeout implements Msg {
    private msg;
    constructor(msg: MsgTimeoutParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/** MsgTimeoutOnClose timed-out packet upon counterparty channel closure. */
export declare class MsgTimeoutOnClose implements Msg {
    private msg;
    constructor(msg: MsgTimeoutOnCloseParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/**
 * MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It
 * is called by a relayer on Chain A.
 */
export declare class MsgChannelOpenInit implements Msg {
    private msg;
    constructor(msg: MsgChannelOpenInitParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/** MsgAcknowledgement receives incoming IBC acknowledgement */
export declare class MsgAcknowledgement implements Msg {
    private msg;
    constructor(msg: MsgAcknowledgementParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/**
 * MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel
 * on Chain B.
 */
export declare class MsgChannelOpenTry implements Msg {
    private msg;
    constructor(msg: MsgChannelOpenTryParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/**
 * MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge
 * the change of channel state to TRYOPEN on Chain B.
 */
export declare class MsgChannelOpenAck implements Msg {
    private msg;
    constructor(msg: MsgChannelOpenAckParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/**
 * MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
 * acknowledge the change of channel state to OPEN on Chain A.
 */
export declare class MsgChannelOpenConfirm implements Msg {
    private msg;
    constructor(msg: MsgChannelOpenConfirmParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/**
 * MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
 * to close a channel with Chain B.
 */
export declare class MsgChannelCloseInit implements Msg {
    private msg;
    constructor(msg: MsgChannelCloseInitParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
/** MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to CLOSED on Chain A. */
export declare class MsgChannelCloseConfirm implements Msg {
    private msg;
    constructor(msg: MsgChannelCloseConfirmParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
export declare class MsgChannelUpgradeInit implements Msg {
    private msg;
    constructor(msg: MsgChannelUpgradeInitParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
export declare class MsgChannelUpgradeTry implements Msg {
    private msg;
    constructor(msg: MsgChannelUpgradeTryParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
export declare class MsgChannelUpgradeAck implements Msg {
    private msg;
    constructor(msg: MsgChannelUpgradeAckParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
export declare class MsgChannelUpgradeOpen implements Msg {
    private msg;
    constructor(msg: MsgChannelUpgradeOpenParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
export declare class MsgChannelUpgradeTimeout implements Msg {
    private msg;
    constructor(msg: MsgChannelUpgradeTimeoutParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
export declare class MsgChannelUpgradeCancel implements Msg {
    private msg;
    constructor(msg: MsgChannelUpgradeCancelParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
export declare class MsgPruneAcknowledgements implements Msg {
    private msg;
    constructor(msg: MsgPruneAcknowledgementsParams);
    toProto(): Promise<ProtoMsg>;
    toAmino(): Promise<AminoMsg>;
}
//# sourceMappingURL=ibc_channel.d.ts.map