"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgPruneAcknowledgements = exports.MsgChannelUpgradeCancel = exports.MsgChannelUpgradeTimeout = exports.MsgChannelUpgradeOpen = exports.MsgChannelUpgradeAck = exports.MsgChannelUpgradeTry = exports.MsgChannelUpgradeInit = exports.MsgChannelCloseConfirm = exports.MsgChannelCloseInit = exports.MsgChannelOpenConfirm = exports.MsgChannelOpenAck = exports.MsgChannelOpenTry = exports.MsgAcknowledgement = exports.MsgChannelOpenInit = exports.MsgTimeoutOnClose = exports.MsgTimeout = exports.MsgRecvPacket = exports.MsgPruneAcknowledgementsParams = exports.MsgChannelUpgradeCancelParams = exports.MsgChannelUpgradeTimeoutParams = exports.MsgChannelUpgradeOpenParams = exports.MsgChannelUpgradeAckParams = exports.MsgChannelUpgradeTryParams = exports.MsgChannelUpgradeInitParams = exports.MsgAcknowledgementParams = exports.MsgTimeoutOnCloseParams = exports.MsgTimeoutParams = exports.MsgRecvPacketParams = exports.MsgChannelCloseConfirmParams = exports.MsgChannelCloseInitParams = exports.MsgChannelOpenConfirmParams = exports.MsgChannelOpenAckParams = exports.MsgChannelOpenTryParams = exports.MsgChannelOpenInitParams = void 0;
const tx_1 = require("../protobuf/ibc/core/channel/v1/tx");
var tx_2 = require("../protobuf/ibc/core/channel/v1/tx");
Object.defineProperty(exports, "MsgChannelOpenInitParams", { enumerable: true, get: function () { return tx_2.MsgChannelOpenInit; } });
Object.defineProperty(exports, "MsgChannelOpenTryParams", { enumerable: true, get: function () { return tx_2.MsgChannelOpenTry; } });
Object.defineProperty(exports, "MsgChannelOpenAckParams", { enumerable: true, get: function () { return tx_2.MsgChannelOpenAck; } });
Object.defineProperty(exports, "MsgChannelOpenConfirmParams", { enumerable: true, get: function () { return tx_2.MsgChannelOpenConfirm; } });
Object.defineProperty(exports, "MsgChannelCloseInitParams", { enumerable: true, get: function () { return tx_2.MsgChannelCloseInit; } });
Object.defineProperty(exports, "MsgChannelCloseConfirmParams", { enumerable: true, get: function () { return tx_2.MsgChannelCloseConfirm; } });
Object.defineProperty(exports, "MsgRecvPacketParams", { enumerable: true, get: function () { return tx_2.MsgRecvPacket; } });
Object.defineProperty(exports, "MsgTimeoutParams", { enumerable: true, get: function () { return tx_2.MsgTimeout; } });
Object.defineProperty(exports, "MsgTimeoutOnCloseParams", { enumerable: true, get: function () { return tx_2.MsgTimeoutOnClose; } });
Object.defineProperty(exports, "MsgAcknowledgementParams", { enumerable: true, get: function () { return tx_2.MsgAcknowledgement; } });
Object.defineProperty(exports, "MsgChannelUpgradeInitParams", { enumerable: true, get: function () { return tx_2.MsgChannelUpgradeInit; } });
Object.defineProperty(exports, "MsgChannelUpgradeTryParams", { enumerable: true, get: function () { return tx_2.MsgChannelUpgradeTry; } });
Object.defineProperty(exports, "MsgChannelUpgradeAckParams", { enumerable: true, get: function () { return tx_2.MsgChannelUpgradeAck; } });
Object.defineProperty(exports, "MsgChannelUpgradeOpenParams", { enumerable: true, get: function () { return tx_2.MsgChannelUpgradeOpen; } });
Object.defineProperty(exports, "MsgChannelUpgradeTimeoutParams", { enumerable: true, get: function () { return tx_2.MsgChannelUpgradeTimeout; } });
Object.defineProperty(exports, "MsgChannelUpgradeCancelParams", { enumerable: true, get: function () { return tx_2.MsgChannelUpgradeCancel; } });
Object.defineProperty(exports, "MsgPruneAcknowledgementsParams", { enumerable: true, get: function () { return tx_2.MsgPruneAcknowledgements; } });
/** MsgRecvPacket receives incoming IBC packet */
class MsgRecvPacket {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgRecvPacket",
                value: this.msg,
                encode: () => tx_1.MsgRecvPacket.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgRecvPacket doesn't support Amino encoding.");
        });
    }
}
exports.MsgRecvPacket = MsgRecvPacket;
/** MsgTimeout receives timed-out packet */
class MsgTimeout {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgTimeout",
                value: this.msg,
                encode: () => tx_1.MsgTimeout.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgTimeout doesn't support Amino encoding.");
        });
    }
}
exports.MsgTimeout = MsgTimeout;
/** MsgTimeoutOnClose timed-out packet upon counterparty channel closure. */
class MsgTimeoutOnClose {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgTimeoutOnClose",
                value: this.msg,
                encode: () => tx_1.MsgTimeoutOnClose.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgTimeoutOnClose doesn't support Amino encoding.");
        });
    }
}
exports.MsgTimeoutOnClose = MsgTimeoutOnClose;
/**
 * MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It
 * is called by a relayer on Chain A.
 */
class MsgChannelOpenInit {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelOpenInit",
                value: this.msg,
                encode: () => tx_1.MsgChannelOpenInit.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelOpenInit doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelOpenInit = MsgChannelOpenInit;
/** MsgAcknowledgement receives incoming IBC acknowledgement */
class MsgAcknowledgement {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgAcknowledgement",
                value: this.msg,
                encode: () => tx_1.MsgAcknowledgement.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgAcknowledgement doesn't support Amino encoding.");
        });
    }
}
exports.MsgAcknowledgement = MsgAcknowledgement;
/**
 * MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel
 * on Chain B.
 */
class MsgChannelOpenTry {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelOpenTry",
                value: this.msg,
                encode: () => tx_1.MsgChannelOpenTry.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelOpenTry doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelOpenTry = MsgChannelOpenTry;
/**
 * MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge
 * the change of channel state to TRYOPEN on Chain B.
 */
class MsgChannelOpenAck {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelOpenAck",
                value: this.msg,
                encode: () => tx_1.MsgChannelOpenAck.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelOpenAck doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelOpenAck = MsgChannelOpenAck;
/**
 * MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
 * acknowledge the change of channel state to OPEN on Chain A.
 */
class MsgChannelOpenConfirm {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelOpenConfirm",
                value: this.msg,
                encode: () => tx_1.MsgChannelOpenConfirm.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelOpenConfirm doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelOpenConfirm = MsgChannelOpenConfirm;
/**
 * MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
 * to close a channel with Chain B.
 */
class MsgChannelCloseInit {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelCloseInit",
                value: this.msg,
                encode: () => tx_1.MsgChannelCloseInit.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelCloseInit doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelCloseInit = MsgChannelCloseInit;
/** MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to CLOSED on Chain A. */
class MsgChannelCloseConfirm {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelCloseConfirm",
                value: this.msg,
                encode: () => tx_1.MsgChannelCloseConfirm.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelCloseConfirm doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelCloseConfirm = MsgChannelCloseConfirm;
class MsgChannelUpgradeInit {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelUpgradeInit",
                value: this.msg,
                encode: () => tx_1.MsgChannelUpgradeInit.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelUpgradeInit doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelUpgradeInit = MsgChannelUpgradeInit;
class MsgChannelUpgradeTry {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelUpgradeTry",
                value: this.msg,
                encode: () => tx_1.MsgChannelUpgradeTry.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelUpgradeTry doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelUpgradeTry = MsgChannelUpgradeTry;
class MsgChannelUpgradeAck {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelUpgradeAck",
                value: this.msg,
                encode: () => tx_1.MsgChannelUpgradeAck.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelUpgradeAck doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelUpgradeAck = MsgChannelUpgradeAck;
class MsgChannelUpgradeOpen {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelUpgradeOpen",
                value: this.msg,
                encode: () => tx_1.MsgChannelUpgradeOpen.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelUpgradeOpen doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelUpgradeOpen = MsgChannelUpgradeOpen;
class MsgChannelUpgradeTimeout {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelUpgradeTimeout",
                value: this.msg,
                encode: () => tx_1.MsgChannelUpgradeTimeout.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelUpgradeTimeout doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelUpgradeTimeout = MsgChannelUpgradeTimeout;
class MsgChannelUpgradeCancel {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgChannelUpgradeCancel",
                value: this.msg,
                encode: () => tx_1.MsgChannelUpgradeCancel.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgChannelUpgradeCancel doesn't support Amino encoding.");
        });
    }
}
exports.MsgChannelUpgradeCancel = MsgChannelUpgradeCancel;
class MsgPruneAcknowledgements {
    constructor(msg) {
        this.msg = msg;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type_url: "/ibc.core.channel.v1.MsgPruneAcknowledgements",
                value: this.msg,
                encode: () => tx_1.MsgPruneAcknowledgements.encode(this.msg).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("MsgPruneAcknowledgements doesn't support Amino encoding.");
        });
    }
}
exports.MsgPruneAcknowledgements = MsgPruneAcknowledgements;
//# sourceMappingURL=ibc_channel.js.map