"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RaAuthenticate = void 0;
const encoding_1 = require("@cosmjs/encoding");
const utils_1 = require("../utils");
const msg_1 = require("../protobuf/secret/registration/v1beta1/msg");
/** RaAuthenticate defines a message to register an new node. */
class RaAuthenticate {
    constructor(params) {
        this.params = params;
    }
    toProto() {
        return __awaiter(this, void 0, void 0, function* () {
            const msgContent = {
                sender: (0, utils_1.addressToBytes)(this.params.sender),
                certificate: this.params.certificate,
            };
            return {
                type_url: "/secret.registration.v1beta1.RaAuthenticate",
                value: msgContent,
                encode: () => msg_1.RaAuthenticate.encode(msgContent).finish(),
            };
        });
    }
    toAmino() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                type: "reg/authenticate",
                value: {
                    sender: this.params.sender,
                    ra_cert: (0, encoding_1.toBase64)(this.params.certificate),
                },
            };
        });
    }
}
exports.RaAuthenticate = RaAuthenticate;
//# sourceMappingURL=registration.js.map